

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Jun 13 15:02:25 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1
    54                           	psect	text44,global,reloc=2,class=CODE,delta=1
    55                           	psect	text45,global,reloc=2,class=CODE,delta=1
    56                           	psect	text46,global,reloc=2,class=CODE,delta=1
    57                           	psect	text47,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           	psect	smallconst
    62  001000                     __psmallconst:
    63                           	opt stack 0
    64  001000  00                 	db	0
    65  001001                     _dpowers:
    66                           	opt stack 0
    67  001001  0001               	dw	1
    68  001003  0000               	dw	0
    69  001005  000A               	dw	10
    70  001007  0000               	dw	0
    71  001009  0064               	dw	100
    72  00100B  0000               	dw	0
    73  00100D  03E8               	dw	1000
    74  00100F  0000               	dw	0
    75  001011  2710               	dw	10000
    76  001013  0000               	dw	0
    77  001015  86A0               	dw	34464
    78  001017  0001               	dw	1
    79  001019  4240               	dw	16960
    80  00101B  000F               	dw	15
    81  00101D  9680               	dw	38528
    82  00101F  0098               	dw	152
    83  001021  E100               	dw	57600
    84  001023  05F5               	dw	1525
    85  001025  CA00               	dw	51712
    86  001027  3B9A               	dw	15258
    87  001029                     __end_of_dpowers:
    88                           	opt stack 0
    89  001029                     __npowers_:
    90                           	opt stack 0
    91  001029  00                 	db	0
    92  00102A  80                 	db	128
    93  00102B  3F                 	db	63
    94  00102C  CD                 	db	205
    95  00102D  CC                 	db	204
    96  00102E  3D                 	db	61
    97  00102F  D7                 	db	215
    98  001030  23                 	db	35
    99  001031  3C                 	db	60
   100  001032  12                 	db	18
   101  001033  83                 	db	131
   102  001034  3A                 	db	58
   103  001035  B7                 	db	183
   104  001036  D1                 	db	209
   105  001037  38                 	db	56
   106  001038  C6                 	db	198
   107  001039  27                 	db	39
   108  00103A  37                 	db	55
   109  00103B  38                 	db	56
   110  00103C  86                 	db	134
   111  00103D  35                 	db	53
   112  00103E  C0                 	db	192
   113  00103F  D6                 	db	214
   114  001040  33                 	db	51
   115  001041  CC                 	db	204
   116  001042  2B                 	db	43
   117  001043  32                 	db	50
   118  001044  70                 	db	112
   119  001045  89                 	db	137
   120  001046  30                 	db	48
   121  001047  E7                 	db	231
   122  001048  DB                 	db	219
   123  001049  2E                 	db	46
   124  00104A  E5                 	db	229
   125  00104B  3C                 	db	60
   126  00104C  1E                 	db	30
   127  00104D  42                 	db	66
   128  00104E  A2                 	db	162
   129  00104F  0D                 	db	13
   130  001050                     __end_of__npowers_:
   131                           	opt stack 0
   132  001050                     __powers_:
   133                           	opt stack 0
   134  001050  00                 	db	0
   135  001051  80                 	db	128
   136  001052  3F                 	db	63
   137  001053  00                 	db	0
   138  001054  20                 	db	32
   139  001055  41                 	db	65
   140  001056  00                 	db	0
   141  001057  C8                 	db	200
   142  001058  42                 	db	66
   143  001059  00                 	db	0
   144  00105A  7A                 	db	122
   145  00105B  44                 	db	68
   146  00105C  40                 	db	64
   147  00105D  1C                 	db	28
   148  00105E  46                 	db	70
   149  00105F  50                 	db	80
   150  001060  C3                 	db	195
   151  001061  47                 	db	71
   152  001062  24                 	db	36
   153  001063  74                 	db	116
   154  001064  49                 	db	73
   155  001065  97                 	db	151
   156  001066  18                 	db	24
   157  001067  4B                 	db	75
   158  001068  BC                 	db	188
   159  001069  BE                 	db	190
   160  00106A  4C                 	db	76
   161  00106B  6B                 	db	107
   162  00106C  6E                 	db	110
   163  00106D  4E                 	db	78
   164  00106E  03                 	db	3
   165  00106F  15                 	db	21
   166  001070  50                 	db	80
   167  001071  79                 	db	121
   168  001072  AD                 	db	173
   169  001073  60                 	db	96
   170  001074  F3                 	db	243
   171  001075  49                 	db	73
   172  001076  71                 	db	113
   173  001077                     __end_of__powers_:
   174                           	opt stack 0
   175  001077                     _keyPadMatrix:
   176                           	opt stack 0
   177  001077  31                 	db	49
   178  001078  32                 	db	50
   179  001079  33                 	db	51
   180  00107A  34                 	db	52
   181  00107B  35                 	db	53
   182  00107C  36                 	db	54
   183  00107D  37                 	db	55
   184  00107E  38                 	db	56
   185  00107F  39                 	db	57
   186  001080  2A                 	db	42
   187  001081  30                 	db	48
   188  001082  23                 	db	35
   189  001083  FF                 	db	255
   190  001084                     __end_of_keyPadMatrix:
   191                           	opt stack 0
   192  001084                     _Seven_Segment_MAP:
   193                           	opt stack 0
   194  001084  00                 	db	0
   195  001085  01                 	db	1
   196  001086  02                 	db	2
   197  001087  03                 	db	3
   198  001088  04                 	db	4
   199  001089  05                 	db	5
   200  00108A  06                 	db	6
   201  00108B  07                 	db	7
   202  00108C  08                 	db	8
   203  00108D  09                 	db	9
   204  00108E                     __end_of_Seven_Segment_MAP:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _INTCONbits	set	4082
   213  0000                     _LATB	set	3978
   214  0000                     _LATBbits	set	3978
   215  0000                     _LATCbits	set	3979
   216  0000                     _OSCCON	set	4051
   217  0000                     _PIE1bits	set	3997
   218  0000                     _PIR1bits	set	3998
   219  0000                     _PORTAbits	set	3968
   220  0000                     _PORTB	set	3969
   221  0000                     _PORTCbits	set	3970
   222  0000                     _TRISAbits	set	3986
   223  0000                     _TRISB	set	3987
   224  0000                     _TRISBbits	set	3987
   225  0000                     _TRISC	set	3988
   226  00108E                     STR_6:
   227  00108E  50                 	db	80	;'P'
   228  00108F  72                 	db	114	;'r'
   229  001090  65                 	db	101	;'e'
   230  001091  73                 	db	115	;'s'
   231  001092  73                 	db	115	;'s'
   232  001093  20                 	db	32
   233  001094  23                 	db	35
   234  001095  20                 	db	32
   235  001096  74                 	db	116	;'t'
   236  001097  6F                 	db	111	;'o'
   237  001098  20                 	db	32
   238  001099  43                 	db	67	;'C'
   239  00109A  6F                 	db	111	;'o'
   240  00109B  6E                 	db	110	;'n'
   241  00109C  74                 	db	116	;'t'
   242  00109D  2E                 	db	46
   243  00109E  00                 	db	0
   244  00109F                     STR_2:
   245  00109F  54                 	db	84	;'T'
   246  0010A0  65                 	db	101	;'e'
   247  0010A1  6D                 	db	109	;'m'
   248  0010A2  70                 	db	112	;'p'
   249  0010A3  20                 	db	32
   250  0010A4  43                 	db	67	;'C'
   251  0010A5  6F                 	db	111	;'o'
   252  0010A6  6E                 	db	110	;'n'
   253  0010A7  74                 	db	116	;'t'
   254  0010A8  72                 	db	114	;'r'
   255  0010A9  6F                 	db	111	;'o'
   256  0010AA  6C                 	db	108	;'l'
   257  0010AB  2E                 	db	46
   258  0010AC  2E                 	db	46
   259  0010AD  2E                 	db	46
   260  0010AE  00                 	db	0
   261  0010AF                     STR_3:
   262  0010AF  45                 	db	69	;'E'
   263  0010B0  6E                 	db	110	;'n'
   264  0010B1  74                 	db	116	;'t'
   265  0010B2  65                 	db	101	;'e'
   266  0010B3  72                 	db	114	;'r'
   267  0010B4  20                 	db	32
   268  0010B5  54                 	db	84	;'T'
   269  0010B6  65                 	db	101	;'e'
   270  0010B7  6D                 	db	109	;'m'
   271  0010B8  70                 	db	112	;'p'
   272  0010B9  20                 	db	32
   273  0010BA  52                 	db	82	;'R'
   274  0010BB  65                 	db	101	;'e'
   275  0010BC  66                 	db	102	;'f'
   276  0010BD  00                 	db	0
   277  0010BE                     STR_4:
   278  0010BE  54                 	db	84	;'T'
   279  0010BF  65                 	db	101	;'e'
   280  0010C0  6D                 	db	109	;'m'
   281  0010C1  70                 	db	112	;'p'
   282  0010C2  20                 	db	32
   283  0010C3  52                 	db	82	;'R'
   284  0010C4  65                 	db	101	;'e'
   285  0010C5  66                 	db	102	;'f'
   286  0010C6  3A                 	db	58	;':'
   287  0010C7  20                 	db	32
   288  0010C8  00                 	db	0
   289  0010C9                     STR_9:
   290  0010C9  54                 	db	84	;'T'
   291  0010CA  65                 	db	101	;'e'
   292  0010CB  6D                 	db	109	;'m'
   293  0010CC  70                 	db	112	;'p'
   294  0010CD  20                 	db	32
   295  0010CE  69                 	db	105	;'i'
   296  0010CF  73                 	db	115	;'s'
   297  0010D0  3A                 	db	58	;':'
   298  0010D1  20                 	db	32
   299  0010D2  00                 	db	0
   300  0010D3                     STR_1:
   301  0010D3  41                 	db	65	;'A'
   302  0010D4  75                 	db	117	;'u'
   303  0010D5  74                 	db	116	;'t'
   304  0010D6  6F                 	db	111	;'o'
   305  0010D7  6D                 	db	109	;'m'
   306  0010D8  61                 	db	97	;'a'
   307  0010D9  74                 	db	116	;'t'
   308  0010DA  69                 	db	105	;'i'
   309  0010DB  63                 	db	99	;'c'
   310  0010DC  00                 	db	0
   311  0010DD                     STR_8:
   312  0010DD  25                 	db	37
   313  0010DE  2E                 	db	46
   314  0010DF  33                 	db	51	;'3'
   315  0010E0  67                 	db	103	;'g'
   316  0010E1  00                 	db	0
   317  0010E2                     STR_10:
   318  0010E2  20                 	db	32
   319  0010E3  20                 	db	32
   320  0010E4  00                 	db	0
   321  0000                     
   322                           ; #config settings
   323  0010E5  00                 	db	0	; dummy byte at the end
   324  0000                     
   325                           	psect	cinit
   326  0038CC                     __pcinit:
   327                           	opt stack 0
   328  0038CC                     start_initialization:
   329                           	opt stack 0
   330  0038CC                     __initialization:
   331                           	opt stack 0
   332                           
   333                           ; Clear objects allocated to BANK0 (23 bytes)
   334  0038CC  EE00  F080         	lfsr	0,__pbssBANK0
   335  0038D0  0E17               	movlw	23
   336  0038D2                     clear_0:
   337  0038D2  6AEE               	clrf	postinc0,c
   338  0038D4  06E8               	decf	wreg,f,c
   339  0038D6  E1FD               	bnz	clear_0
   340                           
   341                           ; Clear objects allocated to COMRAM (10 bytes)
   342  0038D8  EE00  F076         	lfsr	0,__pbssCOMRAM
   343  0038DC  0E0A               	movlw	10
   344  0038DE                     clear_1:
   345  0038DE  6AEE               	clrf	postinc0,c
   346  0038E0  06E8               	decf	wreg,f,c
   347  0038E2  E1FD               	bnz	clear_1
   348  0038E4                     end_of_initialization:
   349                           	opt stack 0
   350  0038E4                     __end_of__initialization:
   351                           	opt stack 0
   352  0038E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   353  0038E6  6EF8               	movwf	tblptru,c
   354  0038E8  0100               	movlb	0
   355  0038EA  EF5A  F011         	goto	_main	;jump to C main() function
   356                           tblptru	equ	0xFF8
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	bssCOMRAM
   361  000076                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000076                     _keypress:
   364                           	opt stack 0
   365  000076                     	ds	4
   366  00007A                     _ActualTemp:
   367                           	opt stack 0
   368  00007A                     	ds	3
   369  00007D                     _old_key:
   370                           	opt stack 0
   371  00007D                     	ds	1
   372  00007E                     _Temp_Ref:
   373                           	opt stack 0
   374  00007E                     	ds	2
   375                           tblptru	equ	0xFF8
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           
   379                           	psect	bssBANK0
   380  000080                     __pbssBANK0:
   381                           	opt stack 0
   382  000080                     _ADCResult:
   383                           	opt stack 0
   384  000080                     	ds	2
   385  000082                     _key:
   386                           	opt stack 0
   387  000082                     	ds	1
   388  000083                     _stringKey:
   389                           	opt stack 0
   390  000083                     	ds	10
   391  00008D                     _stringKeyActual:
   392                           	opt stack 0
   393  00008D                     	ds	10
   394                           tblptru	equ	0xFF8
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	cstackCOMRAM
   399  000001                     __pcstackCOMRAM:
   400                           	opt stack 0
   401  000001                     ??_isdigit:
   402  000001                     ??_Delay10KTCYx:
   403  000001                     ??_Delay_Seconds:
   404  000001                     ?_kbd_getc:
   405                           	opt stack 0
   406  000001                     ?_ReadADC:
   407                           	opt stack 0
   408  000001                     ?___awmod:
   409                           	opt stack 0
   410  000001                     ?___lwdiv:
   411                           	opt stack 0
   412  000001                     ?___lwmod:
   413                           	opt stack 0
   414  000001                     ?___ftpack:
   415                           	opt stack 0
   416  000001                     ?__tdiv_to_l_:
   417                           	opt stack 0
   418  000001                     ?__div_to_l_:
   419                           	opt stack 0
   420  000001                     ?___fttol:
   421                           	opt stack 0
   422  000001                     ?___lldiv:
   423                           	opt stack 0
   424  000001                     ?___llmod:
   425                           	opt stack 0
   426  000001                     OpenADC@config2:
   427                           	opt stack 0
   428  000001                     Delay10TCYx@unit:
   429                           	opt stack 0
   430  000001                     Delay1KTCYx@unit:
   431                           	opt stack 0
   432  000001                     ___awmod@dividend:
   433                           	opt stack 0
   434  000001                     ___lwdiv@dividend:
   435                           	opt stack 0
   436  000001                     ___lwmod@dividend:
   437                           	opt stack 0
   438  000001                     __div_to_l_@f1:
   439                           	opt stack 0
   440  000001                     ___ftpack@arg:
   441                           	opt stack 0
   442  000001                     __tdiv_to_l_@f1:
   443                           	opt stack 0
   444  000001                     ___fttol@f1:
   445                           	opt stack 0
   446  000001                     ___lldiv@dividend:
   447                           	opt stack 0
   448  000001                     ___llmod@dividend:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x0
   452  000001                     	ds	1
   453  000002                     ??_SetDDRamAddr:
   454  000002                     Delay_Seconds@z:
   455                           	opt stack 0
   456  000002                     OpenADC@portconfig:
   457                           	opt stack 0
   458  000002                     WriteCmdXLCD@cmd:
   459                           	opt stack 0
   460  000002                     WriteDataXLCD@data:
   461                           	opt stack 0
   462  000002                     Delay10KTCYx@unit:
   463                           	opt stack 0
   464  000002                     _isdigit$1512:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x1
   468  000002                     	ds	1
   469  000003                     ??_kbd_getc:
   470  000003                     ??_ReadADC:
   471  000003                     ??_OpenADC:
   472  000003                     Delay_Seconds@y:
   473                           	opt stack 0
   474  000003                     isdigit@c:
   475                           	opt stack 0
   476  000003                     putrsXLCD@buffer:
   477                           	opt stack 0
   478  000003                     putsXLCD@buffer:
   479                           	opt stack 0
   480  000003                     ___awmod@divisor:
   481                           	opt stack 0
   482  000003                     ___lwdiv@divisor:
   483                           	opt stack 0
   484  000003                     ___lwmod@divisor:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x2
   488  000003                     	ds	1
   489  000004                     Delay_Seconds@x:
   490                           	opt stack 0
   491  000004                     kbd_getc@key:
   492                           	opt stack 0
   493  000004                     ___ftpack@exp:
   494                           	opt stack 0
   495  000004                     __div_to_l_@f2:
   496                           	opt stack 0
   497  000004                     __tdiv_to_l_@f2:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x3
   501  000004                     	ds	1
   502  000005                     ??___fttol:
   503  000005                     kbd_getc@row:
   504                           	opt stack 0
   505  000005                     OpenADC@config:
   506                           	opt stack 0
   507  000005                     SetDDRamAddr@DDaddr:
   508                           	opt stack 0
   509  000005                     ___awmod@counter:
   510                           	opt stack 0
   511  000005                     ___ftpack@sign:
   512                           	opt stack 0
   513  000005                     ___lwmod@counter:
   514                           	opt stack 0
   515  000005                     ___lwdiv@quotient:
   516                           	opt stack 0
   517  000005                     ___lldiv@divisor:
   518                           	opt stack 0
   519  000005                     ___llmod@divisor:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x4
   523  000005                     	ds	1
   524  000006                     ??___ftpack:
   525  000006                     LCD_Move@column:
   526                           	opt stack 0
   527  000006                     OpenXLCD@lcdtype:
   528                           	opt stack 0
   529  000006                     ___awmod@sign:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x5
   533  000006                     	ds	1
   534  000007                     ??__tdiv_to_l_:
   535  000007                     ?___awdiv:
   536                           	opt stack 0
   537  000007                     LCD_Move@row:
   538                           	opt stack 0
   539  000007                     ___lwdiv@counter:
   540                           	opt stack 0
   541  000007                     ___awdiv@dividend:
   542                           	opt stack 0
   543  000007                     __div_to_l_@quot:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0x6
   547  000007                     	ds	1
   548  000008                     LCD_Move@ddaddr:
   549                           	opt stack 0
   550  000008                     utoa@buf:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x7
   554  000008                     	ds	1
   555  000009                     ?___lwtoft:
   556                           	opt stack 0
   557  000009                     ___llmod@counter:
   558                           	opt stack 0
   559  000009                     ___awdiv@divisor:
   560                           	opt stack 0
   561  000009                     ___lwtoft@c:
   562                           	opt stack 0
   563  000009                     ___lldiv@quotient:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x8
   567  000009                     	ds	1
   568  00000A                     ___fttol@sign1:
   569                           	opt stack 0
   570  00000A                     utoa@val:
   571                           	opt stack 0
   572  00000A                     __tdiv_to_l_@quot:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x9
   576  00000A                     	ds	1
   577  00000B                     ___awdiv@counter:
   578                           	opt stack 0
   579  00000B                     __div_to_l_@cntr:
   580                           	opt stack 0
   581  00000B                     ___fttol@lval:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0xA
   585  00000B                     	ds	1
   586  00000C                     ___awdiv@sign:
   587                           	opt stack 0
   588  00000C                     __div_to_l_@exp1:
   589                           	opt stack 0
   590  00000C                     utoa@base:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0xB
   594  00000C                     	ds	1
   595  00000D                     ___lldiv@counter:
   596                           	opt stack 0
   597  00000D                     ___awdiv@quotient:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0xC
   601  00000D                     	ds	1
   602  00000E                     __tdiv_to_l_@cntr:
   603                           	opt stack 0
   604  00000E                     utoa@v:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0xD
   608  00000E                     	ds	1
   609  00000F                     ?___wmul:
   610                           	opt stack 0
   611  00000F                     __tdiv_to_l_@exp1:
   612                           	opt stack 0
   613  00000F                     ___fttol@exp1:
   614                           	opt stack 0
   615  00000F                     ___wmul@multiplier:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0xE
   619  00000F                     	ds	1
   620  000010                     ?___lltoft:
   621                           	opt stack 0
   622  000010                     utoa@c:
   623                           	opt stack 0
   624  000010                     ___lltoft@c:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0xF
   628  000010                     	ds	1
   629  000011                     ___wmul@multiplicand:
   630                           	opt stack 0
   631  000011                     itoa@buf:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x10
   635  000011                     	ds	2
   636  000013                     ___wmul@product:
   637                           	opt stack 0
   638  000013                     itoa@val:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x12
   642  000013                     	ds	1
   643  000014                     ??___lltoft:
   644                           
   645                           ; 0 bytes @ 0x13
   646  000014                     	ds	1
   647  000015                     itoa@base:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x14
   651  000015                     	ds	2
   652  000017                     itoa@cp:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x16
   656  000017                     	ds	1
   657  000018                     ___lltoft@exp:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x17
   661  000018                     	ds	1
   662  000019                     ?___ftneg:
   663                           	opt stack 0
   664  000019                     ___ftneg@f1:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x18
   668  000019                     	ds	3
   669  00001C                     ?___ftmul:
   670                           	opt stack 0
   671  00001C                     ___ftmul@f1:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x1B
   675  00001C                     	ds	3
   676  00001F                     ___ftmul@f2:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x1E
   680  00001F                     	ds	3
   681  000022                     ??___ftmul:
   682                           
   683                           ; 0 bytes @ 0x21
   684  000022                     	ds	3
   685  000025                     ___ftmul@exp:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x24
   689  000025                     	ds	1
   690  000026                     ___ftmul@f3_as_product:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x25
   694  000026                     	ds	3
   695  000029                     ___ftmul@cntr:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x28
   699  000029                     	ds	1
   700  00002A                     ___ftmul@sign:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x29
   704  00002A                     	ds	1
   705  00002B                     ?_fround:
   706                           	opt stack 0
   707  00002B                     ?_scale:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x2A
   711  00002B                     	ds	3
   712  00002E                     _fround$1768:
   713                           	opt stack 0
   714  00002E                     _scale$1769:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x2D
   718  00002E                     	ds	3
   719  000031                     scale@scl:
   720                           	opt stack 0
   721  000031                     _fround$1767:
   722                           	opt stack 0
   723                           
   724                           ; 3 bytes @ 0x30
   725  000031                     	ds	1
   726  000032                     ?___ftdiv:
   727                           	opt stack 0
   728  000032                     ___ftdiv@f1:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x31
   732  000032                     	ds	2
   733  000034                     fround@prec:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x33
   737  000034                     	ds	1
   738  000035                     ?___ftadd:
   739                           	opt stack 0
   740  000035                     ___ftadd@f1:
   741                           	opt stack 0
   742  000035                     ___ftdiv@f2:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x34
   746  000035                     	ds	3
   747  000038                     ??___ftdiv:
   748  000038                     ___ftadd@f2:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x37
   752  000038                     	ds	3
   753  00003B                     ??___ftadd:
   754  00003B                     ___ftdiv@cntr:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x3A
   758  00003B                     	ds	1
   759  00003C                     ___ftdiv@f3:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x3B
   763  00003C                     	ds	2
   764  00003E                     ___ftadd@sign:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x3D
   768  00003E                     	ds	1
   769  00003F                     ___ftadd@exp2:
   770                           	opt stack 0
   771  00003F                     ___ftdiv@exp:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x3E
   775  00003F                     	ds	1
   776  000040                     ___ftadd@exp1:
   777                           	opt stack 0
   778  000040                     ___ftdiv@sign:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x3F
   782  000040                     	ds	1
   783  000041                     ?___ftsub:
   784                           	opt stack 0
   785  000041                     ___ftge@ff1:
   786                           	opt stack 0
   787  000041                     ___ftsub@f1:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x40
   791  000041                     	ds	3
   792  000044                     ___ftge@ff2:
   793                           	opt stack 0
   794  000044                     ___ftsub@f2:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x43
   798  000044                     	ds	3
   799  000047                     ??___ftge:
   800                           
   801                           ; 0 bytes @ 0x46
   802  000047                     	ds	3
   803  00004A                     ?_sprintf:
   804                           	opt stack 0
   805  00004A                     sprintf@sp:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x49
   809  00004A                     	ds	2
   810  00004C                     sprintf@f:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x4B
   814  00004C                     	ds	5
   815  000051                     ??_sprintf:
   816                           
   817                           ; 0 bytes @ 0x50
   818  000051                     	ds	6
   819  000057                     _sprintf$1770:
   820                           	opt stack 0
   821                           
   822                           ; 3 bytes @ 0x56
   823  000057                     	ds	3
   824  00005A                     sprintf@ap:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x59
   828  00005A                     	ds	2
   829  00005C                     sprintf@temp:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x5B
   833  00005C                     	ds	3
   834  00005F                     sprintf@flag:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x5E
   838  00005F                     	ds	2
   839  000061                     sprintf@tmpval:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x60
   843  000061                     	ds	4
   844  000065                     sprintf@val:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x64
   848  000065                     	ds	4
   849  000069                     sprintf@exp:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x68
   853  000069                     	ds	2
   854  00006B                     sprintf@prec:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x6A
   858  00006B                     	ds	2
   859  00006D                     sprintf@fval:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0x6C
   863  00006D                     	ds	3
   864  000070                     sprintf@c:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x6F
   868  000070                     	ds	1
   869  000071                     ??_main:
   870                           
   871                           ; 0 bytes @ 0x70
   872  000071                     	ds	5
   873                           tblptru	equ	0xFF8
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           
   877 ;;
   878 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   879 ;;
   880 ;; *************** function _main *****************
   881 ;; Defined at:
   882 ;;		line 87 in file "main.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;		None               void
   889 ;; Registers used:
   890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   898 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   899 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   900 ;;Total ram usage:        5 bytes
   901 ;; Hardware stack levels required when called:    5
   902 ;; This function calls:
   903 ;;		_BusyADC
   904 ;;		_ConvertADC
   905 ;;		_Delay_Seconds
   906 ;;		_LCD_Clear
   907 ;;		_LCD_Move
   908 ;;		_ReadADC
   909 ;;		_WriteDataXLCD
   910 ;;		___ftdiv
   911 ;;		___ftge
   912 ;;		___ftmul
   913 ;;		___lwtoft
   914 ;;		___wmul
   915 ;;		_init_ADC
   916 ;;		_init_XLCD
   917 ;;		_itoa
   918 ;;		_kbd_getc
   919 ;;		_putrsXLCD
   920 ;;		_putsXLCD
   921 ;;		_sprintf
   922 ;; This function is called by:
   923 ;;		Startup code after reset
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text0
   928  0022B4                     __ptext0:
   929                           	opt stack 0
   930  0022B4                     _main:
   931                           	opt stack 26
   932                           
   933                           ;main.c: 88: OSCCON=0x76;
   934                           
   935                           ;incstack = 0
   936  0022B4  0E76               	movlw	118
   937  0022B6  6ED3               	movwf	4051,c	;volatile
   938                           
   939                           ;main.c: 89: TRISC = 0xF0;
   940  0022B8  0EF0               	movlw	240
   941  0022BA  6E94               	movwf	3988,c	;volatile
   942                           
   943                           ;main.c: 90: TRISB = 0x00;
   944  0022BC  0E00               	movlw	0
   945  0022BE  6E93               	movwf	3987,c	;volatile
   946                           
   947                           ;main.c: 91: PORTB = 0x00;
   948  0022C0  0E00               	movlw	0
   949  0022C2  6E81               	movwf	3969,c	;volatile
   950                           
   951                           ;main.c: 92: TRISAbits.RA0 = 1;
   952  0022C4  8092               	bsf	3986,0,c	;volatile
   953                           
   954                           ;main.c: 93: TRISAbits.RA1 = 0;
   955  0022C6  9292               	bcf	3986,1,c	;volatile
   956                           
   957                           ;main.c: 94: TRISAbits.RA2 = 0;
   958  0022C8  9492               	bcf	3986,2,c	;volatile
   959                           
   960                           ;main.c: 95: LATB = 0x00;
   961  0022CA  0E00               	movlw	0
   962  0022CC  6E8A               	movwf	3978,c	;volatile
   963                           
   964                           ;main.c: 96: init_XLCD();
   965  0022CE  EC99  F01C         	call	_init_XLCD	;wreg free
   966                           
   967                           ;main.c: 97: init_ADC();
   968  0022D2  ECD1  F01C         	call	_init_ADC	;wreg free
   969                           
   970                           ;main.c: 99: LCD_Move(1,3);
   971  0022D6  0E03               	movlw	3
   972  0022D8  6E06               	movwf	LCD_Move@column,c
   973  0022DA  0E01               	movlw	1
   974  0022DC  EC88  F01C         	call	_LCD_Move
   975                           
   976                           ;main.c: 100: putrsXLCD("Automatic");
   977  0022E0  0ED3               	movlw	low STR_1
   978  0022E2  6E03               	movwf	putrsXLCD@buffer,c
   979  0022E4  0E10               	movlw	high STR_1
   980  0022E6  6E04               	movwf	putrsXLCD@buffer+1,c
   981  0022E8  ECDD  F01B         	call	_putrsXLCD	;wreg free
   982                           
   983                           ;main.c: 101: LCD_Move(2,1);
   984  0022EC  0E01               	movlw	1
   985  0022EE  6E06               	movwf	LCD_Move@column,c
   986  0022F0  0E02               	movlw	2
   987  0022F2  EC88  F01C         	call	_LCD_Move
   988                           
   989                           ;main.c: 102: putrsXLCD("Temp Control...");
   990  0022F6  0E9F               	movlw	low STR_2
   991  0022F8  6E03               	movwf	putrsXLCD@buffer,c
   992  0022FA  0E10               	movlw	high STR_2
   993  0022FC  6E04               	movwf	putrsXLCD@buffer+1,c
   994  0022FE  ECDD  F01B         	call	_putrsXLCD	;wreg free
   995                           
   996                           ;main.c: 103: Delay_Seconds(2);
   997  002302  0E02               	movlw	2
   998  002304  ECF9  F01B         	call	_Delay_Seconds
   999                           
  1000                           ;main.c: 104: LCD_Clear();
  1001  002308  ECB5  F01C         	call	_LCD_Clear	;wreg free
  1002                           
  1003                           ;main.c: 106: PORTAbits.RA1 = 0;
  1004  00230C  9280               	bcf	3968,1,c	;volatile
  1005                           
  1006                           ;main.c: 107: PORTAbits.RA2 = 0;
  1007  00230E  9480               	bcf	3968,2,c	;volatile
  1008  002310  D000               	goto	l3928
  1009  002312                     l3928:
  1010                           
  1011                           ;main.c: 111: LCD_Clear();
  1012  002312  ECB5  F01C         	call	_LCD_Clear	;wreg free
  1013                           
  1014                           ;main.c: 112: LCD_Move(1,1);
  1015  002316  0E01               	movlw	1
  1016  002318  6E06               	movwf	LCD_Move@column,c
  1017  00231A  0E01               	movlw	1
  1018  00231C  EC88  F01C         	call	_LCD_Move
  1019                           
  1020                           ;main.c: 113: putrsXLCD("Enter Temp Ref");
  1021  002320  0EAF               	movlw	low STR_3
  1022  002322  6E03               	movwf	putrsXLCD@buffer,c
  1023  002324  0E10               	movlw	high STR_3
  1024  002326  6E04               	movwf	putrsXLCD@buffer+1,c
  1025  002328  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1026                           
  1027                           ;main.c: 114: Temp_Ref=0;
  1028  00232C  0E00               	movlw	0
  1029  00232E  6E7F               	movwf	_Temp_Ref+1,c
  1030  002330  0E00               	movlw	0
  1031  002332  6E7E               	movwf	_Temp_Ref,c
  1032                           
  1033                           ;main.c: 115: LCD_Move(2,1);
  1034  002334  0E01               	movlw	1
  1035  002336  6E06               	movwf	LCD_Move@column,c
  1036  002338  0E02               	movlw	2
  1037  00233A  EC88  F01C         	call	_LCD_Move
  1038                           
  1039                           ;main.c: 116: putrsXLCD("Temp Ref: ");
  1040  00233E  0EBE               	movlw	low STR_4
  1041  002340  6E03               	movwf	putrsXLCD@buffer,c
  1042  002342  0E10               	movlw	high STR_4
  1043  002344  6E04               	movwf	putrsXLCD@buffer+1,c
  1044  002346  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1045  00234A  D000               	goto	l3940
  1046  00234C                     l3940:
  1047                           
  1048                           ;main.c: 120: keypress = kbd_getc();
  1049  00234C  EC9C  F016         	call	_kbd_getc	;wreg free
  1050  002350  C001  F076         	movff	?_kbd_getc,_keypress
  1051  002354  C002  F077         	movff	?_kbd_getc+1,_keypress+1
  1052  002358  0E00               	movlw	0
  1053  00235A  BE77               	btfsc	_keypress+1,7,c
  1054  00235C  0EFF               	movlw	-1
  1055  00235E  6E78               	movwf	_keypress+2,c
  1056  002360  6E79               	movwf	_keypress+3,c
  1057                           
  1058                           ;main.c: 121: if ( keypress == '#' )break;
  1059  002362  0E23               	movlw	35
  1060  002364  1876               	xorwf	_keypress,w,c
  1061  002366  1077               	iorwf	_keypress+1,w,c
  1062  002368  1078               	iorwf	_keypress+2,w,c
  1063  00236A  1079               	iorwf	_keypress+3,w,c
  1064  00236C  B4D8               	btfsc	status,2,c
  1065  00236E  D03A               	goto	l3956
  1066  002370  D001               	goto	l3946
  1067  002372  D038               	goto	l3956
  1068  002374                     l3946:
  1069                           
  1070                           ;main.c: 122: if ( keypress == '*' )goto START;
  1071  002374  0E2A               	movlw	42
  1072  002376  1876               	xorwf	_keypress,w,c
  1073  002378  1077               	iorwf	_keypress+1,w,c
  1074  00237A  1078               	iorwf	_keypress+2,w,c
  1075  00237C  1079               	iorwf	_keypress+3,w,c
  1076  00237E  B4D8               	btfsc	status,2,c
  1077  002380  D7C8               	goto	l3928
  1078  002382  D001               	goto	l3950
  1079  002384  D7C6               	goto	l3928
  1080  002386                     l3950:
  1081                           
  1082                           ;main.c: 124: if(keypress!=0xFF){
  1083  002386  2876               	incf	_keypress,w,c
  1084  002388  1077               	iorwf	_keypress+1,w,c
  1085  00238A  1078               	iorwf	_keypress+2,w,c
  1086  00238C  1079               	iorwf	_keypress+3,w,c
  1087  00238E  B4D8               	btfsc	status,2,c
  1088  002390  D7DD               	goto	l3940
  1089                           
  1090                           ;main.c: 125: WriteDataXLCD(keypress ) ;
  1091  002392  5076               	movf	_keypress,w,c
  1092  002394  EC7F  F01B         	call	_WriteDataXLCD
  1093                           
  1094                           ;main.c: 126: Temp_Ref = (10*Temp_Ref) + Seven_Segment_MAP[keypress-'0'];
  1095  002398  0ED0               	movlw	208
  1096  00239A  6E71               	movwf	??_main& (0+255),c
  1097  00239C  0EFF               	movlw	255
  1098  00239E  6E72               	movwf	(??_main+1)& (0+255),c
  1099  0023A0  C076  F073         	movff	_keypress,??_main+2
  1100  0023A4  C077  F074         	movff	_keypress+1,??_main+3
  1101  0023A8  5071               	movf	??_main,w,c
  1102  0023AA  2673               	addwf	??_main+2,f,c
  1103  0023AC  5072               	movf	??_main+1,w,c
  1104  0023AE  2274               	addwfc	??_main+3,f,c
  1105  0023B0  0E84               	movlw	low _Seven_Segment_MAP
  1106  0023B2  2473               	addwf	??_main+2,w,c
  1107  0023B4  6EF6               	movwf	tblptrl,c
  1108  0023B6  0E10               	movlw	high _Seven_Segment_MAP
  1109  0023B8  2074               	addwfc	??_main+3,w,c
  1110  0023BA  6EF7               	movwf	tblptrh,c
  1111  0023BC                     	if	0	;There are less than 3 active tblptr bytes
  1112  0023BC                     	endif
  1113  0023BC  0008               	tblrd		*
  1114  0023BE  CFF5 F075          	movff	tablat,??_main+4
  1115  0023C2  C07E  F00F         	movff	_Temp_Ref,___wmul@multiplier
  1116  0023C6  C07F  F010         	movff	_Temp_Ref+1,___wmul@multiplier+1
  1117  0023CA  0E00               	movlw	0
  1118  0023CC  6E12               	movwf	___wmul@multiplicand+1,c
  1119  0023CE  0E0A               	movlw	10
  1120  0023D0  6E11               	movwf	___wmul@multiplicand,c
  1121  0023D2  EC2D  F01C         	call	___wmul	;wreg free
  1122  0023D6  5075               	movf	??_main+4,w,c
  1123  0023D8  240F               	addwf	?___wmul,w,c
  1124  0023DA  6E7E               	movwf	_Temp_Ref,c
  1125  0023DC  0E00               	movlw	0
  1126  0023DE  2010               	addwfc	?___wmul+1,w,c
  1127  0023E0  6E7F               	movwf	_Temp_Ref+1,c
  1128  0023E2  D7B4               	goto	l3940
  1129  0023E4                     l3956:
  1130                           
  1131                           ;main.c: 127: }
  1132                           ;main.c: 128: }
  1133                           ;main.c: 129: LCD_Clear();
  1134  0023E4  ECB5  F01C         	call	_LCD_Clear	;wreg free
  1135                           
  1136                           ;main.c: 130: LCD_Move(1,1);
  1137  0023E8  0E01               	movlw	1
  1138  0023EA  6E06               	movwf	LCD_Move@column,c
  1139  0023EC  0E01               	movlw	1
  1140  0023EE  EC88  F01C         	call	_LCD_Move
  1141                           
  1142                           ;main.c: 131: putrsXLCD("Temp Ref: ");
  1143  0023F2  0EBE               	movlw	low STR_4
  1144  0023F4  6E03               	movwf	putrsXLCD@buffer,c
  1145  0023F6  0E10               	movlw	high STR_4
  1146  0023F8  6E04               	movwf	putrsXLCD@buffer+1,c
  1147  0023FA  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1148                           
  1149                           ;main.c: 132: itoa (stringKey,Temp_Ref,10);
  1150  0023FE  0E83               	movlw	low _stringKey
  1151  002400  6E11               	movwf	itoa@buf,c
  1152  002402  0E00               	movlw	high _stringKey
  1153  002404  6E12               	movwf	itoa@buf+1,c
  1154  002406  C07E  F013         	movff	_Temp_Ref,itoa@val
  1155  00240A  C07F  F014         	movff	_Temp_Ref+1,itoa@val+1
  1156  00240E  0E00               	movlw	0
  1157  002410  6E16               	movwf	itoa@base+1,c
  1158  002412  0E0A               	movlw	10
  1159  002414  6E15               	movwf	itoa@base,c
  1160  002416  EC3A  F01B         	call	_itoa	;wreg free
  1161                           
  1162                           ;main.c: 133: putsXLCD(stringKey);
  1163  00241A  0E83               	movlw	low _stringKey
  1164  00241C  6E03               	movwf	putsXLCD@buffer,c
  1165  00241E  0E00               	movlw	high _stringKey
  1166  002420  6E04               	movwf	putsXLCD@buffer+1,c
  1167  002422  EC14  F01C         	call	_putsXLCD	;wreg free
  1168                           
  1169                           ;main.c: 134: LCD_Move(2,1);
  1170  002426  0E01               	movlw	1
  1171  002428  6E06               	movwf	LCD_Move@column,c
  1172  00242A  0E02               	movlw	2
  1173  00242C  EC88  F01C         	call	_LCD_Move
  1174                           
  1175                           ;main.c: 135: putrsXLCD("Press # to Cont.");
  1176  002430  0E8E               	movlw	low STR_6
  1177  002432  6E03               	movwf	putrsXLCD@buffer,c
  1178  002434  0E10               	movlw	high STR_6
  1179  002436  6E04               	movwf	putrsXLCD@buffer+1,c
  1180  002438  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1181                           
  1182                           ;main.c: 137: keypress =0;
  1183  00243C  0E00               	movlw	0
  1184  00243E  6E76               	movwf	_keypress,c
  1185  002440  0E00               	movlw	0
  1186  002442  6E77               	movwf	_keypress+1,c
  1187  002444  0E00               	movlw	0
  1188  002446  6E78               	movwf	_keypress+2,c
  1189  002448  0E00               	movlw	0
  1190  00244A  6E79               	movwf	_keypress+3,c
  1191                           
  1192                           ;main.c: 138: while(keypress!='#')
  1193  00244C  D014               	goto	l3972
  1194  00244E  D000               	goto	l3968
  1195  002450                     l3968:
  1196                           
  1197                           ;main.c: 141: keypress = kbd_getc();
  1198  002450  EC9C  F016         	call	_kbd_getc	;wreg free
  1199  002454  C001  F076         	movff	?_kbd_getc,_keypress
  1200  002458  C002  F077         	movff	?_kbd_getc+1,_keypress+1
  1201  00245C  0E00               	movlw	0
  1202  00245E  BE77               	btfsc	_keypress+1,7,c
  1203  002460  0EFF               	movlw	-1
  1204  002462  6E78               	movwf	_keypress+2,c
  1205  002464  6E79               	movwf	_keypress+3,c
  1206                           
  1207                           ;main.c: 142: while(!keypress);
  1208  002466  5076               	movf	_keypress,w,c
  1209  002468  1077               	iorwf	_keypress+1,w,c
  1210  00246A  1078               	iorwf	_keypress+2,w,c
  1211  00246C  1079               	iorwf	_keypress+3,w,c
  1212  00246E  A4D8               	btfss	status,2,c
  1213  002470  D002               	goto	l3972
  1214  002472  D7EE               	goto	l3968
  1215  002474  D000               	goto	l3972
  1216  002476                     l3972:
  1217  002476  0E23               	movlw	35
  1218  002478  1876               	xorwf	_keypress,w,c
  1219  00247A  1077               	iorwf	_keypress+1,w,c
  1220  00247C  1078               	iorwf	_keypress+2,w,c
  1221  00247E  1079               	iorwf	_keypress+3,w,c
  1222  002480  A4D8               	btfss	status,2,c
  1223  002482  D7E6               	goto	l3968
  1224                           
  1225                           ;main.c: 143: }
  1226                           ;main.c: 144: LCD_Clear();
  1227  002484  ECB5  F01C         	call	_LCD_Clear	;wreg free
  1228                           
  1229                           ;main.c: 145: LCD_Move(1,1);
  1230  002488  0E01               	movlw	1
  1231  00248A  6E06               	movwf	LCD_Move@column,c
  1232  00248C  0E01               	movlw	1
  1233  00248E  EC88  F01C         	call	_LCD_Move
  1234                           
  1235                           ;main.c: 146: putrsXLCD("Temp Ref: ");
  1236  002492  0EBE               	movlw	low STR_4
  1237  002494  6E03               	movwf	putrsXLCD@buffer,c
  1238  002496  0E10               	movlw	high STR_4
  1239  002498  6E04               	movwf	putrsXLCD@buffer+1,c
  1240  00249A  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1241                           
  1242                           ;main.c: 147: putsXLCD(stringKey);
  1243  00249E  0E83               	movlw	low _stringKey
  1244  0024A0  6E03               	movwf	putsXLCD@buffer,c
  1245  0024A2  0E00               	movlw	high _stringKey
  1246  0024A4  6E04               	movwf	putsXLCD@buffer+1,c
  1247  0024A6  EC14  F01C         	call	_putsXLCD	;wreg free
  1248                           
  1249                           ;main.c: 148: WriteDataXLCD(223);
  1250  0024AA  0EDF               	movlw	223
  1251  0024AC  EC7F  F01B         	call	_WriteDataXLCD
  1252                           
  1253                           ;main.c: 149: WriteDataXLCD('C');
  1254  0024B0  0E43               	movlw	67
  1255  0024B2  EC7F  F01B         	call	_WriteDataXLCD
  1256  0024B6  D000               	goto	l3984
  1257  0024B8                     l3984:
  1258                           
  1259                           ;main.c: 154: ADCResult =0;
  1260  0024B8  0E00               	movlw	0
  1261  0024BA  0100               	movlb	0	; () banked
  1262  0024BC  6F81               	movwf	(_ADCResult+1)& (0+255),b
  1263  0024BE  0E00               	movlw	0
  1264  0024C0  6F80               	movwf	_ADCResult& (0+255),b
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 155: ConvertADC();
  1268  0024C2  ECF0  F01C         	call	_ConvertADC	;wreg free
  1269                           
  1270                           ;main.c: 156: while(BusyADC());
  1271  0024C6  D000               	goto	l3988
  1272  0024C8                     l3988:
  1273  0024C8  ECE1  F01C         	call	_BusyADC	;wreg free
  1274  0024CC  0900               	iorlw	0
  1275  0024CE  A4D8               	btfss	status,2,c
  1276  0024D0  D7FB               	goto	l3988
  1277                           
  1278                           ;main.c: 157: ADCResult = ReadADC();
  1279  0024D2  ECD9  F01C         	call	_ReadADC	;wreg free
  1280  0024D6  C001  F080         	movff	?_ReadADC,_ADCResult
  1281  0024DA  C002  F081         	movff	?_ReadADC+1,_ADCResult+1
  1282                           
  1283                           ;main.c: 158: ActualTemp = (ADCResult*5.0)/10.24;
  1284  0024DE  0E00               	movlw	0
  1285  0024E0  6E1F               	movwf	___ftmul@f2,c
  1286  0024E2  0EA0               	movlw	160
  1287  0024E4  6E20               	movwf	___ftmul@f2+1,c
  1288  0024E6  0E40               	movlw	64
  1289  0024E8  6E21               	movwf	___ftmul@f2+2,c
  1290  0024EA  C080  F009         	movff	_ADCResult,___lwtoft@c
  1291  0024EE  C081  F00A         	movff	_ADCResult+1,___lwtoft@c+1
  1292  0024F2  EC41  F01C         	call	___lwtoft	;wreg free
  1293  0024F6  C009  F01C         	movff	?___lwtoft,___ftmul@f1
  1294  0024FA  C00A  F01D         	movff	?___lwtoft+1,___ftmul@f1+1
  1295  0024FE  C00B  F01E         	movff	?___lwtoft+2,___ftmul@f1+2
  1296  002502  EC20  F016         	call	___ftmul	;wreg free
  1297  002506  C01C  F032         	movff	?___ftmul,___ftdiv@f1
  1298  00250A  C01D  F033         	movff	?___ftmul+1,___ftdiv@f1+1
  1299  00250E  C01E  F034         	movff	?___ftmul+2,___ftdiv@f1+2
  1300  002512  0ED7               	movlw	215
  1301  002514  6E35               	movwf	___ftdiv@f2,c
  1302  002516  0E23               	movlw	35
  1303  002518  6E36               	movwf	___ftdiv@f2+1,c
  1304  00251A  0E41               	movlw	65
  1305  00251C  6E37               	movwf	___ftdiv@f2+2,c
  1306  00251E  EC84  F017         	call	___ftdiv	;wreg free
  1307  002522  C032  F07A         	movff	?___ftdiv,_ActualTemp
  1308  002526  C033  F07B         	movff	?___ftdiv+1,_ActualTemp+1
  1309  00252A  C034  F07C         	movff	?___ftdiv+2,_ActualTemp+2
  1310                           
  1311                           ;main.c: 159: sprintf(stringKeyActual, "%.3g", ActualTemp );
  1312  00252E  0E8D               	movlw	low _stringKeyActual
  1313  002530  6E4A               	movwf	sprintf@sp,c
  1314  002532  0E00               	movlw	high _stringKeyActual
  1315  002534  6E4B               	movwf	sprintf@sp+1,c
  1316  002536  0EDD               	movlw	low STR_8
  1317  002538  6E4C               	movwf	sprintf@f,c
  1318  00253A  0E10               	movlw	high STR_8
  1319  00253C  6E4D               	movwf	sprintf@f+1,c
  1320  00253E  C07A  F04E         	movff	_ActualTemp,?_sprintf+4
  1321  002542  C07B  F04F         	movff	_ActualTemp+1,?_sprintf+5
  1322  002546  C07C  F050         	movff	_ActualTemp+2,?_sprintf+6
  1323  00254A  EC73  F008         	call	_sprintf	;wreg free
  1324                           
  1325                           ;main.c: 160: LCD_Move(2,1);
  1326  00254E  0E01               	movlw	1
  1327  002550  6E06               	movwf	LCD_Move@column,c
  1328  002552  0E02               	movlw	2
  1329  002554  EC88  F01C         	call	_LCD_Move
  1330                           
  1331                           ;main.c: 161: putrsXLCD("Temp is: ");
  1332  002558  0EC9               	movlw	low STR_9
  1333  00255A  6E03               	movwf	putrsXLCD@buffer,c
  1334  00255C  0E10               	movlw	high STR_9
  1335  00255E  6E04               	movwf	putrsXLCD@buffer+1,c
  1336  002560  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1337                           
  1338                           ;main.c: 162: putsXLCD(stringKeyActual);
  1339  002564  0E8D               	movlw	low _stringKeyActual
  1340  002566  6E03               	movwf	putsXLCD@buffer,c
  1341  002568  0E00               	movlw	high _stringKeyActual
  1342  00256A  6E04               	movwf	putsXLCD@buffer+1,c
  1343  00256C  EC14  F01C         	call	_putsXLCD	;wreg free
  1344                           
  1345                           ;main.c: 163: WriteDataXLCD(223);
  1346  002570  0EDF               	movlw	223
  1347  002572  EC7F  F01B         	call	_WriteDataXLCD
  1348                           
  1349                           ;main.c: 164: WriteDataXLCD('C');
  1350  002576  0E43               	movlw	67
  1351  002578  EC7F  F01B         	call	_WriteDataXLCD
  1352                           
  1353                           ;main.c: 165: putrsXLCD("  ");
  1354  00257C  0EE2               	movlw	low STR_10
  1355  00257E  6E03               	movwf	putrsXLCD@buffer,c
  1356  002580  0E10               	movlw	high STR_10
  1357  002582  6E04               	movwf	putrsXLCD@buffer+1,c
  1358  002584  ECDD  F01B         	call	_putrsXLCD	;wreg free
  1359                           
  1360                           ;main.c: 168: if (Temp_Ref > ActualTemp)
  1361  002588  C07A  F041         	movff	_ActualTemp,___ftge@ff1
  1362  00258C  C07B  F042         	movff	_ActualTemp+1,___ftge@ff1+1
  1363  002590  C07C  F043         	movff	_ActualTemp+2,___ftge@ff1+2
  1364  002594  C07E  F009         	movff	_Temp_Ref,___lwtoft@c
  1365  002598  C07F  F00A         	movff	_Temp_Ref+1,___lwtoft@c+1
  1366  00259C  EC41  F01C         	call	___lwtoft	;wreg free
  1367  0025A0  C009  F044         	movff	?___lwtoft,___ftge@ff2
  1368  0025A4  C00A  F045         	movff	?___lwtoft+1,___ftge@ff2+1
  1369  0025A8  C00B  F046         	movff	?___lwtoft+2,___ftge@ff2+2
  1370  0025AC  EC53  F019         	call	___ftge	;wreg free
  1371  0025B0  B0D8               	btfsc	status,0,c
  1372  0025B2  D003               	goto	l4012
  1373                           
  1374                           ;main.c: 169: {
  1375                           ;main.c: 170: PORTAbits.RA1 = 1,
  1376                           ;main.c: 171: PORTAbits.RA2 = 0;
  1377  0025B4  8280               	bsf	3968,1,c	;volatile
  1378  0025B6  9480               	bcf	3968,2,c	;volatile
  1379  0025B8  D000               	goto	l4012
  1380  0025BA                     l4012:
  1381                           
  1382                           ;main.c: 172: }
  1383                           ;main.c: 173: if (Temp_Ref < ActualTemp)
  1384  0025BA  C07E  F009         	movff	_Temp_Ref,___lwtoft@c
  1385  0025BE  C07F  F00A         	movff	_Temp_Ref+1,___lwtoft@c+1
  1386  0025C2  EC41  F01C         	call	___lwtoft	;wreg free
  1387  0025C6  C009  F041         	movff	?___lwtoft,___ftge@ff1
  1388  0025CA  C00A  F042         	movff	?___lwtoft+1,___ftge@ff1+1
  1389  0025CE  C00B  F043         	movff	?___lwtoft+2,___ftge@ff1+2
  1390  0025D2  C07A  F044         	movff	_ActualTemp,___ftge@ff2
  1391  0025D6  C07B  F045         	movff	_ActualTemp+1,___ftge@ff2+1
  1392  0025DA  C07C  F046         	movff	_ActualTemp+2,___ftge@ff2+2
  1393  0025DE  EC53  F019         	call	___ftge	;wreg free
  1394  0025E2  B0D8               	btfsc	status,0,c
  1395  0025E4  D003               	goto	l4016
  1396                           
  1397                           ;main.c: 174: {
  1398                           ;main.c: 175: PORTAbits.RA1 = 0,
  1399                           ;main.c: 176: PORTAbits.RA2 = 1;
  1400  0025E6  9280               	bcf	3968,1,c	;volatile
  1401  0025E8  8480               	bsf	3968,2,c	;volatile
  1402  0025EA  D000               	goto	l4016
  1403  0025EC                     l4016:
  1404                           
  1405                           ;main.c: 177: }
  1406                           ;main.c: 178: if (Temp_Ref == ActualTemp)
  1407  0025EC  C07E  F009         	movff	_Temp_Ref,___lwtoft@c
  1408  0025F0  C07F  F00A         	movff	_Temp_Ref+1,___lwtoft@c+1
  1409  0025F4  EC41  F01C         	call	___lwtoft	;wreg free
  1410  0025F8  507A               	movf	_ActualTemp,w,c
  1411  0025FA  1809               	xorwf	?___lwtoft,w,c
  1412  0025FC  E10A               	bnz	l4020
  1413  0025FE  507B               	movf	_ActualTemp+1,w,c
  1414  002600  180A               	xorwf	?___lwtoft+1,w,c
  1415  002602  E107               	bnz	l4020
  1416  002604  507C               	movf	_ActualTemp+2,w,c
  1417  002606  180B               	xorwf	?___lwtoft+2,w,c
  1418  002608  A4D8               	btfss	status,2,c
  1419  00260A  D003               	goto	l4020
  1420                           
  1421                           ;main.c: 179: {
  1422                           ;main.c: 180: PORTAbits.RA1 = 0,
  1423                           ;main.c: 181: PORTAbits.RA2 = 0;
  1424  00260C  9280               	bcf	3968,1,c	;volatile
  1425  00260E  9480               	bcf	3968,2,c	;volatile
  1426  002610  D000               	goto	l4020
  1427  002612                     l4020:
  1428                           
  1429                           ;main.c: 182: }
  1430                           ;main.c: 183: Delay_Seconds(10);
  1431  002612  0E0A               	movlw	10
  1432  002614  ECF9  F01B         	call	_Delay_Seconds
  1433  002618  D74F               	goto	l3984
  1434  00261A  EF00  F000         	goto	start
  1435  00261E                     __end_of_main:
  1436                           	opt stack 0
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           status	equ	0xFD8
  1444                           
  1445 ;; *************** function _sprintf *****************
  1446 ;; Defined at:
  1447 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  sp              2   73[COMRAM] PTR unsigned char 
  1450 ;;		 -> stringKeyActual(10), 
  1451 ;;  f               2   75[COMRAM] PTR const unsigned char 
  1452 ;;		 -> STR_8(5), 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  temp            3   91[COMRAM] PTR const unsigned char 
  1455 ;;  val             4  100[COMRAM] unsigned long 
  1456 ;;  tmpval          4   96[COMRAM] struct .
  1457 ;;  fval            3  108[COMRAM] struct .
  1458 ;;  cp              3    0        PTR const unsigned char 
  1459 ;;  prec            2  106[COMRAM] int 
  1460 ;;  exp             2  104[COMRAM] int 
  1461 ;;  flag            2   94[COMRAM] unsigned short 
  1462 ;;  ap              2   89[COMRAM] PTR void [1]
  1463 ;;		 -> ?_sprintf(2), 
  1464 ;;  len             2    0        unsigned int 
  1465 ;;  width           2    0        int 
  1466 ;;  c               1  111[COMRAM] char 
  1467 ;;  d               1    0        unsigned char 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  2   73[COMRAM] int 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1477 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1478 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;Total ram usage:       39 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    3
  1484 ;; This function calls:
  1485 ;;		___awdiv
  1486 ;;		___awmod
  1487 ;;		___ftadd
  1488 ;;		___ftdiv
  1489 ;;		___ftge
  1490 ;;		___ftmul
  1491 ;;		___ftneg
  1492 ;;		___ftsub
  1493 ;;		___fttol
  1494 ;;		___lldiv
  1495 ;;		___llmod
  1496 ;;		___lltoft
  1497 ;;		___wmul
  1498 ;;		__div_to_l_
  1499 ;;		__tdiv_to_l_
  1500 ;;		_fround
  1501 ;;		_isdigit
  1502 ;;		_scale
  1503 ;; This function is called by:
  1504 ;;		_main
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text1
  1509  0010E6                     __ptext1:
  1510                           	opt stack 0
  1511  0010E6                     _sprintf:
  1512                           	opt stack 27
  1513                           
  1514                           ;doprnt.c: 494: va_list ap;
  1515                           ;doprnt.c: 499: signed char c;
  1516                           ;doprnt.c: 501: int width;
  1517                           ;doprnt.c: 504: int prec;
  1518                           ;doprnt.c: 508: unsigned short flag;
  1519                           ;doprnt.c: 515: char d;
  1520                           ;doprnt.c: 516: double fval;
  1521                           ;doprnt.c: 517: int exp;
  1522                           ;doprnt.c: 523: union {
  1523                           ;doprnt.c: 524: unsigned long vd;
  1524                           ;doprnt.c: 525: double integ;
  1525                           ;doprnt.c: 526: } tmpval;
  1526                           ;doprnt.c: 528: unsigned long val;
  1527                           ;doprnt.c: 529: unsigned len;
  1528                           ;doprnt.c: 530: const char * cp;
  1529                           ;doprnt.c: 533: *ap = __va_start();
  1530                           
  1531                           ;incstack = 0
  1532  0010E6  0E4E               	movlw	low (?_sprintf+4)
  1533  0010E8  6E5A               	movwf	sprintf@ap,c
  1534  0010EA  0E00               	movlw	high (?_sprintf+4)
  1535  0010EC  6E5B               	movwf	sprintf@ap+1,c
  1536                           
  1537                           ;doprnt.c: 536: while(c = *f++) {
  1538  0010EE  EF53  F00F         	goto	l3890
  1539  0010F2                     l3552:
  1540                           
  1541                           ;doprnt.c: 538: if(c != '%')
  1542  0010F2  0E25               	movlw	37
  1543  0010F4  1870               	xorwf	sprintf@c,w,c
  1544  0010F6  B4D8               	btfsc	status,2,c
  1545  0010F8  D007               	goto	l3558
  1546                           
  1547                           ;doprnt.c: 540: {
  1548                           ;doprnt.c: 541: ((*sp++ = (c)));
  1549  0010FA  C04A  FFD9         	movff	sprintf@sp,fsr2l
  1550  0010FE  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  1551  001102  C070  FFDF         	movff	sprintf@c,indf2
  1552  001106  D36B               	goto	l3728
  1553  001108                     l3558:
  1554                           
  1555                           ;doprnt.c: 543: }
  1556                           ;doprnt.c: 548: flag = 0;
  1557  001108  0E00               	movlw	0
  1558  00110A  6E60               	movwf	sprintf@flag+1,c
  1559  00110C  0E00               	movlw	0
  1560  00110E  6E5F               	movwf	sprintf@flag,c
  1561                           
  1562                           ;doprnt.c: 611: if(*f == '.') {
  1563  001110  C04C  FFF6         	movff	sprintf@f,tblptrl
  1564  001114  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1565  001118                     	if	0	;tblptru may be non-zero
  1566  001118                     	endif
  1567  001118                     	if	0	;tblptru may be non-zero
  1568  001118                     	endif
  1569  001118  0008               	tblrd		*
  1570  00111A  50F5               	movf	tablat,w,c
  1571  00111C  0A2E               	xorlw	46
  1572  00111E  A4D8               	btfss	status,2,c
  1573  001120  D030               	goto	l3572
  1574                           
  1575                           ;doprnt.c: 612: flag |= 0x4000;
  1576  001122  8C60               	bsf	sprintf@flag+1,6,c
  1577                           
  1578                           ;doprnt.c: 613: f++;
  1579  001124  4A4C               	infsnz	sprintf@f,f,c
  1580  001126  2A4D               	incf	sprintf@f+1,f,c
  1581                           
  1582                           ;doprnt.c: 620: {
  1583                           ;doprnt.c: 621: prec = 0;
  1584  001128  0E00               	movlw	0
  1585  00112A  6E6C               	movwf	sprintf@prec+1,c
  1586  00112C  0E00               	movlw	0
  1587  00112E  6E6B               	movwf	sprintf@prec,c
  1588                           
  1589                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1590  001130  D01C               	goto	l3570
  1591  001132                     l3566:
  1592                           
  1593                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1594  001132  C06B  F00F         	movff	sprintf@prec,___wmul@multiplier
  1595  001136  C06C  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1596  00113A  0E00               	movlw	0
  1597  00113C  6E12               	movwf	___wmul@multiplicand+1,c
  1598  00113E  0E0A               	movlw	10
  1599  001140  6E11               	movwf	___wmul@multiplicand,c
  1600  001142  EC2D  F01C         	call	___wmul	;wreg free
  1601  001146  C04C  FFF6         	movff	sprintf@f,tblptrl
  1602  00114A  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1603  00114E                     	if	0	;tblptru may be non-zero
  1604  00114E                     	endif
  1605  00114E                     	if	0	;tblptru may be non-zero
  1606  00114E                     	endif
  1607  00114E  0008               	tblrd		*
  1608  001150  50F5               	movf	tablat,w,c
  1609  001152  260F               	addwf	?___wmul,f,c
  1610  001154  0E00               	movlw	0
  1611  001156  2210               	addwfc	?___wmul+1,f,c
  1612  001158  0ED0               	movlw	208
  1613  00115A  240F               	addwf	?___wmul,w,c
  1614  00115C  6E6B               	movwf	sprintf@prec,c
  1615  00115E  0EFF               	movlw	255
  1616  001160  2010               	addwfc	?___wmul+1,w,c
  1617  001162  6E6C               	movwf	sprintf@prec+1,c
  1618  001164  4A4C               	infsnz	sprintf@f,f,c
  1619  001166  2A4D               	incf	sprintf@f+1,f,c
  1620  001168  D000               	goto	l3570
  1621  00116A                     l3570:
  1622  00116A  C04C  FFF6         	movff	sprintf@f,tblptrl
  1623  00116E  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1624  001172                     	if	0	;tblptru may be non-zero
  1625  001172                     	endif
  1626  001172                     	if	0	;tblptru may be non-zero
  1627  001172                     	endif
  1628  001172  0008               	tblrd		*
  1629  001174  50F5               	movf	tablat,w,c
  1630  001176  EC77  F01C         	call	_isdigit
  1631  00117A  A0D8               	btfss	status,0,c
  1632  00117C  D00F               	goto	l3580
  1633  00117E  D7D9               	goto	l3566
  1634                           
  1635                           ;doprnt.c: 624: }
  1636                           ;doprnt.c: 625: } else {
  1637  001180  D00D               	goto	l3580
  1638  001182                     l3572:
  1639                           
  1640                           ;doprnt.c: 626: prec = 0;
  1641  001182  0E00               	movlw	0
  1642  001184  6E6C               	movwf	sprintf@prec+1,c
  1643  001186  0E00               	movlw	0
  1644  001188  6E6B               	movwf	sprintf@prec,c
  1645                           
  1646                           ;doprnt.c: 628: flag |= 0x1000;
  1647  00118A  8860               	bsf	sprintf@flag+1,4,c
  1648                           
  1649                           ;doprnt.c: 630: }
  1650                           ;doprnt.c: 635: switch(c = *f++) {
  1651  00118C  D007               	goto	l3580
  1652                           
  1653                           ;doprnt.c: 638: goto alldone;
  1654                           
  1655                           ;doprnt.c: 637: case 0:
  1656  00118E  EF62  F00F         	goto	l3892
  1657  001192                     l3576:
  1658                           
  1659                           ;doprnt.c: 683: flag |= 0x200;
  1660  001192  8260               	bsf	sprintf@flag+1,1,c
  1661                           
  1662                           ;doprnt.c: 684: break;
  1663  001194  D016               	goto	l3582
  1664                           
  1665                           ;doprnt.c: 813: continue;
  1666                           
  1667                           ;doprnt.c: 802: default:
  1668  001196  EF53  F00F         	goto	l3890
  1669                           
  1670                           ;doprnt.c: 822: }
  1671  00119A  D013               	goto	l3582
  1672  00119C                     l3580:
  1673  00119C  C04C  FFF6         	movff	sprintf@f,tblptrl
  1674  0011A0  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1675  0011A4  4A4C               	infsnz	sprintf@f,f,c
  1676  0011A6  2A4D               	incf	sprintf@f+1,f,c
  1677  0011A8                     	if	0	;tblptru may be non-zero
  1678  0011A8                     	endif
  1679  0011A8                     	if	0	;tblptru may be non-zero
  1680  0011A8                     	endif
  1681  0011A8  0008               	tblrd		*
  1682  0011AA  CFF5 F070          	movff	tablat,sprintf@c
  1683  0011AE  5070               	movf	sprintf@c,w,c
  1684                           
  1685                           ; Switch size 1, requested type "space"
  1686                           ; Number of cases is 2, Range of values is 0 to 103
  1687                           ; switch strategies available:
  1688                           ; Name         Instructions Cycles
  1689                           ; simple_byte            7     4 (average)
  1690                           ;	Chosen strategy is simple_byte
  1691  0011B0  0A00               	xorlw	0	; case 0
  1692  0011B2  B4D8               	btfsc	status,2,c
  1693  0011B4  EF62  F00F         	goto	l3892
  1694  0011B8  0A67               	xorlw	103	; case 103
  1695  0011BA  B4D8               	btfsc	status,2,c
  1696  0011BC  D7EA               	goto	l3576
  1697  0011BE  EF53  F00F         	goto	l3890
  1698  0011C2                     l3582:
  1699                           
  1700                           ;doprnt.c: 825: if(flag & (0x700)) {
  1701  0011C2  0E07               	movlw	7
  1702  0011C4  1460               	andwf	sprintf@flag+1,w,c
  1703  0011C6  B4D8               	btfsc	status,2,c
  1704  0011C8  EF15  F00F         	goto	l3870
  1705                           
  1706                           ;doprnt.c: 827: if(flag & 0x1000)
  1707  0011CC  A860               	btfss	sprintf@flag+1,4,c
  1708  0011CE  D005               	goto	l3588
  1709                           
  1710                           ;doprnt.c: 829: prec = 6;
  1711  0011D0  0E00               	movlw	0
  1712  0011D2  6E6C               	movwf	sprintf@prec+1,c
  1713  0011D4  0E06               	movlw	6
  1714  0011D6  6E6B               	movwf	sprintf@prec,c
  1715  0011D8  D000               	goto	l3588
  1716  0011DA                     l3588:
  1717                           
  1718                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1719  0011DA  C05A  FFD9         	movff	sprintf@ap,fsr2l
  1720  0011DE  C05B  FFDA         	movff	sprintf@ap+1,fsr2h
  1721  0011E2  CFDE F06D          	movff	postinc2,sprintf@fval
  1722  0011E6  CFDE F06E          	movff	postinc2,sprintf@fval+1
  1723  0011EA  CFDD F06F          	movff	postdec2,sprintf@fval+2
  1724  0011EE  0E03               	movlw	3
  1725  0011F0  265A               	addwf	sprintf@ap,f,c
  1726  0011F2  0E00               	movlw	0
  1727  0011F4  225B               	addwfc	sprintf@ap+1,f,c
  1728                           
  1729                           ;doprnt.c: 831: if(fval < 0.0) {
  1730  0011F6  AE6F               	btfss	sprintf@fval+2,7,c
  1731  0011F8  D011               	goto	l3598
  1732                           
  1733                           ;doprnt.c: 832: fval = -fval;
  1734  0011FA  C06D  F019         	movff	sprintf@fval,___ftneg@f1
  1735  0011FE  C06E  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  1736  001202  C06F  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  1737  001206  EC54  F01C         	call	___ftneg	;wreg free
  1738  00120A  C019  F06D         	movff	?___ftneg,sprintf@fval
  1739  00120E  C01A  F06E         	movff	?___ftneg+1,sprintf@fval+1
  1740  001212  C01B  F06F         	movff	?___ftneg+2,sprintf@fval+2
  1741                           
  1742                           ;doprnt.c: 833: flag |= 0x03;
  1743  001216  0E03               	movlw	3
  1744  001218  125F               	iorwf	sprintf@flag,f,c
  1745  00121A  D000               	goto	l3598
  1746  00121C                     l3598:
  1747                           
  1748                           ;doprnt.c: 834: }
  1749                           ;doprnt.c: 835: exp = 0;
  1750  00121C  0E00               	movlw	0
  1751  00121E  6E6A               	movwf	sprintf@exp+1,c
  1752  001220  0E00               	movlw	0
  1753  001222  6E69               	movwf	sprintf@exp,c
  1754                           
  1755                           ;doprnt.c: 836: if( fval!=0) {
  1756  001224  506D               	movf	sprintf@fval,w,c
  1757  001226  106E               	iorwf	sprintf@fval+1,w,c
  1758  001228  106F               	iorwf	sprintf@fval+2,w,c
  1759  00122A  B4D8               	btfsc	status,2,c
  1760  00122C  D085               	goto	l3626
  1761                           
  1762                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1763  00122E  0E82               	movlw	130
  1764  001230  6E51               	movwf	??_sprintf& (0+255),c
  1765  001232  0EFF               	movlw	255
  1766  001234  6E52               	movwf	(??_sprintf+1)& (0+255),c
  1767  001236  C06D  F053         	movff	sprintf@fval,??_sprintf+2
  1768  00123A  C06E  F054         	movff	sprintf@fval+1,??_sprintf+3
  1769  00123E  C06F  F055         	movff	sprintf@fval+2,??_sprintf+4
  1770  001242  C070  F056         	movff	sprintf@fval+3,??_sprintf+5
  1771  001246  0E10               	movlw	16
  1772  001248  D005               	goto	u3440
  1773  00124A                     u3445:
  1774  00124A  90D8               	bcf	status,0,c
  1775  00124C  3256               	rrcf	??_sprintf+5,f,c
  1776  00124E  3255               	rrcf	??_sprintf+4,f,c
  1777  001250  3254               	rrcf	??_sprintf+3,f,c
  1778  001252  3253               	rrcf	??_sprintf+2,f,c
  1779  001254                     u3440:
  1780  001254  2EE8               	decfsz	wreg,f,c
  1781  001256  D7F9               	goto	u3445
  1782  001258  5053               	movf	??_sprintf+2,w,c
  1783  00125A  2451               	addwf	??_sprintf,w,c
  1784  00125C  6E69               	movwf	sprintf@exp,c
  1785  00125E  0E00               	movlw	0
  1786  001260  2052               	addwfc	??_sprintf+1,w,c
  1787  001262  6E6A               	movwf	sprintf@exp+1,c
  1788                           
  1789                           ;doprnt.c: 838: exp--;
  1790  001264  0669               	decf	sprintf@exp,f,c
  1791  001266  A0D8               	btfss	status,0,c
  1792  001268  066A               	decf	sprintf@exp+1,f,c
  1793                           
  1794                           ;doprnt.c: 839: exp *= 3;
  1795  00126A  C069  F00F         	movff	sprintf@exp,___wmul@multiplier
  1796  00126E  C06A  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1797  001272  0E00               	movlw	0
  1798  001274  6E12               	movwf	___wmul@multiplicand+1,c
  1799  001276  0E03               	movlw	3
  1800  001278  6E11               	movwf	___wmul@multiplicand,c
  1801  00127A  EC2D  F01C         	call	___wmul	;wreg free
  1802  00127E  C00F  F069         	movff	?___wmul,sprintf@exp
  1803  001282  C010  F06A         	movff	?___wmul+1,sprintf@exp+1
  1804                           
  1805                           ;doprnt.c: 840: exp /= 10;
  1806  001286  C069  F007         	movff	sprintf@exp,___awdiv@dividend
  1807  00128A  C06A  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1808  00128E  0E00               	movlw	0
  1809  001290  6E0A               	movwf	___awdiv@divisor+1,c
  1810  001292  0E0A               	movlw	10
  1811  001294  6E09               	movwf	___awdiv@divisor,c
  1812  001296  EC08  F019         	call	___awdiv	;wreg free
  1813  00129A  C007  F069         	movff	?___awdiv,sprintf@exp
  1814  00129E  C008  F06A         	movff	?___awdiv+1,sprintf@exp+1
  1815                           
  1816                           ;doprnt.c: 841: if(exp < 0)
  1817  0012A2  AE6A               	btfss	sprintf@exp+1,7,c
  1818  0012A4  D004               	goto	l3614
  1819                           
  1820                           ;doprnt.c: 842: exp--;
  1821  0012A6  0669               	decf	sprintf@exp,f,c
  1822  0012A8  A0D8               	btfss	status,0,c
  1823  0012AA  066A               	decf	sprintf@exp+1,f,c
  1824  0012AC  D000               	goto	l3614
  1825  0012AE                     l3614:
  1826                           
  1827                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1828  0012AE  5069               	movf	sprintf@exp,w,c
  1829  0012B0  0800               	sublw	0
  1830  0012B2  EC6A  F00F         	call	_scale
  1831  0012B6  C02B  F061         	movff	?_scale,sprintf@tmpval
  1832  0012BA  C02C  F062         	movff	?_scale+1,sprintf@tmpval+1
  1833  0012BE  C02D  F063         	movff	?_scale+2,sprintf@tmpval+2
  1834                           
  1835                           ;doprnt.c: 847: tmpval.integ *= fval;
  1836  0012C2  C061  F01C         	movff	sprintf@tmpval,___ftmul@f1
  1837  0012C6  C062  F01D         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1838  0012CA  C063  F01E         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1839  0012CE  C06D  F01F         	movff	sprintf@fval,___ftmul@f2
  1840  0012D2  C06E  F020         	movff	sprintf@fval+1,___ftmul@f2+1
  1841  0012D6  C06F  F021         	movff	sprintf@fval+2,___ftmul@f2+2
  1842  0012DA  EC20  F016         	call	___ftmul	;wreg free
  1843  0012DE  C01C  F061         	movff	?___ftmul,sprintf@tmpval
  1844  0012E2  C01D  F062         	movff	?___ftmul+1,sprintf@tmpval+1
  1845  0012E6  C01E  F063         	movff	?___ftmul+2,sprintf@tmpval+2
  1846                           
  1847                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1848  0012EA  C061  F041         	movff	sprintf@tmpval,___ftge@ff1
  1849  0012EE  C062  F042         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1850  0012F2  C063  F043         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1851  0012F6  0E00               	movlw	0
  1852  0012F8  6E44               	movwf	___ftge@ff2,c
  1853  0012FA  0E80               	movlw	128
  1854  0012FC  6E45               	movwf	___ftge@ff2+1,c
  1855  0012FE  0E3F               	movlw	63
  1856  001300  6E46               	movwf	___ftge@ff2+2,c
  1857  001302  EC53  F019         	call	___ftge	;wreg free
  1858  001306  B0D8               	btfsc	status,0,c
  1859  001308  D004               	goto	l3622
  1860                           
  1861                           ;doprnt.c: 849: exp--;
  1862  00130A  0669               	decf	sprintf@exp,f,c
  1863  00130C  A0D8               	btfss	status,0,c
  1864  00130E  066A               	decf	sprintf@exp+1,f,c
  1865  001310  D013               	goto	l3626
  1866  001312                     l3622:
  1867                           
  1868                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1869  001312  C061  F041         	movff	sprintf@tmpval,___ftge@ff1
  1870  001316  C062  F042         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1871  00131A  C063  F043         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1872  00131E  0E00               	movlw	0
  1873  001320  6E44               	movwf	___ftge@ff2,c
  1874  001322  0E20               	movlw	32
  1875  001324  6E45               	movwf	___ftge@ff2+1,c
  1876  001326  0E41               	movlw	65
  1877  001328  6E46               	movwf	___ftge@ff2+2,c
  1878  00132A  EC53  F019         	call	___ftge	;wreg free
  1879  00132E  A0D8               	btfss	status,0,c
  1880  001330  D003               	goto	l3626
  1881                           
  1882                           ;doprnt.c: 851: exp++;
  1883  001332  4A69               	infsnz	sprintf@exp,f,c
  1884  001334  2A6A               	incf	sprintf@exp+1,f,c
  1885  001336  D000               	goto	l3626
  1886  001338                     l3626:
  1887                           
  1888                           ;doprnt.c: 852: }
  1889                           ;doprnt.c: 854: if(exp <= 0)
  1890  001338  BE6A               	btfsc	sprintf@exp+1,7,c
  1891  00133A  D005               	goto	l3628
  1892  00133C  506A               	movf	sprintf@exp+1,w,c
  1893  00133E  E106               	bnz	l205
  1894  001340  0469               	decf	sprintf@exp,w,c
  1895  001342  B0D8               	btfsc	status,0,c
  1896  001344  D003               	goto	l205
  1897  001346                     l3628:
  1898                           
  1899                           ;doprnt.c: 855: c = 1;
  1900  001346  0E01               	movlw	1
  1901  001348  6E70               	movwf	sprintf@c,c
  1902  00134A  D002               	goto	l206
  1903  00134C                     l205:
  1904                           
  1905                           ;doprnt.c: 856: else
  1906                           ;doprnt.c: 857: c = exp;
  1907  00134C  C069  F070         	movff	sprintf@exp,sprintf@c
  1908  001350                     l206:
  1909                           
  1910                           ;doprnt.c: 858: if(
  1911                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1912                           ;doprnt.c: 868: ) {
  1913  001350  A260               	btfss	sprintf@flag+1,1,c
  1914  001352  D248               	goto	l207
  1915  001354  AE6A               	btfss	sprintf@exp+1,7,c
  1916  001356  D006               	goto	l3632
  1917  001358  0EFC               	movlw	252
  1918  00135A  5C69               	subwf	sprintf@exp,w,c
  1919  00135C  0EFF               	movlw	255
  1920  00135E  586A               	subwfb	sprintf@exp+1,w,c
  1921  001360  A0D8               	btfss	status,0,c
  1922  001362  D00A               	goto	l3634
  1923  001364                     l3632:
  1924  001364  506B               	movf	sprintf@prec,w,c
  1925  001366  5C69               	subwf	sprintf@exp,w,c
  1926  001368  506A               	movf	sprintf@exp+1,w,c
  1927  00136A  0A80               	xorlw	128
  1928  00136C  6E51               	movwf	??_sprintf& (0+255),c
  1929  00136E  506C               	movf	sprintf@prec+1,w,c
  1930  001370  0A80               	xorlw	128
  1931  001372  5851               	subwfb	??_sprintf& (0+255),w,c
  1932  001374  A0D8               	btfss	status,0,c
  1933  001376  D236               	goto	l207
  1934  001378                     l3634:
  1935                           
  1936                           ;doprnt.c: 870: if(prec && flag & 0x200)
  1937  001378  506B               	movf	sprintf@prec,w,c
  1938  00137A  106C               	iorwf	sprintf@prec+1,w,c
  1939  00137C  A4D8               	btfss	status,2,c
  1940  00137E  A260               	btfss	sprintf@flag+1,1,c
  1941  001380  D004               	goto	l3640
  1942                           
  1943                           ;doprnt.c: 871: prec--;
  1944  001382  066B               	decf	sprintf@prec,f,c
  1945  001384  A0D8               	btfss	status,0,c
  1946  001386  066C               	decf	sprintf@prec+1,f,c
  1947  001388  D000               	goto	l3640
  1948  00138A                     l3640:
  1949                           
  1950                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1951  00138A  506C               	movf	sprintf@prec+1,w,c
  1952  00138C  E104               	bnz	u3540
  1953  00138E  0E09               	movlw	9
  1954  001390  5C6B               	subwf	sprintf@prec,w,c
  1955  001392  A0D8               	btfss	status,0,c
  1956  001394  D003               	goto	l211
  1957  001396                     u3540:
  1958                           
  1959                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1960  001396  0E08               	movlw	8
  1961  001398  6E70               	movwf	sprintf@c,c
  1962  00139A  D003               	goto	l3644
  1963  00139C                     l211:
  1964                           
  1965                           ;doprnt.c: 875: else
  1966                           ;doprnt.c: 876: c = prec;
  1967  00139C  C06B  F070         	movff	sprintf@prec,sprintf@c
  1968  0013A0  D000               	goto	l3644
  1969  0013A2                     l3644:
  1970                           
  1971                           ;doprnt.c: 877: if( fval!=0) {
  1972  0013A2  506D               	movf	sprintf@fval,w,c
  1973  0013A4  106E               	iorwf	sprintf@fval+1,w,c
  1974  0013A6  106F               	iorwf	sprintf@fval+2,w,c
  1975  0013A8  B4D8               	btfsc	status,2,c
  1976  0013AA  D0DE               	goto	l3664
  1977                           
  1978                           ;doprnt.c: 878: fval /= scale(exp-c);
  1979  0013AC  C06D  F032         	movff	sprintf@fval,___ftdiv@f1
  1980  0013B0  C06E  F033         	movff	sprintf@fval+1,___ftdiv@f1+1
  1981  0013B4  C06F  F034         	movff	sprintf@fval+2,___ftdiv@f1+2
  1982  0013B8  5070               	movf	sprintf@c,w,c
  1983  0013BA  0800               	sublw	0
  1984  0013BC  2469               	addwf	sprintf@exp,w,c
  1985  0013BE  EC6A  F00F         	call	_scale
  1986  0013C2  C02B  F035         	movff	?_scale,___ftdiv@f2
  1987  0013C6  C02C  F036         	movff	?_scale+1,___ftdiv@f2+1
  1988  0013CA  C02D  F037         	movff	?_scale+2,___ftdiv@f2+2
  1989  0013CE  EC84  F017         	call	___ftdiv	;wreg free
  1990  0013D2  C032  F06D         	movff	?___ftdiv,sprintf@fval
  1991  0013D6  C033  F06E         	movff	?___ftdiv+1,sprintf@fval+1
  1992  0013DA  C034  F06F         	movff	?___ftdiv+2,sprintf@fval+2
  1993                           
  1994                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  1995  0013DE  C06D  F038         	movff	sprintf@fval,___ftadd@f2
  1996  0013E2  C06E  F039         	movff	sprintf@fval+1,___ftadd@f2+1
  1997  0013E6  C06F  F03A         	movff	sprintf@fval+2,___ftadd@f2+2
  1998  0013EA  C06D  F001         	movff	sprintf@fval,___fttol@f1
  1999  0013EE  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2000  0013F2  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2001  0013F6  EC11  F017         	call	___fttol	;wreg free
  2002  0013FA  C001  F010         	movff	?___fttol,___lltoft@c
  2003  0013FE  C002  F011         	movff	?___fttol+1,___lltoft@c+1
  2004  001402  C003  F012         	movff	?___fttol+2,___lltoft@c+2
  2005  001406  C004  F013         	movff	?___fttol+3,___lltoft@c+3
  2006  00140A  EC5D  F01A         	call	___lltoft	;wreg free
  2007  00140E  C010  F019         	movff	?___lltoft,___ftneg@f1
  2008  001412  C011  F01A         	movff	?___lltoft+1,___ftneg@f1+1
  2009  001416  C012  F01B         	movff	?___lltoft+2,___ftneg@f1+2
  2010  00141A  EC54  F01C         	call	___ftneg	;wreg free
  2011  00141E  C019  F035         	movff	?___ftneg,___ftadd@f1
  2012  001422  C01A  F036         	movff	?___ftneg+1,___ftadd@f1+1
  2013  001426  C01B  F037         	movff	?___ftneg+2,___ftadd@f1+2
  2014  00142A  EC31  F014         	call	___ftadd	;wreg free
  2015  00142E  C035  F041         	movff	?___ftadd,___ftge@ff1
  2016  001432  C036  F042         	movff	?___ftadd+1,___ftge@ff1+1
  2017  001436  C037  F043         	movff	?___ftadd+2,___ftge@ff1+2
  2018  00143A  0E00               	movlw	0
  2019  00143C  6E44               	movwf	___ftge@ff2,c
  2020  00143E  0E00               	movlw	0
  2021  001440  6E45               	movwf	___ftge@ff2+1,c
  2022  001442  0E3F               	movlw	63
  2023  001444  6E46               	movwf	___ftge@ff2+2,c
  2024  001446  EC53  F019         	call	___ftge	;wreg free
  2025  00144A  A0D8               	btfss	status,0,c
  2026  00144C  D015               	goto	l3652
  2027                           
  2028                           ;doprnt.c: 894: fval += 0.5;
  2029  00144E  C06D  F035         	movff	sprintf@fval,___ftadd@f1
  2030  001452  C06E  F036         	movff	sprintf@fval+1,___ftadd@f1+1
  2031  001456  C06F  F037         	movff	sprintf@fval+2,___ftadd@f1+2
  2032  00145A  0E00               	movlw	0
  2033  00145C  6E38               	movwf	___ftadd@f2,c
  2034  00145E  0E00               	movlw	0
  2035  001460  6E39               	movwf	___ftadd@f2+1,c
  2036  001462  0E3F               	movlw	63
  2037  001464  6E3A               	movwf	___ftadd@f2+2,c
  2038  001466  EC31  F014         	call	___ftadd	;wreg free
  2039  00146A  C035  F06D         	movff	?___ftadd,sprintf@fval
  2040  00146E  C036  F06E         	movff	?___ftadd+1,sprintf@fval+1
  2041  001472  C037  F06F         	movff	?___ftadd+2,sprintf@fval+2
  2042  001476  D000               	goto	l3652
  2043  001478                     l3652:
  2044                           
  2045                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  2046  001478  C070  F051         	movff	sprintf@c,??_sprintf
  2047  00147C  6A52               	clrf	(??_sprintf+1)& (0+255),c
  2048  00147E  BE51               	btfsc	??_sprintf& (0+255),7,c
  2049  001480  0652               	decf	(??_sprintf+1)& (0+255),f,c
  2050  001482  90D8               	bcf	status,0,c
  2051  001484  3651               	rlcf	??_sprintf,f,c
  2052  001486  3652               	rlcf	??_sprintf+1,f,c
  2053  001488  90D8               	bcf	status,0,c
  2054  00148A  3651               	rlcf	??_sprintf,f,c
  2055  00148C  3652               	rlcf	??_sprintf+1,f,c
  2056  00148E  0E04               	movlw	4
  2057  001490  2651               	addwf	??_sprintf,f,c
  2058  001492  0E00               	movlw	0
  2059  001494  2252               	addwfc	??_sprintf+1,f,c
  2060  001496  0E01               	movlw	low _dpowers
  2061  001498  2451               	addwf	??_sprintf,w,c
  2062  00149A  6EF6               	movwf	tblptrl,c
  2063  00149C  0E10               	movlw	high _dpowers
  2064  00149E  2052               	addwfc	??_sprintf+1,w,c
  2065  0014A0  6EF7               	movwf	tblptrh,c
  2066  0014A2                     	if	0	;There are less than 3 active tblptr bytes
  2067  0014A2                     	endif
  2068  0014A2  C06D  F001         	movff	sprintf@fval,___fttol@f1
  2069  0014A6  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2070  0014AA  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2071  0014AE  EC11  F017         	call	___fttol	;wreg free
  2072  0014B2  0009               	tblrd		*+
  2073  0014B4  50F5               	movf	tablat,w,c
  2074  0014B6  5C01               	subwf	?___fttol,w,c
  2075  0014B8  0009               	tblrd		*+
  2076  0014BA  50F5               	movf	tablat,w,c
  2077  0014BC  5802               	subwfb	?___fttol+1,w,c
  2078  0014BE  0009               	tblrd		*+
  2079  0014C0  50F5               	movf	tablat,w,c
  2080  0014C2  5803               	subwfb	?___fttol+2,w,c
  2081  0014C4  0009               	tblrd		*+
  2082  0014C6  50F5               	movf	tablat,w,c
  2083  0014C8  5804               	subwfb	?___fttol+3,w,c
  2084  0014CA  A0D8               	btfss	status,0,c
  2085  0014CC  D017               	goto	l3658
  2086                           
  2087                           ;doprnt.c: 896: fval *= 1e-1;
  2088  0014CE  C06D  F01C         	movff	sprintf@fval,___ftmul@f1
  2089  0014D2  C06E  F01D         	movff	sprintf@fval+1,___ftmul@f1+1
  2090  0014D6  C06F  F01E         	movff	sprintf@fval+2,___ftmul@f1+2
  2091  0014DA  0ECD               	movlw	205
  2092  0014DC  6E1F               	movwf	___ftmul@f2,c
  2093  0014DE  0ECC               	movlw	204
  2094  0014E0  6E20               	movwf	___ftmul@f2+1,c
  2095  0014E2  0E3D               	movlw	61
  2096  0014E4  6E21               	movwf	___ftmul@f2+2,c
  2097  0014E6  EC20  F016         	call	___ftmul	;wreg free
  2098  0014EA  C01C  F06D         	movff	?___ftmul,sprintf@fval
  2099  0014EE  C01D  F06E         	movff	?___ftmul+1,sprintf@fval+1
  2100  0014F2  C01E  F06F         	movff	?___ftmul+2,sprintf@fval+2
  2101                           
  2102                           ;doprnt.c: 897: exp++;
  2103  0014F6  4A69               	infsnz	sprintf@exp,f,c
  2104  0014F8  2A6A               	incf	sprintf@exp+1,f,c
  2105                           
  2106                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  2107  0014FA  D036               	goto	l3664
  2108  0014FC                     l3658:
  2109  0014FC  5070               	movf	sprintf@c,w,c
  2110  0014FE  0D04               	mullw	4
  2111  001500  0E01               	movlw	low _dpowers
  2112  001502  24F3               	addwf	prodl,w,c
  2113  001504  6EF6               	movwf	tblptrl,c
  2114  001506  0E10               	movlw	high _dpowers
  2115  001508  20F4               	addwfc	prodh,w,c
  2116  00150A  6EF7               	movwf	tblptrh,c
  2117  00150C                     	if	0	;There are less than 3 active tblptr bytes
  2118  00150C                     	endif
  2119  00150C  C06D  F001         	movff	sprintf@fval,___fttol@f1
  2120  001510  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2121  001514  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2122  001518  EC11  F017         	call	___fttol	;wreg free
  2123  00151C  0009               	tblrd		*+
  2124  00151E  50F5               	movf	tablat,w,c
  2125  001520  5C01               	subwf	?___fttol,w,c
  2126  001522  0009               	tblrd		*+
  2127  001524  50F5               	movf	tablat,w,c
  2128  001526  5802               	subwfb	?___fttol+1,w,c
  2129  001528  0009               	tblrd		*+
  2130  00152A  50F5               	movf	tablat,w,c
  2131  00152C  5803               	subwfb	?___fttol+2,w,c
  2132  00152E  0009               	tblrd		*+
  2133  001530  50F5               	movf	tablat,w,c
  2134  001532  5804               	subwfb	?___fttol+3,w,c
  2135  001534  B0D8               	btfsc	status,0,c
  2136  001536  D018               	goto	l3664
  2137                           
  2138                           ;doprnt.c: 899: fval *= 10.0;
  2139  001538  C06D  F01C         	movff	sprintf@fval,___ftmul@f1
  2140  00153C  C06E  F01D         	movff	sprintf@fval+1,___ftmul@f1+1
  2141  001540  C06F  F01E         	movff	sprintf@fval+2,___ftmul@f1+2
  2142  001544  0E00               	movlw	0
  2143  001546  6E1F               	movwf	___ftmul@f2,c
  2144  001548  0E20               	movlw	32
  2145  00154A  6E20               	movwf	___ftmul@f2+1,c
  2146  00154C  0E41               	movlw	65
  2147  00154E  6E21               	movwf	___ftmul@f2+2,c
  2148  001550  EC20  F016         	call	___ftmul	;wreg free
  2149  001554  C01C  F06D         	movff	?___ftmul,sprintf@fval
  2150  001558  C01D  F06E         	movff	?___ftmul+1,sprintf@fval+1
  2151  00155C  C01E  F06F         	movff	?___ftmul+2,sprintf@fval+2
  2152                           
  2153                           ;doprnt.c: 900: exp--;
  2154  001560  0669               	decf	sprintf@exp,f,c
  2155  001562  A0D8               	btfss	status,0,c
  2156  001564  066A               	decf	sprintf@exp+1,f,c
  2157  001566  D000               	goto	l3664
  2158  001568                     l3664:
  2159                           
  2160                           ;doprnt.c: 901: }
  2161                           ;doprnt.c: 903: }
  2162                           ;doprnt.c: 959: {
  2163                           ;doprnt.c: 973: if(flag & 0x03)
  2164  001568  0E03               	movlw	3
  2165  00156A  145F               	andwf	sprintf@flag,w,c
  2166  00156C  6E51               	movwf	??_sprintf& (0+255),c
  2167  00156E  0E00               	movlw	0
  2168  001570  1460               	andwf	sprintf@flag+1,w,c
  2169  001572  6E52               	movwf	(??_sprintf+1)& (0+255),c
  2170  001574  5051               	movf	??_sprintf,w,c
  2171  001576  1052               	iorwf	??_sprintf+1,w,c
  2172  001578  B4D8               	btfsc	status,2,c
  2173  00157A  D009               	goto	l3670
  2174                           
  2175                           ;doprnt.c: 974: ((*sp++ = ('-')));
  2176  00157C  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2177  001580  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2178  001584  0E2D               	movlw	45
  2179  001586  6EDF               	movwf	indf2,c
  2180  001588  4A4A               	infsnz	sprintf@sp,f,c
  2181  00158A  2A4B               	incf	sprintf@sp+1,f,c
  2182  00158C  D000               	goto	l3670
  2183  00158E                     l3670:
  2184                           
  2185                           ;doprnt.c: 980: }
  2186                           ;doprnt.c: 985: val = (unsigned long)fval;
  2187  00158E  C06D  F001         	movff	sprintf@fval,___fttol@f1
  2188  001592  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2189  001596  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2190  00159A  EC11  F017         	call	___fttol	;wreg free
  2191  00159E  C001  F065         	movff	?___fttol,sprintf@val
  2192  0015A2  C002  F066         	movff	?___fttol+1,sprintf@val+1
  2193  0015A6  C003  F067         	movff	?___fttol+2,sprintf@val+2
  2194  0015AA  C004  F068         	movff	?___fttol+3,sprintf@val+3
  2195                           
  2196                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  2197  0015AE  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2198  0015B2  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2199  0015B6  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2200  0015BA  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2201  0015BE  5070               	movf	sprintf@c,w,c
  2202  0015C0  0D04               	mullw	4
  2203  0015C2  0E01               	movlw	low _dpowers
  2204  0015C4  24F3               	addwf	prodl,w,c
  2205  0015C6  6EF6               	movwf	tblptrl,c
  2206  0015C8  0E10               	movlw	high _dpowers
  2207  0015CA  20F4               	addwfc	prodh,w,c
  2208  0015CC  6EF7               	movwf	tblptrh,c
  2209  0015CE                     	if	0	;There are less than 3 active tblptr bytes
  2210  0015CE                     	endif
  2211  0015CE  0009               	tblrd		*+
  2212  0015D0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2213  0015D4  0009               	tblrd		*+
  2214  0015D6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2215  0015DA  0009               	tblrd		*+
  2216  0015DC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2217  0015E0  000A               	tblrd		*-
  2218  0015E2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2219  0015E6  EC9E  F019         	call	___lldiv	;wreg free
  2220  0015EA  5001               	movf	?___lldiv,w,c
  2221  0015EC  0F30               	addlw	48
  2222  0015EE  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2223  0015F2  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2224  0015F6  6EDF               	movwf	indf2,c
  2225  0015F8  4A4A               	infsnz	sprintf@sp,f,c
  2226  0015FA  2A4B               	incf	sprintf@sp+1,f,c
  2227                           
  2228                           ;doprnt.c: 987: val %= dpowers[c];
  2229  0015FC  C065  F001         	movff	sprintf@val,___llmod@dividend
  2230  001600  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2231  001604  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2232  001608  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2233  00160C  5070               	movf	sprintf@c,w,c
  2234  00160E  0D04               	mullw	4
  2235  001610  0E01               	movlw	low _dpowers
  2236  001612  24F3               	addwf	prodl,w,c
  2237  001614  6EF6               	movwf	tblptrl,c
  2238  001616  0E10               	movlw	high _dpowers
  2239  001618  20F4               	addwfc	prodh,w,c
  2240  00161A  6EF7               	movwf	tblptrh,c
  2241  00161C                     	if	0	;There are less than 3 active tblptr bytes
  2242  00161C                     	endif
  2243  00161C  0009               	tblrd		*+
  2244  00161E  CFF5 F005          	movff	tablat,___llmod@divisor
  2245  001622  0009               	tblrd		*+
  2246  001624  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2247  001628  0009               	tblrd		*+
  2248  00162A  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2249  00162E  000A               	tblrd		*-
  2250  001630  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2251  001634  EC25  F01A         	call	___llmod	;wreg free
  2252  001638  C001  F065         	movff	?___llmod,sprintf@val
  2253  00163C  C002  F066         	movff	?___llmod+1,sprintf@val+1
  2254  001640  C003  F067         	movff	?___llmod+2,sprintf@val+2
  2255  001644  C004  F068         	movff	?___llmod+3,sprintf@val+3
  2256                           
  2257                           ;doprnt.c: 992: if(prec)
  2258  001648  506B               	movf	sprintf@prec,w,c
  2259  00164A  106C               	iorwf	sprintf@prec+1,w,c
  2260  00164C  B4D8               	btfsc	status,2,c
  2261  00164E  D085               	goto	l3706
  2262                           
  2263                           ;doprnt.c: 994: {
  2264                           ;doprnt.c: 995: ((*sp++ = ('.')));
  2265  001650  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2266  001654  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2267  001658  0E2E               	movlw	46
  2268  00165A  6EDF               	movwf	indf2,c
  2269  00165C  4A4A               	infsnz	sprintf@sp,f,c
  2270  00165E  2A4B               	incf	sprintf@sp+1,f,c
  2271                           
  2272                           ;doprnt.c: 996: prec -= c;
  2273  001660  5070               	movf	sprintf@c,w,c
  2274  001662  5E6B               	subwf	sprintf@prec,f,c
  2275  001664  0E00               	movlw	0
  2276  001666  BE70               	btfsc	sprintf@c,7,c
  2277  001668  0EFF               	movlw	255
  2278  00166A  5A6C               	subwfb	sprintf@prec+1,f,c
  2279                           
  2280                           ;doprnt.c: 997: while(c--) {
  2281  00166C  D05E               	goto	l3696
  2282  00166E                     l221:
  2283                           
  2284                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  2285  00166E  A260               	btfss	sprintf@flag+1,1,c
  2286  001670  D00E               	goto	l3690
  2287  001672  5065               	movf	sprintf@val,w,c
  2288  001674  1066               	iorwf	sprintf@val+1,w,c
  2289  001676  1067               	iorwf	sprintf@val+2,w,c
  2290  001678  1068               	iorwf	sprintf@val+3,w,c
  2291  00167A  A4D8               	btfss	status,2,c
  2292  00167C  D008               	goto	l3690
  2293                           
  2294                           ;doprnt.c: 1003: prec = c = 0;
  2295  00167E  0E00               	movlw	0
  2296  001680  6E70               	movwf	sprintf@c,c
  2297  001682  5070               	movf	sprintf@c,w,c
  2298  001684  6E6B               	movwf	sprintf@prec,c
  2299  001686  6A6C               	clrf	sprintf@prec+1,c
  2300  001688  BE6B               	btfsc	sprintf@prec,7,c
  2301  00168A  066C               	decf	sprintf@prec+1,f,c
  2302                           
  2303                           ;doprnt.c: 1004: break;
  2304  00168C  D060               	goto	l3704
  2305  00168E                     l3690:
  2306                           
  2307                           ;doprnt.c: 1005: }
  2308                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  2309  00168E  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2310  001692  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2311  001696  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2312  00169A  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2313  00169E  5070               	movf	sprintf@c,w,c
  2314  0016A0  0D04               	mullw	4
  2315  0016A2  0E01               	movlw	low _dpowers
  2316  0016A4  24F3               	addwf	prodl,w,c
  2317  0016A6  6EF6               	movwf	tblptrl,c
  2318  0016A8  0E10               	movlw	high _dpowers
  2319  0016AA  20F4               	addwfc	prodh,w,c
  2320  0016AC  6EF7               	movwf	tblptrh,c
  2321  0016AE                     	if	0	;There are less than 3 active tblptr bytes
  2322  0016AE                     	endif
  2323  0016AE  0009               	tblrd		*+
  2324  0016B0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2325  0016B4  0009               	tblrd		*+
  2326  0016B6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2327  0016BA  0009               	tblrd		*+
  2328  0016BC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2329  0016C0  000A               	tblrd		*-
  2330  0016C2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2331  0016C6  EC9E  F019         	call	___lldiv	;wreg free
  2332  0016CA  5001               	movf	?___lldiv,w,c
  2333  0016CC  0F30               	addlw	48
  2334  0016CE  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2335  0016D2  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2336  0016D6  6EDF               	movwf	indf2,c
  2337  0016D8  4A4A               	infsnz	sprintf@sp,f,c
  2338  0016DA  2A4B               	incf	sprintf@sp+1,f,c
  2339                           
  2340                           ;doprnt.c: 1008: val %= dpowers[c];
  2341  0016DC  C065  F001         	movff	sprintf@val,___llmod@dividend
  2342  0016E0  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2343  0016E4  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2344  0016E8  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2345  0016EC  5070               	movf	sprintf@c,w,c
  2346  0016EE  0D04               	mullw	4
  2347  0016F0  0E01               	movlw	low _dpowers
  2348  0016F2  24F3               	addwf	prodl,w,c
  2349  0016F4  6EF6               	movwf	tblptrl,c
  2350  0016F6  0E10               	movlw	high _dpowers
  2351  0016F8  20F4               	addwfc	prodh,w,c
  2352  0016FA  6EF7               	movwf	tblptrh,c
  2353  0016FC                     	if	0	;There are less than 3 active tblptr bytes
  2354  0016FC                     	endif
  2355  0016FC  0009               	tblrd		*+
  2356  0016FE  CFF5 F005          	movff	tablat,___llmod@divisor
  2357  001702  0009               	tblrd		*+
  2358  001704  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2359  001708  0009               	tblrd		*+
  2360  00170A  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2361  00170E  000A               	tblrd		*-
  2362  001710  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2363  001714  EC25  F01A         	call	___llmod	;wreg free
  2364  001718  C001  F065         	movff	?___llmod,sprintf@val
  2365  00171C  C002  F066         	movff	?___llmod+1,sprintf@val+1
  2366  001720  C003  F067         	movff	?___llmod+2,sprintf@val+2
  2367  001724  C004  F068         	movff	?___llmod+3,sprintf@val+3
  2368  001728  D000               	goto	l3696
  2369  00172A                     l3696:
  2370  00172A  0670               	decf	sprintf@c,f,c
  2371  00172C  2870               	incf	sprintf@c,w,c
  2372  00172E  B4D8               	btfsc	status,2,c
  2373  001730  D00E               	goto	l3704
  2374  001732  D79D               	goto	l221
  2375                           
  2376                           ;doprnt.c: 1010: }
  2377                           ;doprnt.c: 1011: while(prec) {
  2378  001734  D00C               	goto	l3704
  2379  001736                     l3698:
  2380                           
  2381                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  2382  001736  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2383  00173A  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2384  00173E  0E30               	movlw	48
  2385  001740  6EDF               	movwf	indf2,c
  2386  001742  4A4A               	infsnz	sprintf@sp,f,c
  2387  001744  2A4B               	incf	sprintf@sp+1,f,c
  2388                           
  2389                           ;doprnt.c: 1013: prec--;
  2390  001746  066B               	decf	sprintf@prec,f,c
  2391  001748  A0D8               	btfss	status,0,c
  2392  00174A  066C               	decf	sprintf@prec+1,f,c
  2393  00174C  D000               	goto	l3704
  2394  00174E                     l3704:
  2395  00174E  506B               	movf	sprintf@prec,w,c
  2396  001750  106C               	iorwf	sprintf@prec+1,w,c
  2397  001752  B4D8               	btfsc	status,2,c
  2398  001754  D002               	goto	l3706
  2399  001756  D7EF               	goto	l3698
  2400  001758  D000               	goto	l3706
  2401  00175A                     l3706:
  2402                           
  2403                           ;doprnt.c: 1014: }
  2404                           ;doprnt.c: 1015: }
  2405                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  2406  00175A  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2407  00175E  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2408  001762  0E65               	movlw	101
  2409  001764  6EDF               	movwf	indf2,c
  2410  001766  4A4A               	infsnz	sprintf@sp,f,c
  2411  001768  2A4B               	incf	sprintf@sp+1,f,c
  2412                           
  2413                           ;doprnt.c: 1022: if(exp < 0) {
  2414  00176A  AE6A               	btfss	sprintf@exp+1,7,c
  2415  00176C  D00D               	goto	l3718
  2416                           
  2417                           ;doprnt.c: 1023: exp = -exp;
  2418  00176E  6C69               	negf	sprintf@exp,c
  2419  001770  1E6A               	comf	sprintf@exp+1,f,c
  2420  001772  B0D8               	btfsc	status,0,c
  2421  001774  2A6A               	incf	sprintf@exp+1,f,c
  2422                           
  2423                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  2424  001776  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2425  00177A  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2426  00177E  0E2D               	movlw	45
  2427  001780  D008               	goto	L1
  2428  001782                     l3716:
  2429  001782  4A4A               	infsnz	sprintf@sp,f,c
  2430  001784  2A4B               	incf	sprintf@sp+1,f,c
  2431                           
  2432                           ;doprnt.c: 1025: } else
  2433  001786  D007               	goto	l3722
  2434  001788                     l3718:
  2435                           
  2436                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  2437  001788  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2438  00178C  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2439  001790  0E2B               	movlw	43
  2440  001792                     L1:
  2441  001792  6EDF               	movwf	indf2,c
  2442  001794  D7F6               	goto	l3716
  2443  001796                     l3722:
  2444                           
  2445                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  2446  001796  C069  F007         	movff	sprintf@exp,___awdiv@dividend
  2447  00179A  C06A  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2448  00179E  0E00               	movlw	0
  2449  0017A0  6E0A               	movwf	___awdiv@divisor+1,c
  2450  0017A2  0E0A               	movlw	10
  2451  0017A4  6E09               	movwf	___awdiv@divisor,c
  2452  0017A6  EC08  F019         	call	___awdiv	;wreg free
  2453  0017AA  5007               	movf	?___awdiv,w,c
  2454  0017AC  0F30               	addlw	48
  2455  0017AE  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2456  0017B2  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2457  0017B6  6EDF               	movwf	indf2,c
  2458  0017B8  4A4A               	infsnz	sprintf@sp,f,c
  2459  0017BA  2A4B               	incf	sprintf@sp+1,f,c
  2460                           
  2461                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2462  0017BC  C069  F001         	movff	sprintf@exp,___awmod@dividend
  2463  0017C0  C06A  F002         	movff	sprintf@exp+1,___awmod@dividend+1
  2464  0017C4  0E00               	movlw	0
  2465  0017C6  6E04               	movwf	___awmod@divisor+1,c
  2466  0017C8  0E0A               	movlw	10
  2467  0017CA  6E03               	movwf	___awmod@divisor,c
  2468  0017CC  ECE4  F019         	call	___awmod	;wreg free
  2469  0017D0  5001               	movf	?___awmod,w,c
  2470  0017D2  0F30               	addlw	48
  2471  0017D4  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2472  0017D8  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2473  0017DC  D361               	goto	L2
  2474  0017DE                     l3728:
  2475  0017DE  4A4A               	infsnz	sprintf@sp,f,c
  2476  0017E0  2A4B               	incf	sprintf@sp+1,f,c
  2477                           
  2478                           ;doprnt.c: 1047: continue;
  2479  0017E2  D361               	goto	l3890
  2480  0017E4                     l207:
  2481                           
  2482                           ;doprnt.c: 1048: }
  2483                           ;doprnt.c: 1087: if(flag & 0x200) {
  2484  0017E4  A260               	btfss	sprintf@flag+1,1,c
  2485  0017E6  D0EE               	goto	l3766
  2486                           
  2487                           ;doprnt.c: 1088: if(exp < 0)
  2488  0017E8  AE6A               	btfss	sprintf@exp+1,7,c
  2489  0017EA  D00B               	goto	l3734
  2490                           
  2491                           ;doprnt.c: 1089: prec -= (exp+1);
  2492  0017EC  0E01               	movlw	1
  2493  0017EE  2469               	addwf	sprintf@exp,w,c
  2494  0017F0  6E51               	movwf	??_sprintf& (0+255),c
  2495  0017F2  0E00               	movlw	0
  2496  0017F4  206A               	addwfc	sprintf@exp+1,w,c
  2497  0017F6  6E52               	movwf	(??_sprintf+1)& (0+255),c
  2498  0017F8  5051               	movf	??_sprintf,w,c
  2499  0017FA  5E6B               	subwf	sprintf@prec,f,c
  2500  0017FC  5052               	movf	??_sprintf+1,w,c
  2501  0017FE  5A6C               	subwfb	sprintf@prec+1,f,c
  2502  001800  D000               	goto	l3734
  2503  001802                     l3734:
  2504                           
  2505                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2506  001802  C06D  F001         	movff	sprintf@fval,___fttol@f1
  2507  001806  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2508  00180A  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2509  00180E  EC11  F017         	call	___fttol	;wreg free
  2510  001812  C001  F065         	movff	?___fttol,sprintf@val
  2511  001816  C002  F066         	movff	?___fttol+1,sprintf@val+1
  2512  00181A  C003  F067         	movff	?___fttol+2,sprintf@val+2
  2513  00181E  C004  F068         	movff	?___fttol+3,sprintf@val+3
  2514                           
  2515                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2516  001822  0E00               	movlw	0
  2517  001824  6E70               	movwf	sprintf@c,c
  2518  001826                     l3738:
  2519  001826  0E0A               	movlw	10
  2520  001828  1870               	xorwf	sprintf@c,w,c
  2521  00182A  B4D8               	btfsc	status,2,c
  2522  00182C  D01C               	goto	l3750
  2523  00182E  D001               	goto	l3742
  2524  001830  D01A               	goto	l3750
  2525  001832                     l3742:
  2526                           
  2527                           ;doprnt.c: 1093: if(val < dpowers[c])
  2528  001832  5070               	movf	sprintf@c,w,c
  2529  001834  0D04               	mullw	4
  2530  001836  0E01               	movlw	low _dpowers
  2531  001838  24F3               	addwf	prodl,w,c
  2532  00183A  6EF6               	movwf	tblptrl,c
  2533  00183C  0E10               	movlw	high _dpowers
  2534  00183E  20F4               	addwfc	prodh,w,c
  2535  001840  6EF7               	movwf	tblptrh,c
  2536  001842                     	if	0	;There are less than 3 active tblptr bytes
  2537  001842                     	endif
  2538  001842  0009               	tblrd		*+
  2539  001844  50F5               	movf	tablat,w,c
  2540  001846  5C65               	subwf	sprintf@val,w,c
  2541  001848  0009               	tblrd		*+
  2542  00184A  50F5               	movf	tablat,w,c
  2543  00184C  5866               	subwfb	sprintf@val+1,w,c
  2544  00184E  0009               	tblrd		*+
  2545  001850  50F5               	movf	tablat,w,c
  2546  001852  5867               	subwfb	sprintf@val+2,w,c
  2547  001854  0009               	tblrd		*+
  2548  001856  50F5               	movf	tablat,w,c
  2549  001858  5868               	subwfb	sprintf@val+3,w,c
  2550  00185A  A0D8               	btfss	status,0,c
  2551  00185C  D004               	goto	l3750
  2552  00185E  D001               	goto	l3746
  2553                           
  2554                           ;doprnt.c: 1094: break;
  2555  001860  D002               	goto	l3750
  2556  001862                     l3746:
  2557  001862  2A70               	incf	sprintf@c,f,c
  2558  001864  D7E0               	goto	l3738
  2559  001866                     l3750:
  2560                           
  2561                           ;doprnt.c: 1095: prec -= c;
  2562  001866  5070               	movf	sprintf@c,w,c
  2563  001868  5E6B               	subwf	sprintf@prec,f,c
  2564  00186A  0E00               	movlw	0
  2565  00186C  BE70               	btfsc	sprintf@c,7,c
  2566  00186E  0EFF               	movlw	255
  2567  001870  5A6C               	subwfb	sprintf@prec+1,f,c
  2568                           
  2569                           ;doprnt.c: 1096: if(prec <= 12)
  2570  001872  BE6C               	btfsc	sprintf@prec+1,7,c
  2571  001874  D006               	goto	l3752
  2572  001876  506C               	movf	sprintf@prec+1,w,c
  2573  001878  E11B               	bnz	l234
  2574  00187A  0E0D               	movlw	13
  2575  00187C  5C6B               	subwf	sprintf@prec,w,c
  2576  00187E  B0D8               	btfsc	status,0,c
  2577  001880  D017               	goto	l234
  2578  001882                     l3752:
  2579                           
  2580                           ;doprnt.c: 1097: fval += fround(prec);
  2581  001882  C06D  F035         	movff	sprintf@fval,___ftadd@f1
  2582  001886  C06E  F036         	movff	sprintf@fval+1,___ftadd@f1+1
  2583  00188A  C06F  F037         	movff	sprintf@fval+2,___ftadd@f1+2
  2584  00188E  506B               	movf	sprintf@prec,w,c
  2585  001890  EC0F  F013         	call	_fround
  2586  001894  C02B  F038         	movff	?_fround,___ftadd@f2
  2587  001898  C02C  F039         	movff	?_fround+1,___ftadd@f2+1
  2588  00189C  C02D  F03A         	movff	?_fround+2,___ftadd@f2+2
  2589  0018A0  EC31  F014         	call	___ftadd	;wreg free
  2590  0018A4  C035  F06D         	movff	?___ftadd,sprintf@fval
  2591  0018A8  C036  F06E         	movff	?___ftadd+1,sprintf@fval+1
  2592  0018AC  C037  F06F         	movff	?___ftadd+2,sprintf@fval+2
  2593  0018B0                     l234:
  2594                           
  2595                           ;doprnt.c: 1100: {
  2596                           ;doprnt.c: 1101: double temp;
  2597                           ;doprnt.c: 1102: temp = scale(prec);
  2598  0018B0  506B               	movf	sprintf@prec,w,c
  2599  0018B2  EC6A  F00F         	call	_scale
  2600  0018B6  C02B  F05C         	movff	?_scale,sprintf@temp
  2601  0018BA  C02C  F05D         	movff	?_scale+1,sprintf@temp+1
  2602  0018BE  C02D  F05E         	movff	?_scale+2,sprintf@temp+2
  2603                           
  2604                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2605  0018C2  C05C  F01C         	movff	sprintf@temp,___ftmul@f1
  2606  0018C6  C05D  F01D         	movff	sprintf@temp+1,___ftmul@f1+1
  2607  0018CA  C05E  F01E         	movff	sprintf@temp+2,___ftmul@f1+2
  2608  0018CE  C06D  F038         	movff	sprintf@fval,___ftadd@f2
  2609  0018D2  C06E  F039         	movff	sprintf@fval+1,___ftadd@f2+1
  2610  0018D6  C06F  F03A         	movff	sprintf@fval+2,___ftadd@f2+2
  2611  0018DA  C065  F010         	movff	sprintf@val,___lltoft@c
  2612  0018DE  C066  F011         	movff	sprintf@val+1,___lltoft@c+1
  2613  0018E2  C067  F012         	movff	sprintf@val+2,___lltoft@c+2
  2614  0018E6  C068  F013         	movff	sprintf@val+3,___lltoft@c+3
  2615  0018EA  EC5D  F01A         	call	___lltoft	;wreg free
  2616  0018EE  C010  F019         	movff	?___lltoft,___ftneg@f1
  2617  0018F2  C011  F01A         	movff	?___lltoft+1,___ftneg@f1+1
  2618  0018F6  C012  F01B         	movff	?___lltoft+2,___ftneg@f1+2
  2619  0018FA  EC54  F01C         	call	___ftneg	;wreg free
  2620  0018FE  C019  F035         	movff	?___ftneg,___ftadd@f1
  2621  001902  C01A  F036         	movff	?___ftneg+1,___ftadd@f1+1
  2622  001906  C01B  F037         	movff	?___ftneg+2,___ftadd@f1+2
  2623  00190A  EC31  F014         	call	___ftadd	;wreg free
  2624  00190E  C035  F01F         	movff	?___ftadd,___ftmul@f2
  2625  001912  C036  F020         	movff	?___ftadd+1,___ftmul@f2+1
  2626  001916  C037  F021         	movff	?___ftadd+2,___ftmul@f2+2
  2627  00191A  EC20  F016         	call	___ftmul	;wreg free
  2628  00191E  C01C  F05C         	movff	?___ftmul,sprintf@temp
  2629  001922  C01D  F05D         	movff	?___ftmul+1,sprintf@temp+1
  2630  001926  C01E  F05E         	movff	?___ftmul+2,sprintf@temp+2
  2631                           
  2632                           ;doprnt.c: 1104: val = (unsigned long)temp;
  2633  00192A  C05C  F001         	movff	sprintf@temp,___fttol@f1
  2634  00192E  C05D  F002         	movff	sprintf@temp+1,___fttol@f1+1
  2635  001932  C05E  F003         	movff	sprintf@temp+2,___fttol@f1+2
  2636  001936  EC11  F017         	call	___fttol	;wreg free
  2637  00193A  C001  F065         	movff	?___fttol,sprintf@val
  2638  00193E  C002  F066         	movff	?___fttol+1,sprintf@val+1
  2639  001942  C003  F067         	movff	?___fttol+2,sprintf@val+2
  2640  001946  C004  F068         	movff	?___fttol+3,sprintf@val+3
  2641                           
  2642                           ;doprnt.c: 1105: }
  2643                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  2644  00194A  D01E               	goto	l3762
  2645  00194C                     l3758:
  2646                           
  2647                           ;doprnt.c: 1107: val /= 10;
  2648  00194C  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2649  001950  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2650  001954  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2651  001958  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2652  00195C  0E0A               	movlw	10
  2653  00195E  6E05               	movwf	___lldiv@divisor,c
  2654  001960  0E00               	movlw	0
  2655  001962  6E06               	movwf	___lldiv@divisor+1,c
  2656  001964  0E00               	movlw	0
  2657  001966  6E07               	movwf	___lldiv@divisor+2,c
  2658  001968  0E00               	movlw	0
  2659  00196A  6E08               	movwf	___lldiv@divisor+3,c
  2660  00196C  EC9E  F019         	call	___lldiv	;wreg free
  2661  001970  C001  F065         	movff	?___lldiv,sprintf@val
  2662  001974  C002  F066         	movff	?___lldiv+1,sprintf@val+1
  2663  001978  C003  F067         	movff	?___lldiv+2,sprintf@val+2
  2664  00197C  C004  F068         	movff	?___lldiv+3,sprintf@val+3
  2665                           
  2666                           ;doprnt.c: 1108: prec--;
  2667  001980  066B               	decf	sprintf@prec,f,c
  2668  001982  A0D8               	btfss	status,0,c
  2669  001984  066C               	decf	sprintf@prec+1,f,c
  2670  001986  D000               	goto	l3762
  2671  001988                     l3762:
  2672  001988  506B               	movf	sprintf@prec,w,c
  2673  00198A  106C               	iorwf	sprintf@prec+1,w,c
  2674  00198C  B4D8               	btfsc	status,2,c
  2675  00198E  D03A               	goto	l3770
  2676  001990  C065  F001         	movff	sprintf@val,___llmod@dividend
  2677  001994  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2678  001998  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2679  00199C  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2680  0019A0  0E0A               	movlw	10
  2681  0019A2  6E05               	movwf	___llmod@divisor,c
  2682  0019A4  0E00               	movlw	0
  2683  0019A6  6E06               	movwf	___llmod@divisor+1,c
  2684  0019A8  0E00               	movlw	0
  2685  0019AA  6E07               	movwf	___llmod@divisor+2,c
  2686  0019AC  0E00               	movlw	0
  2687  0019AE  6E08               	movwf	___llmod@divisor+3,c
  2688  0019B0  EC25  F01A         	call	___llmod	;wreg free
  2689  0019B4  5001               	movf	?___llmod,w,c
  2690  0019B6  1002               	iorwf	?___llmod+1,w,c
  2691  0019B8  1003               	iorwf	?___llmod+2,w,c
  2692  0019BA  1004               	iorwf	?___llmod+3,w,c
  2693  0019BC  A4D8               	btfss	status,2,c
  2694  0019BE  D022               	goto	l3770
  2695  0019C0  D7C5               	goto	l3758
  2696                           
  2697                           ;doprnt.c: 1109: }
  2698                           ;doprnt.c: 1110: } else
  2699  0019C2  D020               	goto	l3770
  2700  0019C4                     l3766:
  2701                           
  2702                           ;doprnt.c: 1112: if(prec <= 12)
  2703  0019C4  BE6C               	btfsc	sprintf@prec+1,7,c
  2704  0019C6  D006               	goto	l3768
  2705  0019C8  506C               	movf	sprintf@prec+1,w,c
  2706  0019CA  E11C               	bnz	l3770
  2707  0019CC  0E0D               	movlw	13
  2708  0019CE  5C6B               	subwf	sprintf@prec,w,c
  2709  0019D0  B0D8               	btfsc	status,0,c
  2710  0019D2  D018               	goto	l3770
  2711  0019D4                     l3768:
  2712                           
  2713                           ;doprnt.c: 1113: fval += fround(prec);
  2714  0019D4  C06D  F035         	movff	sprintf@fval,___ftadd@f1
  2715  0019D8  C06E  F036         	movff	sprintf@fval+1,___ftadd@f1+1
  2716  0019DC  C06F  F037         	movff	sprintf@fval+2,___ftadd@f1+2
  2717  0019E0  506B               	movf	sprintf@prec,w,c
  2718  0019E2  EC0F  F013         	call	_fround
  2719  0019E6  C02B  F038         	movff	?_fround,___ftadd@f2
  2720  0019EA  C02C  F039         	movff	?_fround+1,___ftadd@f2+1
  2721  0019EE  C02D  F03A         	movff	?_fround+2,___ftadd@f2+2
  2722  0019F2  EC31  F014         	call	___ftadd	;wreg free
  2723  0019F6  C035  F06D         	movff	?___ftadd,sprintf@fval
  2724  0019FA  C036  F06E         	movff	?___ftadd+1,sprintf@fval+1
  2725  0019FE  C037  F06F         	movff	?___ftadd+2,sprintf@fval+2
  2726  001A02  D000               	goto	l3770
  2727  001A04                     l3770:
  2728                           
  2729                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2730  001A04  BE6A               	btfsc	sprintf@exp+1,7,c
  2731  001A06  D006               	goto	l3772
  2732  001A08  506A               	movf	sprintf@exp+1,w,c
  2733  001A0A  E120               	bnz	l3778
  2734  001A0C  0E0A               	movlw	10
  2735  001A0E  5C69               	subwf	sprintf@exp,w,c
  2736  001A10  B0D8               	btfsc	status,0,c
  2737  001A12  D01C               	goto	l3778
  2738  001A14                     l3772:
  2739  001A14  506D               	movf	sprintf@fval,w,c
  2740  001A16  106E               	iorwf	sprintf@fval+1,w,c
  2741  001A18  106F               	iorwf	sprintf@fval+2,w,c
  2742  001A1A  B4D8               	btfsc	status,2,c
  2743  001A1C  D06D               	goto	l3792
  2744  001A1E  C06D  F001         	movff	sprintf@fval,___fttol@f1
  2745  001A22  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2746  001A26  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2747  001A2A  EC11  F017         	call	___fttol	;wreg free
  2748  001A2E  5001               	movf	?___fttol,w,c
  2749  001A30  1002               	iorwf	?___fttol+1,w,c
  2750  001A32  1003               	iorwf	?___fttol+2,w,c
  2751  001A34  1004               	iorwf	?___fttol+3,w,c
  2752  001A36  B4D8               	btfsc	status,2,c
  2753  001A38  BE6A               	btfsc	sprintf@exp+1,7,c
  2754  001A3A  D05E               	goto	l3792
  2755  001A3C  506A               	movf	sprintf@exp+1,w,c
  2756  001A3E  E106               	bnz	l3778
  2757  001A40  0E02               	movlw	2
  2758  001A42  5C69               	subwf	sprintf@exp,w,c
  2759  001A44  B0D8               	btfsc	status,0,c
  2760  001A46  D002               	goto	l3778
  2761  001A48  D057               	goto	l3792
  2762  001A4A  D000               	goto	l3778
  2763  001A4C                     l3778:
  2764                           
  2765                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2766  001A4C  C061  F041         	movff	sprintf@tmpval,___ftge@ff1
  2767  001A50  C062  F042         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2768  001A54  C063  F043         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2769  001A58  0E70               	movlw	112
  2770  001A5A  6E44               	movwf	___ftge@ff2,c
  2771  001A5C  0E89               	movlw	137
  2772  001A5E  6E45               	movwf	___ftge@ff2+1,c
  2773  001A60  0E40               	movlw	64
  2774  001A62  6E46               	movwf	___ftge@ff2+2,c
  2775  001A64  EC53  F019         	call	___ftge	;wreg free
  2776  001A68  B0D8               	btfsc	status,0,c
  2777  001A6A  D002               	goto	l3782
  2778                           
  2779                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2780  001A6C  0EF7               	movlw	247
  2781  001A6E  D001               	goto	L3
  2782  001A70                     l3782:
  2783                           
  2784                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2785  001A70  0EF8               	movlw	248
  2786  001A72                     L3:
  2787  001A72  2669               	addwf	sprintf@exp,f,c
  2788  001A74  0EFF               	movlw	255
  2789  001A76  226A               	addwfc	sprintf@exp+1,f,c
  2790  001A78  D000               	goto	l3784
  2791  001A7A                     l3784:
  2792                           
  2793                           ;doprnt.c: 1124: }
  2794                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2795  001A7A  5069               	movf	sprintf@exp,w,c
  2796  001A7C  EC6A  F00F         	call	_scale
  2797  001A80  C02B  F061         	movff	?_scale,sprintf@tmpval
  2798  001A84  C02C  F062         	movff	?_scale+1,sprintf@tmpval+1
  2799  001A88  C02D  F063         	movff	?_scale+2,sprintf@tmpval+2
  2800                           
  2801                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2802  001A8C  D017               	goto	l3788
  2803  001A8E  C06D  F001         	movff	sprintf@fval,__div_to_l_@f1
  2804  001A92  C06E  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2805  001A96  C06F  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2806  001A9A  C061  F004         	movff	sprintf@tmpval,__div_to_l_@f2
  2807  001A9E  C062  F005         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2808  001AA2  C063  F006         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2809  001AA6  EC9B  F015         	call	__div_to_l_	;wreg free
  2810  001AAA  C001  F065         	movff	?__div_to_l_,sprintf@val
  2811  001AAE  C002  F066         	movff	?__div_to_l_+1,sprintf@val+1
  2812  001AB2  C003  F067         	movff	?__div_to_l_+2,sprintf@val+2
  2813  001AB6  C004  F068         	movff	?__div_to_l_+3,sprintf@val+3
  2814  001ABA  D017               	goto	l3790
  2815  001ABC                     l3788:
  2816  001ABC  C06D  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2817  001AC0  C06E  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2818  001AC4  C06F  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2819  001AC8  C061  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2820  001ACC  C062  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2821  001AD0  C063  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2822  001AD4  EC13  F015         	call	__tdiv_to_l_	;wreg free
  2823  001AD8  C001  F065         	movff	?__tdiv_to_l_,sprintf@val
  2824  001ADC  C002  F066         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2825  001AE0  C003  F067         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2826  001AE4  C004  F068         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2827  001AE8  D000               	goto	l3790
  2828  001AEA                     l3790:
  2829                           
  2830                           ;doprnt.c: 1129: fval = 0.0;
  2831  001AEA  0E00               	movlw	0
  2832  001AEC  6E6D               	movwf	sprintf@fval,c
  2833  001AEE  0E00               	movlw	0
  2834  001AF0  6E6E               	movwf	sprintf@fval+1,c
  2835  001AF2  0E00               	movlw	0
  2836  001AF4  6E6F               	movwf	sprintf@fval+2,c
  2837                           
  2838                           ;doprnt.c: 1130: } else {
  2839  001AF6  D033               	goto	l3796
  2840  001AF8                     l3792:
  2841                           
  2842                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2843  001AF8  C06D  F001         	movff	sprintf@fval,___fttol@f1
  2844  001AFC  C06E  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2845  001B00  C06F  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2846  001B04  EC11  F017         	call	___fttol	;wreg free
  2847  001B08  C001  F065         	movff	?___fttol,sprintf@val
  2848  001B0C  C002  F066         	movff	?___fttol+1,sprintf@val+1
  2849  001B10  C003  F067         	movff	?___fttol+2,sprintf@val+2
  2850  001B14  C004  F068         	movff	?___fttol+3,sprintf@val+3
  2851                           
  2852                           ;doprnt.c: 1132: fval -= (double)val;
  2853  001B18  C06D  F041         	movff	sprintf@fval,___ftsub@f1
  2854  001B1C  C06E  F042         	movff	sprintf@fval+1,___ftsub@f1+1
  2855  001B20  C06F  F043         	movff	sprintf@fval+2,___ftsub@f1+2
  2856  001B24  C065  F010         	movff	sprintf@val,___lltoft@c
  2857  001B28  C066  F011         	movff	sprintf@val+1,___lltoft@c+1
  2858  001B2C  C067  F012         	movff	sprintf@val+2,___lltoft@c+2
  2859  001B30  C068  F013         	movff	sprintf@val+3,___lltoft@c+3
  2860  001B34  EC5D  F01A         	call	___lltoft	;wreg free
  2861  001B38  C010  F044         	movff	?___lltoft,___ftsub@f2
  2862  001B3C  C011  F045         	movff	?___lltoft+1,___ftsub@f2+1
  2863  001B40  C012  F046         	movff	?___lltoft+2,___ftsub@f2+2
  2864  001B44  EC5D  F01B         	call	___ftsub	;wreg free
  2865  001B48  C041  F06D         	movff	?___ftsub,sprintf@fval
  2866  001B4C  C042  F06E         	movff	?___ftsub+1,sprintf@fval+1
  2867  001B50  C043  F06F         	movff	?___ftsub+2,sprintf@fval+2
  2868                           
  2869                           ;doprnt.c: 1133: exp = 0;
  2870  001B54  0E00               	movlw	0
  2871  001B56  6E6A               	movwf	sprintf@exp+1,c
  2872  001B58  0E00               	movlw	0
  2873  001B5A  6E69               	movwf	sprintf@exp,c
  2874  001B5C  D000               	goto	l3796
  2875  001B5E                     l3796:
  2876                           
  2877                           ;doprnt.c: 1134: }
  2878                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2879  001B5E  0E01               	movlw	1
  2880  001B60  6E70               	movwf	sprintf@c,c
  2881  001B62                     l3798:
  2882  001B62  0E0A               	movlw	10
  2883  001B64  1870               	xorwf	sprintf@c,w,c
  2884  001B66  B4D8               	btfsc	status,2,c
  2885  001B68  D01C               	goto	l3810
  2886  001B6A  D001               	goto	l3802
  2887  001B6C  D01A               	goto	l3810
  2888  001B6E                     l3802:
  2889                           
  2890                           ;doprnt.c: 1137: if(val < dpowers[c])
  2891  001B6E  5070               	movf	sprintf@c,w,c
  2892  001B70  0D04               	mullw	4
  2893  001B72  0E01               	movlw	low _dpowers
  2894  001B74  24F3               	addwf	prodl,w,c
  2895  001B76  6EF6               	movwf	tblptrl,c
  2896  001B78  0E10               	movlw	high _dpowers
  2897  001B7A  20F4               	addwfc	prodh,w,c
  2898  001B7C  6EF7               	movwf	tblptrh,c
  2899  001B7E                     	if	0	;There are less than 3 active tblptr bytes
  2900  001B7E                     	endif
  2901  001B7E  0009               	tblrd		*+
  2902  001B80  50F5               	movf	tablat,w,c
  2903  001B82  5C65               	subwf	sprintf@val,w,c
  2904  001B84  0009               	tblrd		*+
  2905  001B86  50F5               	movf	tablat,w,c
  2906  001B88  5866               	subwfb	sprintf@val+1,w,c
  2907  001B8A  0009               	tblrd		*+
  2908  001B8C  50F5               	movf	tablat,w,c
  2909  001B8E  5867               	subwfb	sprintf@val+2,w,c
  2910  001B90  0009               	tblrd		*+
  2911  001B92  50F5               	movf	tablat,w,c
  2912  001B94  5868               	subwfb	sprintf@val+3,w,c
  2913  001B96  A0D8               	btfss	status,0,c
  2914  001B98  D004               	goto	l3810
  2915  001B9A  D001               	goto	l3806
  2916                           
  2917                           ;doprnt.c: 1138: break;
  2918  001B9C  D002               	goto	l3810
  2919  001B9E                     l3806:
  2920  001B9E  2A70               	incf	sprintf@c,f,c
  2921  001BA0  D7E0               	goto	l3798
  2922  001BA2                     l3810:
  2923                           
  2924                           ;doprnt.c: 1175: {
  2925                           ;doprnt.c: 1188: if(flag & 0x03)
  2926  001BA2  0E03               	movlw	3
  2927  001BA4  145F               	andwf	sprintf@flag,w,c
  2928  001BA6  6E51               	movwf	??_sprintf& (0+255),c
  2929  001BA8  0E00               	movlw	0
  2930  001BAA  1460               	andwf	sprintf@flag+1,w,c
  2931  001BAC  6E52               	movwf	(??_sprintf+1)& (0+255),c
  2932  001BAE  5051               	movf	??_sprintf,w,c
  2933  001BB0  1052               	iorwf	??_sprintf+1,w,c
  2934  001BB2  B4D8               	btfsc	status,2,c
  2935  001BB4  D051               	goto	l3824
  2936                           
  2937                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2938  001BB6  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2939  001BBA  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2940  001BBE  0E2D               	movlw	45
  2941  001BC0  D049               	goto	L4
  2942  001BC2                     l3814:
  2943  001BC2  4A4A               	infsnz	sprintf@sp,f,c
  2944  001BC4  2A4B               	incf	sprintf@sp+1,f,c
  2945                           
  2946                           ;doprnt.c: 1195: }
  2947                           ;doprnt.c: 1196: while(c--) {
  2948  001BC6  D048               	goto	l3824
  2949  001BC8                     l3816:
  2950                           
  2951                           ;doprnt.c: 1200: {
  2952                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2953  001BC8  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2954  001BCC  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2955  001BD0  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2956  001BD4  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2957  001BD8  5070               	movf	sprintf@c,w,c
  2958  001BDA  0D04               	mullw	4
  2959  001BDC  0E01               	movlw	low _dpowers
  2960  001BDE  24F3               	addwf	prodl,w,c
  2961  001BE0  6EF6               	movwf	tblptrl,c
  2962  001BE2  0E10               	movlw	high _dpowers
  2963  001BE4  20F4               	addwfc	prodh,w,c
  2964  001BE6  6EF7               	movwf	tblptrh,c
  2965  001BE8                     	if	0	;There are less than 3 active tblptr bytes
  2966  001BE8                     	endif
  2967  001BE8  0009               	tblrd		*+
  2968  001BEA  CFF5 F005          	movff	tablat,___lldiv@divisor
  2969  001BEE  0009               	tblrd		*+
  2970  001BF0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2971  001BF4  0009               	tblrd		*+
  2972  001BF6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2973  001BFA  000A               	tblrd		*-
  2974  001BFC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2975  001C00  EC9E  F019         	call	___lldiv	;wreg free
  2976  001C04  C001  F061         	movff	?___lldiv,sprintf@tmpval
  2977  001C08  C002  F062         	movff	?___lldiv+1,sprintf@tmpval+1
  2978  001C0C  C003  F063         	movff	?___lldiv+2,sprintf@tmpval+2
  2979  001C10  C004  F064         	movff	?___lldiv+3,sprintf@tmpval+3
  2980                           
  2981                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2982  001C14  C061  F001         	movff	sprintf@tmpval,___llmod@dividend
  2983  001C18  C062  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2984  001C1C  C063  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2985  001C20  C064  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2986  001C24  0E0A               	movlw	10
  2987  001C26  6E05               	movwf	___llmod@divisor,c
  2988  001C28  0E00               	movlw	0
  2989  001C2A  6E06               	movwf	___llmod@divisor+1,c
  2990  001C2C  0E00               	movlw	0
  2991  001C2E  6E07               	movwf	___llmod@divisor+2,c
  2992  001C30  0E00               	movlw	0
  2993  001C32  6E08               	movwf	___llmod@divisor+3,c
  2994  001C34  EC25  F01A         	call	___llmod	;wreg free
  2995  001C38  C001  F061         	movff	?___llmod,sprintf@tmpval
  2996  001C3C  C002  F062         	movff	?___llmod+1,sprintf@tmpval+1
  2997  001C40  C003  F063         	movff	?___llmod+2,sprintf@tmpval+2
  2998  001C44  C004  F064         	movff	?___llmod+3,sprintf@tmpval+3
  2999                           
  3000                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3001  001C48  5061               	movf	sprintf@tmpval,w,c
  3002  001C4A  0F30               	addlw	48
  3003  001C4C  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3004  001C50  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3005  001C54                     L4:
  3006  001C54  6EDF               	movwf	indf2,c
  3007  001C56  D7B5               	goto	l3814
  3008  001C58                     l3824:
  3009  001C58  0670               	decf	sprintf@c,f,c
  3010  001C5A  2870               	incf	sprintf@c,w,c
  3011  001C5C  B4D8               	btfsc	status,2,c
  3012  001C5E  D00E               	goto	l3832
  3013  001C60  D7B3               	goto	l3816
  3014                           
  3015                           ;doprnt.c: 1204: }
  3016                           ;doprnt.c: 1206: }
  3017                           ;doprnt.c: 1207: while(exp > 0) {
  3018  001C62  D00C               	goto	l3832
  3019  001C64                     l3826:
  3020                           
  3021                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3022  001C64  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3023  001C68  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3024  001C6C  0E30               	movlw	48
  3025  001C6E  6EDF               	movwf	indf2,c
  3026  001C70  4A4A               	infsnz	sprintf@sp,f,c
  3027  001C72  2A4B               	incf	sprintf@sp+1,f,c
  3028                           
  3029                           ;doprnt.c: 1209: exp--;
  3030  001C74  0669               	decf	sprintf@exp,f,c
  3031  001C76  A0D8               	btfss	status,0,c
  3032  001C78  066A               	decf	sprintf@exp+1,f,c
  3033  001C7A  D000               	goto	l3832
  3034  001C7C                     l3832:
  3035  001C7C  BE6A               	btfsc	sprintf@exp+1,7,c
  3036  001C7E  D005               	goto	l3834
  3037  001C80  506A               	movf	sprintf@exp+1,w,c
  3038  001C82  E1F0               	bnz	l3826
  3039  001C84  0469               	decf	sprintf@exp,w,c
  3040  001C86  B0D8               	btfsc	status,0,c
  3041  001C88  D7ED               	goto	l3826
  3042  001C8A                     l3834:
  3043                           
  3044                           ;doprnt.c: 1210: }
  3045                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3046  001C8A  BE6C               	btfsc	sprintf@prec+1,7,c
  3047  001C8C  D009               	goto	l262
  3048  001C8E  506C               	movf	sprintf@prec+1,w,c
  3049  001C90  E104               	bnz	u3860
  3050  001C92  0E09               	movlw	9
  3051  001C94  5C6B               	subwf	sprintf@prec,w,c
  3052  001C96  A0D8               	btfss	status,0,c
  3053  001C98  D003               	goto	l262
  3054  001C9A                     u3860:
  3055                           
  3056                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3057  001C9A  0E08               	movlw	8
  3058  001C9C  6E70               	movwf	sprintf@c,c
  3059  001C9E  D003               	goto	l3838
  3060  001CA0                     l262:
  3061                           
  3062                           ;doprnt.c: 1213: else
  3063                           ;doprnt.c: 1214: c = prec;
  3064  001CA0  C06B  F070         	movff	sprintf@prec,sprintf@c
  3065  001CA4  D000               	goto	l3838
  3066  001CA6                     l3838:
  3067                           
  3068                           ;doprnt.c: 1215: prec -= c;
  3069  001CA6  5070               	movf	sprintf@c,w,c
  3070  001CA8  5E6B               	subwf	sprintf@prec,f,c
  3071  001CAA  0E00               	movlw	0
  3072  001CAC  BE70               	btfsc	sprintf@c,7,c
  3073  001CAE  0EFF               	movlw	255
  3074  001CB0  5A6C               	subwfb	sprintf@prec+1,f,c
  3075                           
  3076                           ;doprnt.c: 1219: if(c)
  3077  001CB2  5070               	movf	sprintf@c,w,c
  3078  001CB4  B4D8               	btfsc	status,2,c
  3079  001CB6  D009               	goto	l3846
  3080                           
  3081                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3082  001CB8  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3083  001CBC  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3084  001CC0  0E2E               	movlw	46
  3085  001CC2  6EDF               	movwf	indf2,c
  3086  001CC4  4A4A               	infsnz	sprintf@sp,f,c
  3087  001CC6  2A4B               	incf	sprintf@sp+1,f,c
  3088  001CC8  D000               	goto	l3846
  3089  001CCA                     l3846:
  3090                           
  3091                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3092  001CCA  5070               	movf	sprintf@c,w,c
  3093  001CCC  EC6A  F00F         	call	_scale
  3094  001CD0  C02B  F057         	movff	?_scale,_sprintf$1770
  3095  001CD4  C02C  F058         	movff	?_scale+1,_sprintf$1770+1
  3096  001CD8  C02D  F059         	movff	?_scale+2,_sprintf$1770+2
  3097                           
  3098                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3099  001CDC  C06D  F01F         	movff	sprintf@fval,___ftmul@f2
  3100  001CE0  C06E  F020         	movff	sprintf@fval+1,___ftmul@f2+1
  3101  001CE4  C06F  F021         	movff	sprintf@fval+2,___ftmul@f2+2
  3102  001CE8  C057  F01C         	movff	_sprintf$1770,___ftmul@f1
  3103  001CEC  C058  F01D         	movff	_sprintf$1770+1,___ftmul@f1+1
  3104  001CF0  C059  F01E         	movff	_sprintf$1770+2,___ftmul@f1+2
  3105  001CF4  EC20  F016         	call	___ftmul	;wreg free
  3106  001CF8  C01C  F001         	movff	?___ftmul,___fttol@f1
  3107  001CFC  C01D  F002         	movff	?___ftmul+1,___fttol@f1+1
  3108  001D00  C01E  F003         	movff	?___ftmul+2,___fttol@f1+2
  3109  001D04  EC11  F017         	call	___fttol	;wreg free
  3110  001D08  C001  F065         	movff	?___fttol,sprintf@val
  3111  001D0C  C002  F066         	movff	?___fttol+1,sprintf@val+1
  3112  001D10  C003  F067         	movff	?___fttol+2,sprintf@val+2
  3113  001D14  C004  F068         	movff	?___fttol+3,sprintf@val+3
  3114                           
  3115                           ;doprnt.c: 1228: while(c--) {
  3116  001D18  D070               	goto	l3860
  3117  001D1A                     l3850:
  3118                           
  3119                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3120  001D1A  C065  F001         	movff	sprintf@val,___lldiv@dividend
  3121  001D1E  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3122  001D22  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3123  001D26  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3124  001D2A  5070               	movf	sprintf@c,w,c
  3125  001D2C  0D04               	mullw	4
  3126  001D2E  0E01               	movlw	low _dpowers
  3127  001D30  24F3               	addwf	prodl,w,c
  3128  001D32  6EF6               	movwf	tblptrl,c
  3129  001D34  0E10               	movlw	high _dpowers
  3130  001D36  20F4               	addwfc	prodh,w,c
  3131  001D38  6EF7               	movwf	tblptrh,c
  3132  001D3A                     	if	0	;There are less than 3 active tblptr bytes
  3133  001D3A                     	endif
  3134  001D3A  0009               	tblrd		*+
  3135  001D3C  CFF5 F005          	movff	tablat,___lldiv@divisor
  3136  001D40  0009               	tblrd		*+
  3137  001D42  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3138  001D46  0009               	tblrd		*+
  3139  001D48  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3140  001D4C  000A               	tblrd		*-
  3141  001D4E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3142  001D52  EC9E  F019         	call	___lldiv	;wreg free
  3143  001D56  C001  F061         	movff	?___lldiv,sprintf@tmpval
  3144  001D5A  C002  F062         	movff	?___lldiv+1,sprintf@tmpval+1
  3145  001D5E  C003  F063         	movff	?___lldiv+2,sprintf@tmpval+2
  3146  001D62  C004  F064         	movff	?___lldiv+3,sprintf@tmpval+3
  3147                           
  3148                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3149  001D66  C061  F001         	movff	sprintf@tmpval,___llmod@dividend
  3150  001D6A  C062  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3151  001D6E  C063  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3152  001D72  C064  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3153  001D76  0E0A               	movlw	10
  3154  001D78  6E05               	movwf	___llmod@divisor,c
  3155  001D7A  0E00               	movlw	0
  3156  001D7C  6E06               	movwf	___llmod@divisor+1,c
  3157  001D7E  0E00               	movlw	0
  3158  001D80  6E07               	movwf	___llmod@divisor+2,c
  3159  001D82  0E00               	movlw	0
  3160  001D84  6E08               	movwf	___llmod@divisor+3,c
  3161  001D86  EC25  F01A         	call	___llmod	;wreg free
  3162  001D8A  C001  F061         	movff	?___llmod,sprintf@tmpval
  3163  001D8E  C002  F062         	movff	?___llmod+1,sprintf@tmpval+1
  3164  001D92  C003  F063         	movff	?___llmod+2,sprintf@tmpval+2
  3165  001D96  C004  F064         	movff	?___llmod+3,sprintf@tmpval+3
  3166                           
  3167                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3168  001D9A  5061               	movf	sprintf@tmpval,w,c
  3169  001D9C  0F30               	addlw	48
  3170  001D9E  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3171  001DA2  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3172  001DA6  6EDF               	movwf	indf2,c
  3173  001DA8  4A4A               	infsnz	sprintf@sp,f,c
  3174  001DAA  2A4B               	incf	sprintf@sp+1,f,c
  3175                           
  3176                           ;doprnt.c: 1232: val %= dpowers[c];
  3177  001DAC  C065  F001         	movff	sprintf@val,___llmod@dividend
  3178  001DB0  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  3179  001DB4  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  3180  001DB8  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  3181  001DBC  5070               	movf	sprintf@c,w,c
  3182  001DBE  0D04               	mullw	4
  3183  001DC0  0E01               	movlw	low _dpowers
  3184  001DC2  24F3               	addwf	prodl,w,c
  3185  001DC4  6EF6               	movwf	tblptrl,c
  3186  001DC6  0E10               	movlw	high _dpowers
  3187  001DC8  20F4               	addwfc	prodh,w,c
  3188  001DCA  6EF7               	movwf	tblptrh,c
  3189  001DCC                     	if	0	;There are less than 3 active tblptr bytes
  3190  001DCC                     	endif
  3191  001DCC  0009               	tblrd		*+
  3192  001DCE  CFF5 F005          	movff	tablat,___llmod@divisor
  3193  001DD2  0009               	tblrd		*+
  3194  001DD4  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3195  001DD8  0009               	tblrd		*+
  3196  001DDA  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3197  001DDE  000A               	tblrd		*-
  3198  001DE0  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3199  001DE4  EC25  F01A         	call	___llmod	;wreg free
  3200  001DE8  C001  F065         	movff	?___llmod,sprintf@val
  3201  001DEC  C002  F066         	movff	?___llmod+1,sprintf@val+1
  3202  001DF0  C003  F067         	movff	?___llmod+2,sprintf@val+2
  3203  001DF4  C004  F068         	movff	?___llmod+3,sprintf@val+3
  3204  001DF8  D000               	goto	l3860
  3205  001DFA                     l3860:
  3206  001DFA  0670               	decf	sprintf@c,f,c
  3207  001DFC  2870               	incf	sprintf@c,w,c
  3208  001DFE  B4D8               	btfsc	status,2,c
  3209  001E00  D00E               	goto	l3868
  3210  001E02  D78B               	goto	l3850
  3211                           
  3212                           ;doprnt.c: 1233: }
  3213                           ;doprnt.c: 1235: while(prec) {
  3214  001E04  D00C               	goto	l3868
  3215  001E06                     l3862:
  3216                           
  3217                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3218  001E06  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3219  001E0A  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3220  001E0E  0E30               	movlw	48
  3221  001E10  6EDF               	movwf	indf2,c
  3222  001E12  4A4A               	infsnz	sprintf@sp,f,c
  3223  001E14  2A4B               	incf	sprintf@sp+1,f,c
  3224                           
  3225                           ;doprnt.c: 1237: prec--;
  3226  001E16  066B               	decf	sprintf@prec,f,c
  3227  001E18  A0D8               	btfss	status,0,c
  3228  001E1A  066C               	decf	sprintf@prec+1,f,c
  3229  001E1C  D000               	goto	l3868
  3230  001E1E                     l3868:
  3231  001E1E  506B               	movf	sprintf@prec,w,c
  3232  001E20  106C               	iorwf	sprintf@prec+1,w,c
  3233  001E22  B4D8               	btfsc	status,2,c
  3234  001E24  D040               	goto	l3890
  3235  001E26  D7EF               	goto	l3862
  3236                           
  3237                           ;doprnt.c: 1238: }
  3238                           ;doprnt.c: 1245: continue;
  3239  001E28  D03E               	goto	l3890
  3240  001E2A                     l3870:
  3241                           
  3242                           ;doprnt.c: 1246: }
  3243                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3244  001E2A  506B               	movf	sprintf@prec,w,c
  3245  001E2C  106C               	iorwf	sprintf@prec+1,w,c
  3246  001E2E  A4D8               	btfss	status,2,c
  3247  001E30  D009               	goto	l3876
  3248  001E32  5065               	movf	sprintf@val,w,c
  3249  001E34  1066               	iorwf	sprintf@val+1,w,c
  3250  001E36  1067               	iorwf	sprintf@val+2,w,c
  3251  001E38  1068               	iorwf	sprintf@val+3,w,c
  3252  001E3A  A4D8               	btfss	status,2,c
  3253  001E3C  D003               	goto	l3876
  3254                           
  3255                           ;doprnt.c: 1291: prec++;
  3256  001E3E  4A6B               	infsnz	sprintf@prec,f,c
  3257  001E40  2A6C               	incf	sprintf@prec+1,f,c
  3258  001E42  D000               	goto	l3876
  3259  001E44                     l3876:
  3260                           
  3261                           ;doprnt.c: 1339: if(c < prec)
  3262  001E44  0E80               	movlw	128
  3263  001E46  BE70               	btfsc	sprintf@c,7,c
  3264  001E48  0E7F               	movlw	127
  3265  001E4A  6E51               	movwf	??_sprintf& (0+255),c
  3266  001E4C  506B               	movf	sprintf@prec,w,c
  3267  001E4E  5C70               	subwf	sprintf@c,w,c
  3268  001E50  506C               	movf	sprintf@prec+1,w,c
  3269  001E52  0A80               	xorlw	128
  3270  001E54  5851               	subwfb	??_sprintf& (0+255),w,c
  3271  001E56  B0D8               	btfsc	status,0,c
  3272  001E58  D003               	goto	l3880
  3273                           
  3274                           ;doprnt.c: 1340: c = prec;
  3275  001E5A  C06B  F070         	movff	sprintf@prec,sprintf@c
  3276  001E5E  D011               	goto	l3884
  3277  001E60                     l3880:
  3278                           
  3279                           ;doprnt.c: 1341: else if(prec < c)
  3280  001E60  506C               	movf	sprintf@prec+1,w,c
  3281  001E62  0A80               	xorlw	128
  3282  001E64  6E51               	movwf	??_sprintf& (0+255),c
  3283  001E66  5070               	movf	sprintf@c,w,c
  3284  001E68  5C6B               	subwf	sprintf@prec,w,c
  3285  001E6A  0E80               	movlw	128
  3286  001E6C  BE70               	btfsc	sprintf@c,7,c
  3287  001E6E  0E7F               	movlw	127
  3288  001E70  5851               	subwfb	??_sprintf& (0+255),w,c
  3289  001E72  B0D8               	btfsc	status,0,c
  3290  001E74  D006               	goto	l3884
  3291                           
  3292                           ;doprnt.c: 1342: prec = c;
  3293  001E76  5070               	movf	sprintf@c,w,c
  3294  001E78  6E6B               	movwf	sprintf@prec,c
  3295  001E7A  6A6C               	clrf	sprintf@prec+1,c
  3296  001E7C  BE6B               	btfsc	sprintf@prec,7,c
  3297  001E7E  066C               	decf	sprintf@prec+1,f,c
  3298  001E80  D000               	goto	l3884
  3299  001E82                     l3884:
  3300                           
  3301                           ;doprnt.c: 1422: {
  3302                           ;doprnt.c: 1438: if(flag & 0x03)
  3303  001E82  0E03               	movlw	3
  3304  001E84  145F               	andwf	sprintf@flag,w,c
  3305  001E86  6E51               	movwf	??_sprintf& (0+255),c
  3306  001E88  0E00               	movlw	0
  3307  001E8A  1460               	andwf	sprintf@flag+1,w,c
  3308  001E8C  6E52               	movwf	(??_sprintf+1)& (0+255),c
  3309  001E8E  5051               	movf	??_sprintf,w,c
  3310  001E90  1052               	iorwf	??_sprintf+1,w,c
  3311  001E92  B4D8               	btfsc	status,2,c
  3312  001E94  D008               	goto	l3890
  3313                           
  3314                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3315  001E96  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3316  001E9A  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3317  001E9E  0E2D               	movlw	45
  3318  001EA0                     L2:
  3319  001EA0  6EDF               	movwf	indf2,c
  3320  001EA2  D49D               	goto	l3728
  3321  001EA4  D000               	goto	l3890
  3322  001EA6                     l3890:
  3323  001EA6  C04C  FFF6         	movff	sprintf@f,tblptrl
  3324  001EAA  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  3325  001EAE  4A4C               	infsnz	sprintf@f,f,c
  3326  001EB0  2A4D               	incf	sprintf@f+1,f,c
  3327  001EB2                     	if	0	;tblptru may be non-zero
  3328  001EB2                     	endif
  3329  001EB2                     	if	0	;tblptru may be non-zero
  3330  001EB2                     	endif
  3331  001EB2  0008               	tblrd		*
  3332  001EB4  CFF5 F070          	movff	tablat,sprintf@c
  3333  001EB8  5070               	movf	sprintf@c,w,c
  3334  001EBA  B4D8               	btfsc	status,2,c
  3335  001EBC  D003               	goto	l3892
  3336  001EBE  EF79  F008         	goto	l3552
  3337  001EC2  D000               	goto	l3892
  3338  001EC4                     l3892:
  3339                           
  3340                           ;doprnt.c: 1538: *sp = 0;
  3341  001EC4  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3342  001EC8  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3343  001ECC  0E00               	movlw	0
  3344  001ECE  6EDF               	movwf	indf2,c
  3345  001ED0  D000               	goto	l277
  3346  001ED2                     l277:
  3347  001ED2  0012               	return		;funcret
  3348  001ED4                     __end_of_sprintf:
  3349                           	opt stack 0
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _scale *****************
  3366 ;; Defined at:
  3367 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  scl             1    wreg     char 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  scl             1   48[COMRAM] char 
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  3   42[COMRAM] char 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3381 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;Total ram usage:        7 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    2
  3388 ;; This function calls:
  3389 ;;		___awdiv
  3390 ;;		___awmod
  3391 ;;		___ftmul
  3392 ;;		___wmul
  3393 ;; This function is called by:
  3394 ;;		_sprintf
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text2
  3399  001ED4                     __ptext2:
  3400                           	opt stack 0
  3401  001ED4                     _scale:
  3402                           	opt stack 27
  3403                           
  3404                           ;incstack = 0
  3405                           ;scale@scl stored from wreg
  3406  001ED4  6E31               	movwf	scale@scl,c
  3407                           
  3408                           ;doprnt.c: 428: if(scl < 0) {
  3409  001ED6  AE31               	btfss	scale@scl,7,c
  3410  001ED8  D0EF               	goto	l3080
  3411                           
  3412                           ;doprnt.c: 429: scl = -scl;
  3413  001EDA  6C31               	negf	scale@scl,c
  3414                           
  3415                           ;doprnt.c: 430: if(scl>=110)
  3416  001EDC  5031               	movf	scale@scl,w,c
  3417  001EDE  0A80               	xorlw	128
  3418  001EE0  0F12               	addlw	-238
  3419  001EE2  A0D8               	btfss	status,0,c
  3420  001EE4  D08D               	goto	l3070
  3421                           
  3422                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3423  001EE6  0E00               	movlw	0
  3424  001EE8  6E12               	movwf	___wmul@multiplicand+1,c
  3425  001EEA  0E03               	movlw	3
  3426  001EEC  6E11               	movwf	___wmul@multiplicand,c
  3427  001EEE  0E00               	movlw	0
  3428  001EF0  6E0A               	movwf	___awdiv@divisor+1,c
  3429  001EF2  0E0A               	movlw	10
  3430  001EF4  6E09               	movwf	___awdiv@divisor,c
  3431  001EF6  0E00               	movlw	0
  3432  001EF8  6E04               	movwf	___awmod@divisor+1,c
  3433  001EFA  0E64               	movlw	100
  3434  001EFC  6E03               	movwf	___awmod@divisor,c
  3435  001EFE  5031               	movf	scale@scl,w,c
  3436  001F00  6E01               	movwf	___awmod@dividend,c
  3437  001F02  6A02               	clrf	___awmod@dividend+1,c
  3438  001F04  BE01               	btfsc	___awmod@dividend,7,c
  3439  001F06  0602               	decf	___awmod@dividend+1,f,c
  3440  001F08  ECE4  F019         	call	___awmod	;wreg free
  3441  001F0C  C001  F007         	movff	?___awmod,___awdiv@dividend
  3442  001F10  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3443  001F14  EC08  F019         	call	___awdiv	;wreg free
  3444  001F18  0E09               	movlw	9
  3445  001F1A  2407               	addwf	?___awdiv,w,c
  3446  001F1C  6E0F               	movwf	___wmul@multiplier,c
  3447  001F1E  0E00               	movlw	0
  3448  001F20  2008               	addwfc	?___awdiv+1,w,c
  3449  001F22  6E10               	movwf	___wmul@multiplier+1,c
  3450  001F24  EC2D  F01C         	call	___wmul	;wreg free
  3451  001F28  0E29               	movlw	low __npowers_
  3452  001F2A  240F               	addwf	?___wmul,w,c
  3453  001F2C  6EF6               	movwf	tblptrl,c
  3454  001F2E  0E10               	movlw	high __npowers_
  3455  001F30  2010               	addwfc	?___wmul+1,w,c
  3456  001F32  6EF7               	movwf	tblptrh,c
  3457  001F34                     	if	0	;There are less than 3 active tblptr bytes
  3458  001F34                     	endif
  3459  001F34  0009               	tblrd		*+
  3460  001F36  CFF5 F01F          	movff	tablat,___ftmul@f2
  3461  001F3A  0009               	tblrd		*+
  3462  001F3C  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3463  001F40  000A               	tblrd		*-
  3464  001F42  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3465  001F46  0E00               	movlw	0
  3466  001F48  6E0A               	movwf	___awdiv@divisor+1,c
  3467  001F4A  0E64               	movlw	100
  3468  001F4C  6E09               	movwf	___awdiv@divisor,c
  3469  001F4E  5031               	movf	scale@scl,w,c
  3470  001F50  6E07               	movwf	___awdiv@dividend,c
  3471  001F52  6A08               	clrf	___awdiv@dividend+1,c
  3472  001F54  BE07               	btfsc	___awdiv@dividend,7,c
  3473  001F56  0608               	decf	___awdiv@dividend+1,f,c
  3474  001F58  EC08  F019         	call	___awdiv	;wreg free
  3475  001F5C  0E12               	movlw	18
  3476  001F5E  2407               	addwf	?___awdiv,w,c
  3477  001F60  6E0F               	movwf	___wmul@multiplier,c
  3478  001F62  0E00               	movlw	0
  3479  001F64  2008               	addwfc	?___awdiv+1,w,c
  3480  001F66  6E10               	movwf	___wmul@multiplier+1,c
  3481  001F68  0E00               	movlw	0
  3482  001F6A  6E12               	movwf	___wmul@multiplicand+1,c
  3483  001F6C  0E03               	movlw	3
  3484  001F6E  6E11               	movwf	___wmul@multiplicand,c
  3485  001F70  EC2D  F01C         	call	___wmul	;wreg free
  3486  001F74  0E29               	movlw	low __npowers_
  3487  001F76  240F               	addwf	?___wmul,w,c
  3488  001F78  6EF6               	movwf	tblptrl,c
  3489  001F7A  0E10               	movlw	high __npowers_
  3490  001F7C  2010               	addwfc	?___wmul+1,w,c
  3491  001F7E  6EF7               	movwf	tblptrh,c
  3492  001F80                     	if	0	;There are less than 3 active tblptr bytes
  3493  001F80                     	endif
  3494  001F80  0009               	tblrd		*+
  3495  001F82  CFF5 F01C          	movff	tablat,___ftmul@f1
  3496  001F86  0009               	tblrd		*+
  3497  001F88  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3498  001F8C  000A               	tblrd		*-
  3499  001F8E  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3500  001F92  EC20  F016         	call	___ftmul	;wreg free
  3501  001F96  C01C  F02E         	movff	?___ftmul,_scale$1769
  3502  001F9A  C01D  F02F         	movff	?___ftmul+1,_scale$1769+1
  3503  001F9E  C01E  F030         	movff	?___ftmul+2,_scale$1769+2
  3504                           
  3505                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3506  001FA2  C02E  F01C         	movff	_scale$1769,___ftmul@f1
  3507  001FA6  C02F  F01D         	movff	_scale$1769+1,___ftmul@f1+1
  3508  001FAA  C030  F01E         	movff	_scale$1769+2,___ftmul@f1+2
  3509  001FAE  0E00               	movlw	0
  3510  001FB0  6E12               	movwf	___wmul@multiplicand+1,c
  3511  001FB2  0E03               	movlw	3
  3512  001FB4  6E11               	movwf	___wmul@multiplicand,c
  3513  001FB6  0E00               	movlw	0
  3514  001FB8  6E04               	movwf	___awmod@divisor+1,c
  3515  001FBA  0E0A               	movlw	10
  3516  001FBC  6E03               	movwf	___awmod@divisor,c
  3517  001FBE  5031               	movf	scale@scl,w,c
  3518  001FC0  6E01               	movwf	___awmod@dividend,c
  3519  001FC2  6A02               	clrf	___awmod@dividend+1,c
  3520  001FC4  BE01               	btfsc	___awmod@dividend,7,c
  3521  001FC6  0602               	decf	___awmod@dividend+1,f,c
  3522  001FC8  ECE4  F019         	call	___awmod	;wreg free
  3523  001FCC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3524  001FD0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3525  001FD4  EC2D  F01C         	call	___wmul	;wreg free
  3526  001FD8  0E29               	movlw	low __npowers_
  3527  001FDA  240F               	addwf	?___wmul,w,c
  3528  001FDC  6EF6               	movwf	tblptrl,c
  3529  001FDE  0E10               	movlw	high __npowers_
  3530  001FE0  2010               	addwfc	?___wmul+1,w,c
  3531  001FE2  6EF7               	movwf	tblptrh,c
  3532  001FE4                     	if	0	;There are less than 3 active tblptr bytes
  3533  001FE4                     	endif
  3534  001FE4  0009               	tblrd		*+
  3535  001FE6  CFF5 F01F          	movff	tablat,___ftmul@f2
  3536  001FEA  0009               	tblrd		*+
  3537  001FEC  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3538  001FF0  000A               	tblrd		*-
  3539  001FF2  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3540  001FF6  EC20  F016         	call	___ftmul	;wreg free
  3541  001FFA  D141               	goto	L8
  3542  001FFC  D15A               	goto	l175
  3543  001FFE  D054               	goto	l3076
  3544  002000                     l3070:
  3545                           
  3546                           ;doprnt.c: 432: else if(scl > 10)
  3547  002000  5031               	movf	scale@scl,w,c
  3548  002002  0A80               	xorlw	128
  3549  002004  0F75               	addlw	-139
  3550  002006  A0D8               	btfss	status,0,c
  3551  002008  D04F               	goto	l3076
  3552                           
  3553                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3554  00200A  0E00               	movlw	0
  3555  00200C  6E0A               	movwf	___awdiv@divisor+1,c
  3556  00200E  0E0A               	movlw	10
  3557  002010  6E09               	movwf	___awdiv@divisor,c
  3558  002012  5031               	movf	scale@scl,w,c
  3559  002014  6E07               	movwf	___awdiv@dividend,c
  3560  002016  6A08               	clrf	___awdiv@dividend+1,c
  3561  002018  BE07               	btfsc	___awdiv@dividend,7,c
  3562  00201A  0608               	decf	___awdiv@dividend+1,f,c
  3563  00201C  EC08  F019         	call	___awdiv	;wreg free
  3564  002020  0E09               	movlw	9
  3565  002022  2407               	addwf	?___awdiv,w,c
  3566  002024  6E0F               	movwf	___wmul@multiplier,c
  3567  002026  0E00               	movlw	0
  3568  002028  2008               	addwfc	?___awdiv+1,w,c
  3569  00202A  6E10               	movwf	___wmul@multiplier+1,c
  3570  00202C  0E00               	movlw	0
  3571  00202E  6E12               	movwf	___wmul@multiplicand+1,c
  3572  002030  0E03               	movlw	3
  3573  002032  6E11               	movwf	___wmul@multiplicand,c
  3574  002034  EC2D  F01C         	call	___wmul	;wreg free
  3575  002038  0E29               	movlw	low __npowers_
  3576  00203A  240F               	addwf	?___wmul,w,c
  3577  00203C  6EF6               	movwf	tblptrl,c
  3578  00203E  0E10               	movlw	high __npowers_
  3579  002040  2010               	addwfc	?___wmul+1,w,c
  3580  002042  6EF7               	movwf	tblptrh,c
  3581  002044                     	if	0	;There are less than 3 active tblptr bytes
  3582  002044                     	endif
  3583  002044  0009               	tblrd		*+
  3584  002046  CFF5 F01C          	movff	tablat,___ftmul@f1
  3585  00204A  0009               	tblrd		*+
  3586  00204C  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3587  002050  000A               	tblrd		*-
  3588  002052  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3589  002056  0E00               	movlw	0
  3590  002058  6E12               	movwf	___wmul@multiplicand+1,c
  3591  00205A  0E03               	movlw	3
  3592  00205C  6E11               	movwf	___wmul@multiplicand,c
  3593  00205E  0E00               	movlw	0
  3594  002060  6E04               	movwf	___awmod@divisor+1,c
  3595  002062  0E0A               	movlw	10
  3596  002064  6E03               	movwf	___awmod@divisor,c
  3597  002066  5031               	movf	scale@scl,w,c
  3598  002068  6E01               	movwf	___awmod@dividend,c
  3599  00206A  6A02               	clrf	___awmod@dividend+1,c
  3600  00206C  BE01               	btfsc	___awmod@dividend,7,c
  3601  00206E  0602               	decf	___awmod@dividend+1,f,c
  3602  002070  ECE4  F019         	call	___awmod	;wreg free
  3603  002074  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3604  002078  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3605  00207C  EC2D  F01C         	call	___wmul	;wreg free
  3606  002080  0E29               	movlw	low __npowers_
  3607  002082  240F               	addwf	?___wmul,w,c
  3608  002084  6EF6               	movwf	tblptrl,c
  3609  002086  0E10               	movlw	high __npowers_
  3610  002088  2010               	addwfc	?___wmul+1,w,c
  3611  00208A  6EF7               	movwf	tblptrh,c
  3612  00208C                     	if	0	;There are less than 3 active tblptr bytes
  3613  00208C                     	endif
  3614  00208C  0009               	tblrd		*+
  3615  00208E  CFF5 F01F          	movff	tablat,___ftmul@f2
  3616  002092  0009               	tblrd		*+
  3617  002094  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3618  002098  000A               	tblrd		*-
  3619  00209A  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3620  00209E  EC20  F016         	call	___ftmul	;wreg free
  3621  0020A2  D0ED               	goto	L8
  3622  0020A4  D106               	goto	l175
  3623  0020A6  D000               	goto	l3076
  3624  0020A8                     l3076:
  3625                           
  3626                           ;doprnt.c: 434: return _npowers_[scl];
  3627  0020A8  5031               	movf	scale@scl,w,c
  3628  0020AA  0D03               	mullw	3
  3629  0020AC  0E29               	movlw	low __npowers_
  3630  0020AE  24F3               	addwf	prodl,w,c
  3631  0020B0  6EF6               	movwf	tblptrl,c
  3632  0020B2  0E10               	movlw	high __npowers_
  3633  0020B4  D0F2               	goto	L7
  3634  0020B6  D0FD               	goto	l175
  3635  0020B8                     l3080:
  3636                           
  3637                           ;doprnt.c: 435: }
  3638                           ;doprnt.c: 436: if(scl>=110)
  3639  0020B8  5031               	movf	scale@scl,w,c
  3640  0020BA  0A80               	xorlw	128
  3641  0020BC  0F12               	addlw	-238
  3642  0020BE  A0D8               	btfss	status,0,c
  3643  0020C0  D08D               	goto	l3088
  3644                           
  3645                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3646  0020C2  0E00               	movlw	0
  3647  0020C4  6E12               	movwf	___wmul@multiplicand+1,c
  3648  0020C6  0E03               	movlw	3
  3649  0020C8  6E11               	movwf	___wmul@multiplicand,c
  3650  0020CA  0E00               	movlw	0
  3651  0020CC  6E0A               	movwf	___awdiv@divisor+1,c
  3652  0020CE  0E0A               	movlw	10
  3653  0020D0  6E09               	movwf	___awdiv@divisor,c
  3654  0020D2  0E00               	movlw	0
  3655  0020D4  6E04               	movwf	___awmod@divisor+1,c
  3656  0020D6  0E64               	movlw	100
  3657  0020D8  6E03               	movwf	___awmod@divisor,c
  3658  0020DA  5031               	movf	scale@scl,w,c
  3659  0020DC  6E01               	movwf	___awmod@dividend,c
  3660  0020DE  6A02               	clrf	___awmod@dividend+1,c
  3661  0020E0  BE01               	btfsc	___awmod@dividend,7,c
  3662  0020E2  0602               	decf	___awmod@dividend+1,f,c
  3663  0020E4  ECE4  F019         	call	___awmod	;wreg free
  3664  0020E8  C001  F007         	movff	?___awmod,___awdiv@dividend
  3665  0020EC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3666  0020F0  EC08  F019         	call	___awdiv	;wreg free
  3667  0020F4  0E09               	movlw	9
  3668  0020F6  2407               	addwf	?___awdiv,w,c
  3669  0020F8  6E0F               	movwf	___wmul@multiplier,c
  3670  0020FA  0E00               	movlw	0
  3671  0020FC  2008               	addwfc	?___awdiv+1,w,c
  3672  0020FE  6E10               	movwf	___wmul@multiplier+1,c
  3673  002100  EC2D  F01C         	call	___wmul	;wreg free
  3674  002104  0E50               	movlw	low __powers_
  3675  002106  240F               	addwf	?___wmul,w,c
  3676  002108  6EF6               	movwf	tblptrl,c
  3677  00210A  0E10               	movlw	high __powers_
  3678  00210C  2010               	addwfc	?___wmul+1,w,c
  3679  00210E  6EF7               	movwf	tblptrh,c
  3680  002110                     	if	0	;There are less than 3 active tblptr bytes
  3681  002110                     	endif
  3682  002110  0009               	tblrd		*+
  3683  002112  CFF5 F01F          	movff	tablat,___ftmul@f2
  3684  002116  0009               	tblrd		*+
  3685  002118  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3686  00211C  000A               	tblrd		*-
  3687  00211E  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3688  002122  0E00               	movlw	0
  3689  002124  6E0A               	movwf	___awdiv@divisor+1,c
  3690  002126  0E64               	movlw	100
  3691  002128  6E09               	movwf	___awdiv@divisor,c
  3692  00212A  5031               	movf	scale@scl,w,c
  3693  00212C  6E07               	movwf	___awdiv@dividend,c
  3694  00212E  6A08               	clrf	___awdiv@dividend+1,c
  3695  002130  BE07               	btfsc	___awdiv@dividend,7,c
  3696  002132  0608               	decf	___awdiv@dividend+1,f,c
  3697  002134  EC08  F019         	call	___awdiv	;wreg free
  3698  002138  0E12               	movlw	18
  3699  00213A  2407               	addwf	?___awdiv,w,c
  3700  00213C  6E0F               	movwf	___wmul@multiplier,c
  3701  00213E  0E00               	movlw	0
  3702  002140  2008               	addwfc	?___awdiv+1,w,c
  3703  002142  6E10               	movwf	___wmul@multiplier+1,c
  3704  002144  0E00               	movlw	0
  3705  002146  6E12               	movwf	___wmul@multiplicand+1,c
  3706  002148  0E03               	movlw	3
  3707  00214A  6E11               	movwf	___wmul@multiplicand,c
  3708  00214C  EC2D  F01C         	call	___wmul	;wreg free
  3709  002150  0E50               	movlw	low __powers_
  3710  002152  240F               	addwf	?___wmul,w,c
  3711  002154  6EF6               	movwf	tblptrl,c
  3712  002156  0E10               	movlw	high __powers_
  3713  002158  2010               	addwfc	?___wmul+1,w,c
  3714  00215A  6EF7               	movwf	tblptrh,c
  3715  00215C                     	if	0	;There are less than 3 active tblptr bytes
  3716  00215C                     	endif
  3717  00215C  0009               	tblrd		*+
  3718  00215E  CFF5 F01C          	movff	tablat,___ftmul@f1
  3719  002162  0009               	tblrd		*+
  3720  002164  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3721  002168  000A               	tblrd		*-
  3722  00216A  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3723  00216E  EC20  F016         	call	___ftmul	;wreg free
  3724  002172  C01C  F02E         	movff	?___ftmul,_scale$1769
  3725  002176  C01D  F02F         	movff	?___ftmul+1,_scale$1769+1
  3726  00217A  C01E  F030         	movff	?___ftmul+2,_scale$1769+2
  3727                           
  3728                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3729  00217E  C02E  F01C         	movff	_scale$1769,___ftmul@f1
  3730  002182  C02F  F01D         	movff	_scale$1769+1,___ftmul@f1+1
  3731  002186  C030  F01E         	movff	_scale$1769+2,___ftmul@f1+2
  3732  00218A  0E00               	movlw	0
  3733  00218C  6E12               	movwf	___wmul@multiplicand+1,c
  3734  00218E  0E03               	movlw	3
  3735  002190  6E11               	movwf	___wmul@multiplicand,c
  3736  002192  0E00               	movlw	0
  3737  002194  6E04               	movwf	___awmod@divisor+1,c
  3738  002196  0E0A               	movlw	10
  3739  002198  6E03               	movwf	___awmod@divisor,c
  3740  00219A  5031               	movf	scale@scl,w,c
  3741  00219C  6E01               	movwf	___awmod@dividend,c
  3742  00219E  6A02               	clrf	___awmod@dividend+1,c
  3743  0021A0  BE01               	btfsc	___awmod@dividend,7,c
  3744  0021A2  0602               	decf	___awmod@dividend+1,f,c
  3745  0021A4  ECE4  F019         	call	___awmod	;wreg free
  3746  0021A8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3747  0021AC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3748  0021B0  EC2D  F01C         	call	___wmul	;wreg free
  3749  0021B4  0E50               	movlw	low __powers_
  3750  0021B6  240F               	addwf	?___wmul,w,c
  3751  0021B8  6EF6               	movwf	tblptrl,c
  3752  0021BA  0E10               	movlw	high __powers_
  3753  0021BC  2010               	addwfc	?___wmul+1,w,c
  3754  0021BE  6EF7               	movwf	tblptrh,c
  3755  0021C0                     	if	0	;There are less than 3 active tblptr bytes
  3756  0021C0                     	endif
  3757  0021C0  0009               	tblrd		*+
  3758  0021C2  CFF5 F01F          	movff	tablat,___ftmul@f2
  3759  0021C6  0009               	tblrd		*+
  3760  0021C8  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3761  0021CC  000A               	tblrd		*-
  3762  0021CE  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3763  0021D2  EC20  F016         	call	___ftmul	;wreg free
  3764  0021D6  D053               	goto	L8
  3765  0021D8  D06C               	goto	l175
  3766  0021DA  D059               	goto	l3094
  3767  0021DC                     l3088:
  3768                           
  3769                           ;doprnt.c: 438: else if(scl > 10)
  3770  0021DC  5031               	movf	scale@scl,w,c
  3771  0021DE  0A80               	xorlw	128
  3772  0021E0  0F75               	addlw	-139
  3773  0021E2  A0D8               	btfss	status,0,c
  3774  0021E4  D054               	goto	l3094
  3775                           
  3776                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3777  0021E6  0E00               	movlw	0
  3778  0021E8  6E0A               	movwf	___awdiv@divisor+1,c
  3779  0021EA  0E0A               	movlw	10
  3780  0021EC  6E09               	movwf	___awdiv@divisor,c
  3781  0021EE  5031               	movf	scale@scl,w,c
  3782  0021F0  6E07               	movwf	___awdiv@dividend,c
  3783  0021F2  6A08               	clrf	___awdiv@dividend+1,c
  3784  0021F4  BE07               	btfsc	___awdiv@dividend,7,c
  3785  0021F6  0608               	decf	___awdiv@dividend+1,f,c
  3786  0021F8  EC08  F019         	call	___awdiv	;wreg free
  3787  0021FC  0E09               	movlw	9
  3788  0021FE  2407               	addwf	?___awdiv,w,c
  3789  002200  6E0F               	movwf	___wmul@multiplier,c
  3790  002202  0E00               	movlw	0
  3791  002204  2008               	addwfc	?___awdiv+1,w,c
  3792  002206  6E10               	movwf	___wmul@multiplier+1,c
  3793  002208  0E00               	movlw	0
  3794  00220A  6E12               	movwf	___wmul@multiplicand+1,c
  3795  00220C  0E03               	movlw	3
  3796  00220E  6E11               	movwf	___wmul@multiplicand,c
  3797  002210  EC2D  F01C         	call	___wmul	;wreg free
  3798  002214  0E50               	movlw	low __powers_
  3799  002216  240F               	addwf	?___wmul,w,c
  3800  002218  6EF6               	movwf	tblptrl,c
  3801  00221A  0E10               	movlw	high __powers_
  3802  00221C  2010               	addwfc	?___wmul+1,w,c
  3803  00221E  6EF7               	movwf	tblptrh,c
  3804  002220                     	if	0	;There are less than 3 active tblptr bytes
  3805  002220                     	endif
  3806  002220  0009               	tblrd		*+
  3807  002222  CFF5 F01C          	movff	tablat,___ftmul@f1
  3808  002226  0009               	tblrd		*+
  3809  002228  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3810  00222C  000A               	tblrd		*-
  3811  00222E  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3812  002232  0E00               	movlw	0
  3813  002234  6E12               	movwf	___wmul@multiplicand+1,c
  3814  002236  0E03               	movlw	3
  3815  002238  6E11               	movwf	___wmul@multiplicand,c
  3816  00223A  0E00               	movlw	0
  3817  00223C  6E04               	movwf	___awmod@divisor+1,c
  3818  00223E  0E0A               	movlw	10
  3819  002240  6E03               	movwf	___awmod@divisor,c
  3820  002242  5031               	movf	scale@scl,w,c
  3821  002244  6E01               	movwf	___awmod@dividend,c
  3822  002246  6A02               	clrf	___awmod@dividend+1,c
  3823  002248  BE01               	btfsc	___awmod@dividend,7,c
  3824  00224A  0602               	decf	___awmod@dividend+1,f,c
  3825  00224C  ECE4  F019         	call	___awmod	;wreg free
  3826  002250  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3827  002254  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3828  002258  EC2D  F01C         	call	___wmul	;wreg free
  3829  00225C  0E50               	movlw	low __powers_
  3830  00225E  240F               	addwf	?___wmul,w,c
  3831  002260  6EF6               	movwf	tblptrl,c
  3832  002262  0E10               	movlw	high __powers_
  3833  002264  2010               	addwfc	?___wmul+1,w,c
  3834  002266  6EF7               	movwf	tblptrh,c
  3835  002268                     	if	0	;There are less than 3 active tblptr bytes
  3836  002268                     	endif
  3837  002268  0009               	tblrd		*+
  3838  00226A  CFF5 F01F          	movff	tablat,___ftmul@f2
  3839  00226E  0009               	tblrd		*+
  3840  002270  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3841  002274  000A               	tblrd		*-
  3842  002276  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3843  00227A  EC20  F016         	call	___ftmul	;wreg free
  3844  00227E                     L8:
  3845  00227E  C01C  F02B         	movff	?___ftmul,?_scale
  3846  002282  C01D  F02C         	movff	?___ftmul+1,?_scale+1
  3847  002286  C01E  F02D         	movff	?___ftmul+2,?_scale+2
  3848  00228A  D013               	goto	l175
  3849  00228C  D000               	goto	l3094
  3850  00228E                     l3094:
  3851                           
  3852                           ;doprnt.c: 440: return _powers_[scl];
  3853  00228E  5031               	movf	scale@scl,w,c
  3854  002290  0D03               	mullw	3
  3855  002292  0E50               	movlw	low __powers_
  3856  002294  24F3               	addwf	prodl,w,c
  3857  002296  6EF6               	movwf	tblptrl,c
  3858  002298  0E10               	movlw	high __powers_
  3859  00229A                     L7:
  3860  00229A  20F4               	addwfc	prodh,w,c
  3861  00229C  6EF7               	movwf	tblptrh,c
  3862  00229E                     	if	0	;There are less than 3 active tblptr bytes
  3863  00229E                     	endif
  3864  00229E  0009               	tblrd		*+
  3865  0022A0  CFF5 F02B          	movff	tablat,?_scale
  3866  0022A4  0009               	tblrd		*+
  3867  0022A6  CFF5 F02C          	movff	tablat,?_scale+1
  3868  0022AA  000A               	tblrd		*-
  3869  0022AC  CFF5 F02D          	movff	tablat,?_scale+2
  3870  0022B0  D000               	goto	l175
  3871  0022B2                     l175:
  3872  0022B2  0012               	return		;funcret
  3873  0022B4                     __end_of_scale:
  3874                           	opt stack 0
  3875                           tblptru	equ	0xFF8
  3876                           tblptrh	equ	0xFF7
  3877                           tblptrl	equ	0xFF6
  3878                           tablat	equ	0xFF5
  3879                           prodh	equ	0xFF4
  3880                           prodl	equ	0xFF3
  3881                           postinc0	equ	0xFEE
  3882                           wreg	equ	0xFE8
  3883                           indf2	equ	0xFDF
  3884                           postinc2	equ	0xFDE
  3885                           postdec2	equ	0xFDD
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function _isdigit *****************
  3891 ;; Defined at:
  3892 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  c               1    wreg     unsigned char 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  c               1    2[COMRAM] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;		None               void
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;Total ram usage:        3 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_sprintf
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text3
  3920  0038EE                     __ptext3:
  3921                           	opt stack 0
  3922  0038EE                     _isdigit:
  3923                           	opt stack 29
  3924                           
  3925                           ;incstack = 0
  3926                           ;isdigit@c stored from wreg
  3927  0038EE  6E03               	movwf	isdigit@c,c
  3928  0038F0  0E00               	movlw	0
  3929  0038F2  6E02               	movwf	_isdigit$1512,c
  3930  0038F4  0E3A               	movlw	58
  3931  0038F6  6003               	cpfslt	isdigit@c,c
  3932  0038F8  D006               	goto	l3106
  3933  0038FA  0E2F               	movlw	47
  3934  0038FC  6403               	cpfsgt	isdigit@c,c
  3935  0038FE  D003               	goto	l3106
  3936  003900  0E01               	movlw	1
  3937  003902  6E02               	movwf	_isdigit$1512,c
  3938  003904  D000               	goto	l3106
  3939  003906                     l3106:
  3940  003906  C002  F001         	movff	_isdigit$1512,??_isdigit
  3941  00390A  3001               	rrcf	??_isdigit,w,c
  3942  00390C  D000               	goto	l913
  3943  00390E                     l913:
  3944  00390E  0012               	return		;funcret
  3945  003910                     __end_of_isdigit:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           indf2	equ	0xFDF
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function _fround *****************
  3963 ;; Defined at:
  3964 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  prec            1    wreg     unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  prec            1   51[COMRAM] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  3   42[COMRAM] unsigned char 
  3971 ;; Registers used:
  3972 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3978 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;Total ram usage:       10 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    2
  3985 ;; This function calls:
  3986 ;;		___awdiv
  3987 ;;		___awmod
  3988 ;;		___ftmul
  3989 ;;		___wmul
  3990 ;; This function is called by:
  3991 ;;		_sprintf
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text4
  3996  00261E                     __ptext4:
  3997                           	opt stack 0
  3998  00261E                     _fround:
  3999                           	opt stack 27
  4000                           
  4001                           ;incstack = 0
  4002                           ;fround@prec stored from wreg
  4003  00261E  6E34               	movwf	fround@prec,c
  4004                           
  4005                           ;doprnt.c: 413: if(prec>=110)
  4006  002620  0E6D               	movlw	109
  4007  002622  6434               	cpfsgt	fround@prec,c
  4008  002624  D09B               	goto	l3048
  4009                           
  4010                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4011  002626  0E00               	movlw	0
  4012  002628  6E12               	movwf	___wmul@multiplicand+1,c
  4013  00262A  0E03               	movlw	3
  4014  00262C  6E11               	movwf	___wmul@multiplicand,c
  4015  00262E  0E00               	movlw	0
  4016  002630  6E0A               	movwf	___awdiv@divisor+1,c
  4017  002632  0E0A               	movlw	10
  4018  002634  6E09               	movwf	___awdiv@divisor,c
  4019  002636  0E00               	movlw	0
  4020  002638  6E04               	movwf	___awmod@divisor+1,c
  4021  00263A  0E64               	movlw	100
  4022  00263C  6E03               	movwf	___awmod@divisor,c
  4023  00263E  C034  F001         	movff	fround@prec,___awmod@dividend
  4024  002642  6A02               	clrf	___awmod@dividend+1,c
  4025  002644  ECE4  F019         	call	___awmod	;wreg free
  4026  002648  C001  F007         	movff	?___awmod,___awdiv@dividend
  4027  00264C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4028  002650  EC08  F019         	call	___awdiv	;wreg free
  4029  002654  0E09               	movlw	9
  4030  002656  2407               	addwf	?___awdiv,w,c
  4031  002658  6E0F               	movwf	___wmul@multiplier,c
  4032  00265A  0E00               	movlw	0
  4033  00265C  2008               	addwfc	?___awdiv+1,w,c
  4034  00265E  6E10               	movwf	___wmul@multiplier+1,c
  4035  002660  EC2D  F01C         	call	___wmul	;wreg free
  4036  002664  0E29               	movlw	low __npowers_
  4037  002666  240F               	addwf	?___wmul,w,c
  4038  002668  6EF6               	movwf	tblptrl,c
  4039  00266A  0E10               	movlw	high __npowers_
  4040  00266C  2010               	addwfc	?___wmul+1,w,c
  4041  00266E  6EF7               	movwf	tblptrh,c
  4042  002670                     	if	0	;There are less than 3 active tblptr bytes
  4043  002670                     	endif
  4044  002670  0009               	tblrd		*+
  4045  002672  CFF5 F01F          	movff	tablat,___ftmul@f2
  4046  002676  0009               	tblrd		*+
  4047  002678  CFF5 F020          	movff	tablat,___ftmul@f2+1
  4048  00267C  000A               	tblrd		*-
  4049  00267E  CFF5 F021          	movff	tablat,___ftmul@f2+2
  4050  002682  0E00               	movlw	0
  4051  002684  6E0A               	movwf	___awdiv@divisor+1,c
  4052  002686  0E64               	movlw	100
  4053  002688  6E09               	movwf	___awdiv@divisor,c
  4054  00268A  C034  F007         	movff	fround@prec,___awdiv@dividend
  4055  00268E  6A08               	clrf	___awdiv@dividend+1,c
  4056  002690  EC08  F019         	call	___awdiv	;wreg free
  4057  002694  0E12               	movlw	18
  4058  002696  2407               	addwf	?___awdiv,w,c
  4059  002698  6E0F               	movwf	___wmul@multiplier,c
  4060  00269A  0E00               	movlw	0
  4061  00269C  2008               	addwfc	?___awdiv+1,w,c
  4062  00269E  6E10               	movwf	___wmul@multiplier+1,c
  4063  0026A0  0E00               	movlw	0
  4064  0026A2  6E12               	movwf	___wmul@multiplicand+1,c
  4065  0026A4  0E03               	movlw	3
  4066  0026A6  6E11               	movwf	___wmul@multiplicand,c
  4067  0026A8  EC2D  F01C         	call	___wmul	;wreg free
  4068  0026AC  0E29               	movlw	low __npowers_
  4069  0026AE  240F               	addwf	?___wmul,w,c
  4070  0026B0  6EF6               	movwf	tblptrl,c
  4071  0026B2  0E10               	movlw	high __npowers_
  4072  0026B4  2010               	addwfc	?___wmul+1,w,c
  4073  0026B6  6EF7               	movwf	tblptrh,c
  4074  0026B8                     	if	0	;There are less than 3 active tblptr bytes
  4075  0026B8                     	endif
  4076  0026B8  0009               	tblrd		*+
  4077  0026BA  CFF5 F01C          	movff	tablat,___ftmul@f1
  4078  0026BE  0009               	tblrd		*+
  4079  0026C0  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  4080  0026C4  000A               	tblrd		*-
  4081  0026C6  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  4082  0026CA  EC20  F016         	call	___ftmul	;wreg free
  4083  0026CE  C01C  F031         	movff	?___ftmul,_fround$1767
  4084  0026D2  C01D  F032         	movff	?___ftmul+1,_fround$1767+1
  4085  0026D6  C01E  F033         	movff	?___ftmul+2,_fround$1767+2
  4086                           
  4087                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4088  0026DA  0E00               	movlw	0
  4089  0026DC  6E12               	movwf	___wmul@multiplicand+1,c
  4090  0026DE  0E03               	movlw	3
  4091  0026E0  6E11               	movwf	___wmul@multiplicand,c
  4092  0026E2  0E00               	movlw	0
  4093  0026E4  6E04               	movwf	___awmod@divisor+1,c
  4094  0026E6  0E0A               	movlw	10
  4095  0026E8  6E03               	movwf	___awmod@divisor,c
  4096  0026EA  C034  F001         	movff	fround@prec,___awmod@dividend
  4097  0026EE  6A02               	clrf	___awmod@dividend+1,c
  4098  0026F0  ECE4  F019         	call	___awmod	;wreg free
  4099  0026F4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4100  0026F8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4101  0026FC  EC2D  F01C         	call	___wmul	;wreg free
  4102  002700  0E29               	movlw	low __npowers_
  4103  002702  240F               	addwf	?___wmul,w,c
  4104  002704  6EF6               	movwf	tblptrl,c
  4105  002706  0E10               	movlw	high __npowers_
  4106  002708  2010               	addwfc	?___wmul+1,w,c
  4107  00270A  6EF7               	movwf	tblptrh,c
  4108  00270C                     	if	0	;There are less than 3 active tblptr bytes
  4109  00270C                     	endif
  4110  00270C  0009               	tblrd		*+
  4111  00270E  CFF5 F01F          	movff	tablat,___ftmul@f2
  4112  002712  0009               	tblrd		*+
  4113  002714  CFF5 F020          	movff	tablat,___ftmul@f2+1
  4114  002718  000A               	tblrd		*-
  4115  00271A  CFF5 F021          	movff	tablat,___ftmul@f2+2
  4116  00271E  C031  F01C         	movff	_fround$1767,___ftmul@f1
  4117  002722  C032  F01D         	movff	_fround$1767+1,___ftmul@f1+1
  4118  002726  C033  F01E         	movff	_fround$1767+2,___ftmul@f1+2
  4119  00272A  EC20  F016         	call	___ftmul	;wreg free
  4120  00272E  C01C  F02E         	movff	?___ftmul,_fround$1768
  4121  002732  C01D  F02F         	movff	?___ftmul+1,_fround$1768+1
  4122  002736  C01E  F030         	movff	?___ftmul+2,_fround$1768+2
  4123                           
  4124                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4125  00273A  C02E  F01C         	movff	_fround$1768,___ftmul@f1
  4126  00273E  C02F  F01D         	movff	_fround$1768+1,___ftmul@f1+1
  4127  002742  C030  F01E         	movff	_fround$1768+2,___ftmul@f1+2
  4128  002746  0E00               	movlw	0
  4129  002748  6E1F               	movwf	___ftmul@f2,c
  4130  00274A  0E00               	movlw	0
  4131  00274C  6E20               	movwf	___ftmul@f2+1,c
  4132  00274E  0E3F               	movlw	63
  4133  002750  6E21               	movwf	___ftmul@f2+2,c
  4134  002752  EC20  F016         	call	___ftmul	;wreg free
  4135  002756  D07D               	goto	L10
  4136  002758  D083               	goto	l168
  4137  00275A  D062               	goto	l3056
  4138  00275C                     l3048:
  4139                           
  4140                           ;doprnt.c: 415: else if(prec > 10)
  4141  00275C  0E0A               	movlw	10
  4142  00275E  6434               	cpfsgt	fround@prec,c
  4143  002760  D05F               	goto	l3056
  4144                           
  4145                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4146  002762  0E00               	movlw	0
  4147  002764  6E12               	movwf	___wmul@multiplicand+1,c
  4148  002766  0E03               	movlw	3
  4149  002768  6E11               	movwf	___wmul@multiplicand,c
  4150  00276A  0E00               	movlw	0
  4151  00276C  6E04               	movwf	___awmod@divisor+1,c
  4152  00276E  0E0A               	movlw	10
  4153  002770  6E03               	movwf	___awmod@divisor,c
  4154  002772  C034  F001         	movff	fround@prec,___awmod@dividend
  4155  002776  6A02               	clrf	___awmod@dividend+1,c
  4156  002778  ECE4  F019         	call	___awmod	;wreg free
  4157  00277C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4158  002780  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4159  002784  EC2D  F01C         	call	___wmul	;wreg free
  4160  002788  0E29               	movlw	low __npowers_
  4161  00278A  240F               	addwf	?___wmul,w,c
  4162  00278C  6EF6               	movwf	tblptrl,c
  4163  00278E  0E10               	movlw	high __npowers_
  4164  002790  2010               	addwfc	?___wmul+1,w,c
  4165  002792  6EF7               	movwf	tblptrh,c
  4166  002794                     	if	0	;There are less than 3 active tblptr bytes
  4167  002794                     	endif
  4168  002794  0009               	tblrd		*+
  4169  002796  CFF5 F01F          	movff	tablat,___ftmul@f2
  4170  00279A  0009               	tblrd		*+
  4171  00279C  CFF5 F020          	movff	tablat,___ftmul@f2+1
  4172  0027A0  000A               	tblrd		*-
  4173  0027A2  CFF5 F021          	movff	tablat,___ftmul@f2+2
  4174  0027A6  0E00               	movlw	0
  4175  0027A8  6E0A               	movwf	___awdiv@divisor+1,c
  4176  0027AA  0E0A               	movlw	10
  4177  0027AC  6E09               	movwf	___awdiv@divisor,c
  4178  0027AE  C034  F007         	movff	fround@prec,___awdiv@dividend
  4179  0027B2  6A08               	clrf	___awdiv@dividend+1,c
  4180  0027B4  EC08  F019         	call	___awdiv	;wreg free
  4181  0027B8  0E09               	movlw	9
  4182  0027BA  2407               	addwf	?___awdiv,w,c
  4183  0027BC  6E0F               	movwf	___wmul@multiplier,c
  4184  0027BE  0E00               	movlw	0
  4185  0027C0  2008               	addwfc	?___awdiv+1,w,c
  4186  0027C2  6E10               	movwf	___wmul@multiplier+1,c
  4187  0027C4  0E00               	movlw	0
  4188  0027C6  6E12               	movwf	___wmul@multiplicand+1,c
  4189  0027C8  0E03               	movlw	3
  4190  0027CA  6E11               	movwf	___wmul@multiplicand,c
  4191  0027CC  EC2D  F01C         	call	___wmul	;wreg free
  4192  0027D0  0E29               	movlw	low __npowers_
  4193  0027D2  240F               	addwf	?___wmul,w,c
  4194  0027D4  6EF6               	movwf	tblptrl,c
  4195  0027D6  0E10               	movlw	high __npowers_
  4196  0027D8  2010               	addwfc	?___wmul+1,w,c
  4197  0027DA  6EF7               	movwf	tblptrh,c
  4198  0027DC                     	if	0	;There are less than 3 active tblptr bytes
  4199  0027DC                     	endif
  4200  0027DC  0009               	tblrd		*+
  4201  0027DE  CFF5 F01C          	movff	tablat,___ftmul@f1
  4202  0027E2  0009               	tblrd		*+
  4203  0027E4  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  4204  0027E8  000A               	tblrd		*-
  4205  0027EA  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  4206  0027EE  EC20  F016         	call	___ftmul	;wreg free
  4207  0027F2  C01C  F031         	movff	?___ftmul,_fround$1767
  4208  0027F6  C01D  F032         	movff	?___ftmul+1,_fround$1767+1
  4209  0027FA  C01E  F033         	movff	?___ftmul+2,_fround$1767+2
  4210                           
  4211                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4212  0027FE  C031  F01C         	movff	_fround$1767,___ftmul@f1
  4213  002802  C032  F01D         	movff	_fround$1767+1,___ftmul@f1+1
  4214  002806  C033  F01E         	movff	_fround$1767+2,___ftmul@f1+2
  4215  00280A  0E00               	movlw	0
  4216  00280C  6E1F               	movwf	___ftmul@f2,c
  4217  00280E  0E00               	movlw	0
  4218  002810  6E20               	movwf	___ftmul@f2+1,c
  4219  002812  0E3F               	movlw	63
  4220  002814  6E21               	movwf	___ftmul@f2+2,c
  4221  002816  EC20  F016         	call	___ftmul	;wreg free
  4222  00281A  D01B               	goto	L10
  4223  00281C  D021               	goto	l168
  4224  00281E  D000               	goto	l3056
  4225  002820                     l3056:
  4226                           
  4227                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4228  002820  5034               	movf	fround@prec,w,c
  4229  002822  0D03               	mullw	3
  4230  002824  0E29               	movlw	low __npowers_
  4231  002826  24F3               	addwf	prodl,w,c
  4232  002828  6EF6               	movwf	tblptrl,c
  4233  00282A  0E10               	movlw	high __npowers_
  4234  00282C  20F4               	addwfc	prodh,w,c
  4235  00282E  6EF7               	movwf	tblptrh,c
  4236  002830                     	if	0	;There are less than 3 active tblptr bytes
  4237  002830                     	endif
  4238  002830  0009               	tblrd		*+
  4239  002832  CFF5 F01C          	movff	tablat,___ftmul@f1
  4240  002836  0009               	tblrd		*+
  4241  002838  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  4242  00283C  000A               	tblrd		*-
  4243  00283E  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  4244  002842  0E00               	movlw	0
  4245  002844  6E1F               	movwf	___ftmul@f2,c
  4246  002846  0E00               	movlw	0
  4247  002848  6E20               	movwf	___ftmul@f2+1,c
  4248  00284A  0E3F               	movlw	63
  4249  00284C  6E21               	movwf	___ftmul@f2+2,c
  4250  00284E  EC20  F016         	call	___ftmul	;wreg free
  4251  002852                     L10:
  4252  002852  C01C  F02B         	movff	?___ftmul,?_fround
  4253  002856  C01D  F02C         	movff	?___ftmul+1,?_fround+1
  4254  00285A  C01E  F02D         	movff	?___ftmul+2,?_fround+2
  4255  00285E  D000               	goto	l168
  4256  002860                     l168:
  4257  002860  0012               	return		;funcret
  4258  002862                     __end_of_fround:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           prodh	equ	0xFF4
  4265                           prodl	equ	0xFF3
  4266                           postinc0	equ	0xFEE
  4267                           wreg	equ	0xFE8
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           postdec2	equ	0xFDD
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function ___wmul *****************
  4276 ;; Defined at:
  4277 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  multiplier      2   14[COMRAM] unsigned int 
  4280 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  product         2   18[COMRAM] unsigned int 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  2   14[COMRAM] unsigned int 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, prodl, prodh
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4292 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;Total ram usage:        6 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_main
  4302 ;;		_fround
  4303 ;;		_scale
  4304 ;;		_sprintf
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text5
  4309  00385A                     __ptext5:
  4310                           	opt stack 0
  4311  00385A                     ___wmul:
  4312                           	opt stack 28
  4313                           
  4314                           ;incstack = 0
  4315  00385A  500F               	movf	___wmul@multiplier,w,c
  4316  00385C  0211               	mulwf	___wmul@multiplicand,c
  4317  00385E  CFF3 F013          	movff	prodl,___wmul@product
  4318  003862  CFF4 F014          	movff	prodh,___wmul@product+1
  4319  003866  500F               	movf	___wmul@multiplier,w,c
  4320  003868  0212               	mulwf	___wmul@multiplicand+1,c
  4321  00386A  50F3               	movf	prodl,w,c
  4322  00386C  2614               	addwf	___wmul@product+1,f,c
  4323  00386E  5010               	movf	___wmul@multiplier+1,w,c
  4324  003870  0211               	mulwf	___wmul@multiplicand,c
  4325  003872  50F3               	movf	prodl,w,c
  4326  003874  2614               	addwf	___wmul@product+1,f,c
  4327  003876  C013  F00F         	movff	___wmul@product,?___wmul
  4328  00387A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4329  00387E  D000               	goto	l427
  4330  003880                     l427:
  4331  003880  0012               	return		;funcret
  4332  003882                     __end_of___wmul:
  4333                           	opt stack 0
  4334                           tblptru	equ	0xFF8
  4335                           tblptrh	equ	0xFF7
  4336                           tblptrl	equ	0xFF6
  4337                           tablat	equ	0xFF5
  4338                           prodh	equ	0xFF4
  4339                           prodl	equ	0xFF3
  4340                           postinc0	equ	0xFEE
  4341                           wreg	equ	0xFE8
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function ___ftmul *****************
  4350 ;; Defined at:
  4351 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  f1              3   27[COMRAM] float 
  4354 ;;  f2              3   30[COMRAM] float 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4357 ;;  sign            1   41[COMRAM] unsigned char 
  4358 ;;  cntr            1   40[COMRAM] unsigned char 
  4359 ;;  exp             1   36[COMRAM] unsigned char 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  3   27[COMRAM] float 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2, status,0, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4369 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;Total ram usage:       15 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    1
  4376 ;; This function calls:
  4377 ;;		___ftpack
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;;		_fround
  4381 ;;		_scale
  4382 ;;		_sprintf
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text6
  4387  002C40                     __ptext6:
  4388                           	opt stack 0
  4389  002C40                     ___ftmul:
  4390                           	opt stack 27
  4391                           
  4392                           ;incstack = 0
  4393  002C40  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  4394  002C44  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4395  002C46  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4396  002C48  341D               	rlcf	___ftmul@f1+1,w,c
  4397  002C4A  3622               	rlcf	??___ftmul& (0+255),f,c
  4398  002C4C  E301               	bnc	u2341
  4399  002C4E  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4400  002C50                     u2341:
  4401  002C50  5022               	movf	??___ftmul,w,c
  4402  002C52  6E25               	movwf	___ftmul@exp,c
  4403  002C54  5025               	movf	___ftmul@exp,w,c
  4404  002C56  A4D8               	btfss	status,2,c
  4405  002C58  D002               	goto	l2788
  4406  002C5A  D00E               	goto	l2790
  4407  002C5C  D06C               	goto	l877
  4408  002C5E                     l2788:
  4409  002C5E  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  4410  002C62  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4411  002C64  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4412  002C66  3420               	rlcf	___ftmul@f2+1,w,c
  4413  002C68  3622               	rlcf	??___ftmul& (0+255),f,c
  4414  002C6A  E301               	bnc	u2361
  4415  002C6C  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4416  002C6E                     u2361:
  4417  002C6E  5022               	movf	??___ftmul,w,c
  4418  002C70  6E2A               	movwf	___ftmul@sign,c
  4419  002C72  502A               	movf	___ftmul@sign,w,c
  4420  002C74  A4D8               	btfss	status,2,c
  4421  002C76  D007               	goto	l2794
  4422  002C78                     l2790:
  4423  002C78  0E00               	movlw	0
  4424  002C7A  6E1C               	movwf	?___ftmul,c
  4425  002C7C  0E00               	movlw	0
  4426  002C7E  6E1D               	movwf	?___ftmul+1,c
  4427  002C80  0E00               	movlw	0
  4428  002C82  6E1E               	movwf	?___ftmul+2,c
  4429  002C84  D058               	goto	l877
  4430  002C86                     l2794:
  4431  002C86  502A               	movf	___ftmul@sign,w,c
  4432  002C88  0F7B               	addlw	123
  4433  002C8A  2625               	addwf	___ftmul@exp,f,c
  4434  002C8C  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  4435  002C90  5021               	movf	___ftmul@f2+2,w,c
  4436  002C92  1A2A               	xorwf	___ftmul@sign,f,c
  4437  002C94  0E80               	movlw	128
  4438  002C96  162A               	andwf	___ftmul@sign,f,c
  4439  002C98  8E1D               	bsf	___ftmul@f1+1,7,c
  4440  002C9A  8E20               	bsf	___ftmul@f2+1,7,c
  4441  002C9C  0EFF               	movlw	255
  4442  002C9E  161F               	andwf	___ftmul@f2,f,c
  4443  002CA0  0EFF               	movlw	255
  4444  002CA2  1620               	andwf	___ftmul@f2+1,f,c
  4445  002CA4  0E00               	movlw	0
  4446  002CA6  1621               	andwf	___ftmul@f2+2,f,c
  4447  002CA8  0E00               	movlw	0
  4448  002CAA  6E26               	movwf	___ftmul@f3_as_product,c
  4449  002CAC  0E00               	movlw	0
  4450  002CAE  6E27               	movwf	___ftmul@f3_as_product+1,c
  4451  002CB0  0E00               	movlw	0
  4452  002CB2  6E28               	movwf	___ftmul@f3_as_product+2,c
  4453  002CB4  0E07               	movlw	7
  4454  002CB6  6E29               	movwf	___ftmul@cntr,c
  4455  002CB8  D000               	goto	l2808
  4456  002CBA                     l2808:
  4457  002CBA  A01C               	btfss	___ftmul@f1,0,c
  4458  002CBC  D007               	goto	l2812
  4459  002CBE  501F               	movf	___ftmul@f2,w,c
  4460  002CC0  2626               	addwf	___ftmul@f3_as_product,f,c
  4461  002CC2  5020               	movf	___ftmul@f2+1,w,c
  4462  002CC4  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4463  002CC6  5021               	movf	___ftmul@f2+2,w,c
  4464  002CC8  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4465  002CCA  D000               	goto	l2812
  4466  002CCC                     l2812:
  4467  002CCC  90D8               	bcf	status,0,c
  4468  002CCE  321E               	rrcf	___ftmul@f1+2,f,c
  4469  002CD0  321D               	rrcf	___ftmul@f1+1,f,c
  4470  002CD2  321C               	rrcf	___ftmul@f1,f,c
  4471  002CD4  90D8               	bcf	status,0,c
  4472  002CD6  361F               	rlcf	___ftmul@f2,f,c
  4473  002CD8  3620               	rlcf	___ftmul@f2+1,f,c
  4474  002CDA  3621               	rlcf	___ftmul@f2+2,f,c
  4475  002CDC  2E29               	decfsz	___ftmul@cntr,f,c
  4476  002CDE  D7ED               	goto	l2808
  4477  002CE0  D000               	goto	l2816
  4478  002CE2                     l2816:
  4479  002CE2  0E09               	movlw	9
  4480  002CE4  6E29               	movwf	___ftmul@cntr,c
  4481  002CE6  D000               	goto	l2818
  4482  002CE8                     l2818:
  4483  002CE8  A01C               	btfss	___ftmul@f1,0,c
  4484  002CEA  D007               	goto	l2822
  4485  002CEC  501F               	movf	___ftmul@f2,w,c
  4486  002CEE  2626               	addwf	___ftmul@f3_as_product,f,c
  4487  002CF0  5020               	movf	___ftmul@f2+1,w,c
  4488  002CF2  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4489  002CF4  5021               	movf	___ftmul@f2+2,w,c
  4490  002CF6  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4491  002CF8  D000               	goto	l2822
  4492  002CFA                     l2822:
  4493  002CFA  90D8               	bcf	status,0,c
  4494  002CFC  321E               	rrcf	___ftmul@f1+2,f,c
  4495  002CFE  321D               	rrcf	___ftmul@f1+1,f,c
  4496  002D00  321C               	rrcf	___ftmul@f1,f,c
  4497  002D02  90D8               	bcf	status,0,c
  4498  002D04  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  4499  002D06  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  4500  002D08  3226               	rrcf	___ftmul@f3_as_product,f,c
  4501  002D0A  2E29               	decfsz	___ftmul@cntr,f,c
  4502  002D0C  D7ED               	goto	l2818
  4503  002D0E  D000               	goto	l2826
  4504  002D10                     l2826:
  4505  002D10  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4506  002D14  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4507  002D18  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4508  002D1C  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  4509  002D20  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  4510  002D24  ECF5  F017         	call	___ftpack	;wreg free
  4511  002D28  C001  F01C         	movff	?___ftpack,?___ftmul
  4512  002D2C  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  4513  002D30  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  4514  002D34  D000               	goto	l877
  4515  002D36                     l877:
  4516  002D36  0012               	return		;funcret
  4517  002D38                     __end_of___ftmul:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           postinc0	equ	0xFEE
  4526                           wreg	equ	0xFE8
  4527                           indf2	equ	0xFDF
  4528                           postinc2	equ	0xFDE
  4529                           postdec2	equ	0xFDD
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function ___awmod *****************
  4535 ;; Defined at:
  4536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  dividend        2    0[COMRAM] int 
  4539 ;;  divisor         2    2[COMRAM] int 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  sign            1    5[COMRAM] unsigned char 
  4542 ;;  counter         1    4[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2    0[COMRAM] int 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;Total ram usage:        6 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_fround
  4562 ;;		_scale
  4563 ;;		_sprintf
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text7
  4568  0033C8                     __ptext7:
  4569                           	opt stack 0
  4570  0033C8                     ___awmod:
  4571                           	opt stack 28
  4572                           
  4573                           ;incstack = 0
  4574  0033C8  0E00               	movlw	0
  4575  0033CA  6E06               	movwf	___awmod@sign,c
  4576  0033CC  AE02               	btfss	___awmod@dividend+1,7,c
  4577  0033CE  D007               	goto	l2882
  4578  0033D0  6C01               	negf	___awmod@dividend,c
  4579  0033D2  1E02               	comf	___awmod@dividend+1,f,c
  4580  0033D4  B0D8               	btfsc	status,0,c
  4581  0033D6  2A02               	incf	___awmod@dividend+1,f,c
  4582  0033D8  0E01               	movlw	1
  4583  0033DA  6E06               	movwf	___awmod@sign,c
  4584  0033DC  D000               	goto	l2882
  4585  0033DE                     l2882:
  4586  0033DE  AE04               	btfss	___awmod@divisor+1,7,c
  4587  0033E0  D005               	goto	l2886
  4588  0033E2  6C03               	negf	___awmod@divisor,c
  4589  0033E4  1E04               	comf	___awmod@divisor+1,f,c
  4590  0033E6  B0D8               	btfsc	status,0,c
  4591  0033E8  2A04               	incf	___awmod@divisor+1,f,c
  4592  0033EA  D000               	goto	l2886
  4593  0033EC                     l2886:
  4594  0033EC  5003               	movf	___awmod@divisor,w,c
  4595  0033EE  1004               	iorwf	___awmod@divisor+1,w,c
  4596  0033F0  B4D8               	btfsc	status,2,c
  4597  0033F2  D01D               	goto	l2902
  4598  0033F4  0E01               	movlw	1
  4599  0033F6  6E05               	movwf	___awmod@counter,c
  4600  0033F8  D005               	goto	l2892
  4601  0033FA                     l2890:
  4602  0033FA  90D8               	bcf	status,0,c
  4603  0033FC  3603               	rlcf	___awmod@divisor,f,c
  4604  0033FE  3604               	rlcf	___awmod@divisor+1,f,c
  4605  003400  2A05               	incf	___awmod@counter,f,c
  4606  003402  D000               	goto	l2892
  4607  003404                     l2892:
  4608  003404  BE04               	btfsc	___awmod@divisor+1,7,c
  4609  003406  D002               	goto	l2894
  4610  003408  D7F8               	goto	l2890
  4611  00340A  D000               	goto	l2894
  4612  00340C                     l2894:
  4613  00340C  5003               	movf	___awmod@divisor,w,c
  4614  00340E  5C01               	subwf	___awmod@dividend,w,c
  4615  003410  5004               	movf	___awmod@divisor+1,w,c
  4616  003412  5802               	subwfb	___awmod@dividend+1,w,c
  4617  003414  A0D8               	btfss	status,0,c
  4618  003416  D005               	goto	l2898
  4619  003418  5003               	movf	___awmod@divisor,w,c
  4620  00341A  5E01               	subwf	___awmod@dividend,f,c
  4621  00341C  5004               	movf	___awmod@divisor+1,w,c
  4622  00341E  5A02               	subwfb	___awmod@dividend+1,f,c
  4623  003420  D000               	goto	l2898
  4624  003422                     l2898:
  4625  003422  90D8               	bcf	status,0,c
  4626  003424  3204               	rrcf	___awmod@divisor+1,f,c
  4627  003426  3203               	rrcf	___awmod@divisor,f,c
  4628  003428  2E05               	decfsz	___awmod@counter,f,c
  4629  00342A  D7F0               	goto	l2894
  4630  00342C  D000               	goto	l2902
  4631  00342E                     l2902:
  4632  00342E  5006               	movf	___awmod@sign,w,c
  4633  003430  B4D8               	btfsc	status,2,c
  4634  003432  D005               	goto	l2906
  4635  003434  6C01               	negf	___awmod@dividend,c
  4636  003436  1E02               	comf	___awmod@dividend+1,f,c
  4637  003438  B0D8               	btfsc	status,0,c
  4638  00343A  2A02               	incf	___awmod@dividend+1,f,c
  4639  00343C  D000               	goto	l2906
  4640  00343E                     l2906:
  4641  00343E  C001  F001         	movff	___awmod@dividend,?___awmod
  4642  003442  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4643  003446  D000               	goto	l633
  4644  003448                     l633:
  4645  003448  0012               	return		;funcret
  4646  00344A                     __end_of___awmod:
  4647                           	opt stack 0
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function ___awdiv *****************
  4664 ;; Defined at:
  4665 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  dividend        2    6[COMRAM] int 
  4668 ;;  divisor         2    8[COMRAM] int 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  quotient        2   12[COMRAM] int 
  4671 ;;  sign            1   11[COMRAM] unsigned char 
  4672 ;;  counter         1   10[COMRAM] unsigned char 
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  2    6[COMRAM] int 
  4675 ;; Registers used:
  4676 ;;		wreg, status,2, status,0
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4682 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;Total ram usage:        8 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; This function calls:
  4689 ;;		Nothing
  4690 ;; This function is called by:
  4691 ;;		_fround
  4692 ;;		_scale
  4693 ;;		_sprintf
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           	psect	text8
  4698  003210                     __ptext8:
  4699                           	opt stack 0
  4700  003210                     ___awdiv:
  4701                           	opt stack 28
  4702                           
  4703                           ;incstack = 0
  4704  003210  0E00               	movlw	0
  4705  003212  6E0C               	movwf	___awdiv@sign,c
  4706  003214  AE0A               	btfss	___awdiv@divisor+1,7,c
  4707  003216  D007               	goto	l2838
  4708  003218  6C09               	negf	___awdiv@divisor,c
  4709  00321A  1E0A               	comf	___awdiv@divisor+1,f,c
  4710  00321C  B0D8               	btfsc	status,0,c
  4711  00321E  2A0A               	incf	___awdiv@divisor+1,f,c
  4712  003220  0E01               	movlw	1
  4713  003222  6E0C               	movwf	___awdiv@sign,c
  4714  003224  D000               	goto	l2838
  4715  003226                     l2838:
  4716  003226  AE08               	btfss	___awdiv@dividend+1,7,c
  4717  003228  D007               	goto	l2844
  4718  00322A  6C07               	negf	___awdiv@dividend,c
  4719  00322C  1E08               	comf	___awdiv@dividend+1,f,c
  4720  00322E  B0D8               	btfsc	status,0,c
  4721  003230  2A08               	incf	___awdiv@dividend+1,f,c
  4722  003232  0E01               	movlw	1
  4723  003234  1A0C               	xorwf	___awdiv@sign,f,c
  4724  003236  D000               	goto	l2844
  4725  003238                     l2844:
  4726  003238  0E00               	movlw	0
  4727  00323A  6E0E               	movwf	___awdiv@quotient+1,c
  4728  00323C  0E00               	movlw	0
  4729  00323E  6E0D               	movwf	___awdiv@quotient,c
  4730  003240  5009               	movf	___awdiv@divisor,w,c
  4731  003242  100A               	iorwf	___awdiv@divisor+1,w,c
  4732  003244  B4D8               	btfsc	status,2,c
  4733  003246  D021               	goto	l2866
  4734  003248  0E01               	movlw	1
  4735  00324A  6E0B               	movwf	___awdiv@counter,c
  4736  00324C  D005               	goto	l2852
  4737  00324E                     l2850:
  4738  00324E  90D8               	bcf	status,0,c
  4739  003250  3609               	rlcf	___awdiv@divisor,f,c
  4740  003252  360A               	rlcf	___awdiv@divisor+1,f,c
  4741  003254  2A0B               	incf	___awdiv@counter,f,c
  4742  003256  D000               	goto	l2852
  4743  003258                     l2852:
  4744  003258  BE0A               	btfsc	___awdiv@divisor+1,7,c
  4745  00325A  D002               	goto	l2854
  4746  00325C  D7F8               	goto	l2850
  4747  00325E  D000               	goto	l2854
  4748  003260                     l2854:
  4749  003260  90D8               	bcf	status,0,c
  4750  003262  360D               	rlcf	___awdiv@quotient,f,c
  4751  003264  360E               	rlcf	___awdiv@quotient+1,f,c
  4752  003266  5009               	movf	___awdiv@divisor,w,c
  4753  003268  5C07               	subwf	___awdiv@dividend,w,c
  4754  00326A  500A               	movf	___awdiv@divisor+1,w,c
  4755  00326C  5808               	subwfb	___awdiv@dividend+1,w,c
  4756  00326E  A0D8               	btfss	status,0,c
  4757  003270  D006               	goto	l2862
  4758  003272  5009               	movf	___awdiv@divisor,w,c
  4759  003274  5E07               	subwf	___awdiv@dividend,f,c
  4760  003276  500A               	movf	___awdiv@divisor+1,w,c
  4761  003278  5A08               	subwfb	___awdiv@dividend+1,f,c
  4762  00327A  800D               	bsf	___awdiv@quotient,0,c
  4763  00327C  D000               	goto	l2862
  4764  00327E                     l2862:
  4765  00327E  90D8               	bcf	status,0,c
  4766  003280  320A               	rrcf	___awdiv@divisor+1,f,c
  4767  003282  3209               	rrcf	___awdiv@divisor,f,c
  4768  003284  2E0B               	decfsz	___awdiv@counter,f,c
  4769  003286  D7EC               	goto	l2854
  4770  003288  D000               	goto	l2866
  4771  00328A                     l2866:
  4772  00328A  500C               	movf	___awdiv@sign,w,c
  4773  00328C  B4D8               	btfsc	status,2,c
  4774  00328E  D005               	goto	l2870
  4775  003290  6C0D               	negf	___awdiv@quotient,c
  4776  003292  1E0E               	comf	___awdiv@quotient+1,f,c
  4777  003294  B0D8               	btfsc	status,0,c
  4778  003296  2A0E               	incf	___awdiv@quotient+1,f,c
  4779  003298  D000               	goto	l2870
  4780  00329A                     l2870:
  4781  00329A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4782  00329E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4783  0032A2  D000               	goto	l620
  4784  0032A4                     l620:
  4785  0032A4  0012               	return		;funcret
  4786  0032A6                     __end_of___awdiv:
  4787                           	opt stack 0
  4788                           tblptru	equ	0xFF8
  4789                           tblptrh	equ	0xFF7
  4790                           tblptrl	equ	0xFF6
  4791                           tablat	equ	0xFF5
  4792                           prodh	equ	0xFF4
  4793                           prodl	equ	0xFF3
  4794                           postinc0	equ	0xFEE
  4795                           wreg	equ	0xFE8
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function __tdiv_to_l_ *****************
  4804 ;; Defined at:
  4805 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  f1              3    0[COMRAM] float 
  4808 ;;  f2              3    3[COMRAM] float 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  quot            4    9[COMRAM] unsigned long 
  4811 ;;  exp1            1   14[COMRAM] unsigned char 
  4812 ;;  cntr            1   13[COMRAM] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  4    0[COMRAM] unsigned long 
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4822 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;Total ram usage:       15 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_sprintf
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text9
  4836  002A26                     __ptext9:
  4837                           	opt stack 0
  4838  002A26                     __tdiv_to_l_:
  4839                           	opt stack 29
  4840                           
  4841                           ;incstack = 0
  4842  002A26  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4843  002A2A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4844  002A2C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4845  002A2E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4846  002A30  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4847  002A32  E301               	bnc	u2751
  4848  002A34  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4849  002A36                     u2751:
  4850  002A36  5007               	movf	??__tdiv_to_l_,w,c
  4851  002A38  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4852  002A3A  500F               	movf	__tdiv_to_l_@exp1,w,c
  4853  002A3C  A4D8               	btfss	status,2,c
  4854  002A3E  D002               	goto	l3116
  4855  002A40  D05D               	goto	l3158
  4856  002A42  D078               	goto	l853
  4857  002A44                     l3116:
  4858  002A44  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4859  002A48  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4860  002A4A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4861  002A4C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4862  002A4E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4863  002A50  E301               	bnc	u2771
  4864  002A52  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4865  002A54                     u2771:
  4866  002A54  5007               	movf	??__tdiv_to_l_,w,c
  4867  002A56  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4868  002A58  500E               	movf	__tdiv_to_l_@cntr,w,c
  4869  002A5A  A4D8               	btfss	status,2,c
  4870  002A5C  D002               	goto	l3122
  4871  002A5E  D04E               	goto	l3158
  4872  002A60  D069               	goto	l853
  4873  002A62                     l3122:
  4874  002A62  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4875  002A64  0EFF               	movlw	255
  4876  002A66  1601               	andwf	__tdiv_to_l_@f1,f,c
  4877  002A68  0EFF               	movlw	255
  4878  002A6A  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4879  002A6C  0E00               	movlw	0
  4880  002A6E  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4881  002A70  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4882  002A72  0EFF               	movlw	255
  4883  002A74  1604               	andwf	__tdiv_to_l_@f2,f,c
  4884  002A76  0EFF               	movlw	255
  4885  002A78  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4886  002A7A  0E00               	movlw	0
  4887  002A7C  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4888  002A7E  0E00               	movlw	0
  4889  002A80  6E0A               	movwf	__tdiv_to_l_@quot,c
  4890  002A82  0E00               	movlw	0
  4891  002A84  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4892  002A86  0E00               	movlw	0
  4893  002A88  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4894  002A8A  0E00               	movlw	0
  4895  002A8C  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4896  002A8E  0E7F               	movlw	127
  4897  002A90  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4898  002A92  500E               	movf	__tdiv_to_l_@cntr,w,c
  4899  002A94  0F98               	addlw	152
  4900  002A96  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4901  002A98  0E18               	movlw	24
  4902  002A9A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4903  002A9C                     l855:
  4904  002A9C  90D8               	bcf	status,0,c
  4905  002A9E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4906  002AA0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4907  002AA2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4908  002AA4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4909  002AA6  5004               	movf	__tdiv_to_l_@f2,w,c
  4910  002AA8  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4911  002AAA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4912  002AAC  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4913  002AAE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4914  002AB0  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4915  002AB2  A0D8               	btfss	status,0,c
  4916  002AB4  D007               	goto	l856
  4917  002AB6  5004               	movf	__tdiv_to_l_@f2,w,c
  4918  002AB8  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4919  002ABA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4920  002ABC  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4921  002ABE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4922  002AC0  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4923  002AC2  800A               	bsf	__tdiv_to_l_@quot,0,c
  4924  002AC4                     l856:
  4925  002AC4  90D8               	bcf	status,0,c
  4926  002AC6  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4927  002AC8  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4928  002ACA  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4929  002ACC  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4930  002ACE  D7E6               	goto	l855
  4931  002AD0  D000               	goto	l3144
  4932  002AD2                     l3144:
  4933  002AD2  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4934  002AD4  D010               	goto	l3156
  4935  002AD6  500F               	movf	__tdiv_to_l_@exp1,w,c
  4936  002AD8  0A80               	xorlw	128
  4937  002ADA  0F97               	addlw	151
  4938  002ADC  B0D8               	btfsc	status,0,c
  4939  002ADE  D003               	goto	l3152
  4940  002AE0  D00D               	goto	l3158
  4941  002AE2  D028               	goto	l853
  4942  002AE4  D000               	goto	l3152
  4943  002AE6                     l3152:
  4944  002AE6  90D8               	bcf	status,0,c
  4945  002AE8  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4946  002AEA  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4947  002AEC  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4948  002AEE  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4949  002AF0  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4950  002AF2  D7F9               	goto	l3152
  4951  002AF4  D017               	goto	l862
  4952  002AF6                     l3156:
  4953  002AF6  0E17               	movlw	23
  4954  002AF8  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4955  002AFA  D011               	goto	l3164
  4956  002AFC                     l3158:
  4957  002AFC  0E00               	movlw	0
  4958  002AFE  6E01               	movwf	?__tdiv_to_l_,c
  4959  002B00  0E00               	movlw	0
  4960  002B02  6E02               	movwf	?__tdiv_to_l_+1,c
  4961  002B04  0E00               	movlw	0
  4962  002B06  6E03               	movwf	?__tdiv_to_l_+2,c
  4963  002B08  0E00               	movlw	0
  4964  002B0A  6E04               	movwf	?__tdiv_to_l_+3,c
  4965  002B0C  D013               	goto	l853
  4966  002B0E  D007               	goto	l3164
  4967  002B10                     l3162:
  4968  002B10  90D8               	bcf	status,0,c
  4969  002B12  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4970  002B14  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4971  002B16  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4972  002B18  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4973  002B1A  060F               	decf	__tdiv_to_l_@exp1,f,c
  4974  002B1C  D000               	goto	l3164
  4975  002B1E                     l3164:
  4976  002B1E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4977  002B20  A4D8               	btfss	status,2,c
  4978  002B22  D7F6               	goto	l3162
  4979  002B24                     l862:
  4980  002B24  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4981  002B28  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4982  002B2C  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4983  002B30  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4984  002B34                     l853:
  4985  002B34  0012               	return		;funcret
  4986  002B36                     __end_of__tdiv_to_l_:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           indf2	equ	0xFDF
  4997                           postinc2	equ	0xFDE
  4998                           postdec2	equ	0xFDD
  4999                           fsr2h	equ	0xFDA
  5000                           fsr2l	equ	0xFD9
  5001                           status	equ	0xFD8
  5002                           
  5003 ;; *************** function __div_to_l_ *****************
  5004 ;; Defined at:
  5005 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;  f1              3    0[COMRAM] unsigned long 
  5008 ;;  f2              3    3[COMRAM] unsigned long 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  quot            4    6[COMRAM] unsigned long 
  5011 ;;  exp1            1   11[COMRAM] unsigned char 
  5012 ;;  cntr            1   10[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  4    0[COMRAM] unsigned long 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5022 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;Total ram usage:       12 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_sprintf
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text10
  5036  002B36                     __ptext10:
  5037                           	opt stack 0
  5038  002B36                     __div_to_l_:
  5039                           	opt stack 29
  5040                           
  5041                           ;incstack = 0
  5042  002B36  3403               	rlcf	__div_to_l_@f1+2,w,c
  5043  002B38  3404               	rlcf	__div_to_l_@f1+3,w,c
  5044  002B3A  6E0C               	movwf	__div_to_l_@exp1,c
  5045  002B3C  500C               	movf	__div_to_l_@exp1,w,c
  5046  002B3E  A4D8               	btfss	status,2,c
  5047  002B40  D002               	goto	l3172
  5048  002B42  D061               	goto	l3218
  5049  002B44  D07C               	goto	l732
  5050  002B46                     l3172:
  5051  002B46  3406               	rlcf	__div_to_l_@f2+2,w,c
  5052  002B48  3407               	rlcf	__div_to_l_@f2+3,w,c
  5053  002B4A  6E0B               	movwf	__div_to_l_@cntr,c
  5054  002B4C  500B               	movf	__div_to_l_@cntr,w,c
  5055  002B4E  A4D8               	btfss	status,2,c
  5056  002B50  D002               	goto	l3178
  5057  002B52  D059               	goto	l3218
  5058  002B54  D074               	goto	l732
  5059  002B56                     l3178:
  5060  002B56  8E03               	bsf	__div_to_l_@f1+2,7,c
  5061  002B58  0EFF               	movlw	255
  5062  002B5A  1601               	andwf	__div_to_l_@f1,f,c
  5063  002B5C  0EFF               	movlw	255
  5064  002B5E  1602               	andwf	__div_to_l_@f1+1,f,c
  5065  002B60  0EFF               	movlw	255
  5066  002B62  1603               	andwf	__div_to_l_@f1+2,f,c
  5067  002B64  0E00               	movlw	0
  5068  002B66  1604               	andwf	__div_to_l_@f1+3,f,c
  5069  002B68  8E06               	bsf	__div_to_l_@f2+2,7,c
  5070  002B6A  0EFF               	movlw	255
  5071  002B6C  1604               	andwf	__div_to_l_@f2,f,c
  5072  002B6E  0EFF               	movlw	255
  5073  002B70  1605               	andwf	__div_to_l_@f2+1,f,c
  5074  002B72  0EFF               	movlw	255
  5075  002B74  1606               	andwf	__div_to_l_@f2+2,f,c
  5076  002B76  0E00               	movlw	0
  5077  002B78  1607               	andwf	__div_to_l_@f2+3,f,c
  5078  002B7A  0E00               	movlw	0
  5079  002B7C  6E07               	movwf	__div_to_l_@quot,c
  5080  002B7E  0E00               	movlw	0
  5081  002B80  6E08               	movwf	__div_to_l_@quot+1,c
  5082  002B82  0E00               	movlw	0
  5083  002B84  6E09               	movwf	__div_to_l_@quot+2,c
  5084  002B86  0E00               	movlw	0
  5085  002B88  6E0A               	movwf	__div_to_l_@quot+3,c
  5086  002B8A  0E7F               	movlw	127
  5087  002B8C  5E0C               	subwf	__div_to_l_@exp1,f,c
  5088  002B8E  500B               	movf	__div_to_l_@cntr,w,c
  5089  002B90  0FA0               	addlw	160
  5090  002B92  5E0C               	subwf	__div_to_l_@exp1,f,c
  5091  002B94  0E20               	movlw	32
  5092  002B96  6E0B               	movwf	__div_to_l_@cntr,c
  5093  002B98  D000               	goto	l3192
  5094  002B9A                     l3192:
  5095  002B9A  90D8               	bcf	status,0,c
  5096  002B9C  3607               	rlcf	__div_to_l_@quot,f,c
  5097  002B9E  3608               	rlcf	__div_to_l_@quot+1,f,c
  5098  002BA0  3609               	rlcf	__div_to_l_@quot+2,f,c
  5099  002BA2  360A               	rlcf	__div_to_l_@quot+3,f,c
  5100  002BA4  5004               	movf	__div_to_l_@f2,w,c
  5101  002BA6  5C01               	subwf	__div_to_l_@f1,w,c
  5102  002BA8  5005               	movf	__div_to_l_@f2+1,w,c
  5103  002BAA  5802               	subwfb	__div_to_l_@f1+1,w,c
  5104  002BAC  5006               	movf	__div_to_l_@f2+2,w,c
  5105  002BAE  5803               	subwfb	__div_to_l_@f1+2,w,c
  5106  002BB0  5007               	movf	__div_to_l_@f2+3,w,c
  5107  002BB2  5804               	subwfb	__div_to_l_@f1+3,w,c
  5108  002BB4  A0D8               	btfss	status,0,c
  5109  002BB6  D00A               	goto	l3200
  5110  002BB8  5004               	movf	__div_to_l_@f2,w,c
  5111  002BBA  5E01               	subwf	__div_to_l_@f1,f,c
  5112  002BBC  5005               	movf	__div_to_l_@f2+1,w,c
  5113  002BBE  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5114  002BC0  5006               	movf	__div_to_l_@f2+2,w,c
  5115  002BC2  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5116  002BC4  5007               	movf	__div_to_l_@f2+3,w,c
  5117  002BC6  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5118  002BC8  8007               	bsf	__div_to_l_@quot,0,c
  5119  002BCA  D000               	goto	l3200
  5120  002BCC                     l3200:
  5121  002BCC  90D8               	bcf	status,0,c
  5122  002BCE  3601               	rlcf	__div_to_l_@f1,f,c
  5123  002BD0  3602               	rlcf	__div_to_l_@f1+1,f,c
  5124  002BD2  3603               	rlcf	__div_to_l_@f1+2,f,c
  5125  002BD4  3604               	rlcf	__div_to_l_@f1+3,f,c
  5126  002BD6  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5127  002BD8  D7E0               	goto	l3192
  5128  002BDA  D000               	goto	l3204
  5129  002BDC                     l3204:
  5130  002BDC  AE0C               	btfss	__div_to_l_@exp1,7,c
  5131  002BDE  D010               	goto	l3216
  5132  002BE0  500C               	movf	__div_to_l_@exp1,w,c
  5133  002BE2  0A80               	xorlw	128
  5134  002BE4  0F9F               	addlw	159
  5135  002BE6  B0D8               	btfsc	status,0,c
  5136  002BE8  D003               	goto	l3212
  5137  002BEA  D00D               	goto	l3218
  5138  002BEC  D028               	goto	l732
  5139  002BEE  D000               	goto	l3212
  5140  002BF0                     l3212:
  5141  002BF0  90D8               	bcf	status,0,c
  5142  002BF2  320A               	rrcf	__div_to_l_@quot+3,f,c
  5143  002BF4  3209               	rrcf	__div_to_l_@quot+2,f,c
  5144  002BF6  3208               	rrcf	__div_to_l_@quot+1,f,c
  5145  002BF8  3207               	rrcf	__div_to_l_@quot,f,c
  5146  002BFA  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5147  002BFC  D7F9               	goto	l3212
  5148  002BFE  D017               	goto	l741
  5149  002C00                     l3216:
  5150  002C00  0E1F               	movlw	31
  5151  002C02  640C               	cpfsgt	__div_to_l_@exp1,c
  5152  002C04  D011               	goto	l3224
  5153  002C06                     l3218:
  5154  002C06  0E00               	movlw	0
  5155  002C08  6E01               	movwf	?__div_to_l_,c
  5156  002C0A  0E00               	movlw	0
  5157  002C0C  6E02               	movwf	?__div_to_l_+1,c
  5158  002C0E  0E00               	movlw	0
  5159  002C10  6E03               	movwf	?__div_to_l_+2,c
  5160  002C12  0E00               	movlw	0
  5161  002C14  6E04               	movwf	?__div_to_l_+3,c
  5162  002C16  D013               	goto	l732
  5163  002C18  D007               	goto	l3224
  5164  002C1A                     l3222:
  5165  002C1A  90D8               	bcf	status,0,c
  5166  002C1C  3607               	rlcf	__div_to_l_@quot,f,c
  5167  002C1E  3608               	rlcf	__div_to_l_@quot+1,f,c
  5168  002C20  3609               	rlcf	__div_to_l_@quot+2,f,c
  5169  002C22  360A               	rlcf	__div_to_l_@quot+3,f,c
  5170  002C24  060C               	decf	__div_to_l_@exp1,f,c
  5171  002C26  D000               	goto	l3224
  5172  002C28                     l3224:
  5173  002C28  500C               	movf	__div_to_l_@exp1,w,c
  5174  002C2A  A4D8               	btfss	status,2,c
  5175  002C2C  D7F6               	goto	l3222
  5176  002C2E                     l741:
  5177  002C2E  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5178  002C32  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5179  002C36  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5180  002C3A  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5181  002C3E                     l732:
  5182  002C3E  0012               	return		;funcret
  5183  002C40                     __end_of__div_to_l_:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           fsr2h	equ	0xFDA
  5197                           fsr2l	equ	0xFD9
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function ___lltoft *****************
  5201 ;; Defined at:
  5202 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  c               4   15[COMRAM] unsigned long 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  exp             1   23[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  3   15[COMRAM] float 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;Total ram usage:        9 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    1
  5223 ;; This function calls:
  5224 ;;		___ftpack
  5225 ;; This function is called by:
  5226 ;;		_sprintf
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text11
  5231  0034BA                     __ptext11:
  5232                           	opt stack 0
  5233  0034BA                     ___lltoft:
  5234                           	opt stack 28
  5235                           
  5236                           ;incstack = 0
  5237  0034BA  0E8E               	movlw	142
  5238  0034BC  6E18               	movwf	___lltoft@exp,c
  5239  0034BE  D007               	goto	l3420
  5240  0034C0                     l3418:
  5241  0034C0  90D8               	bcf	status,0,c
  5242  0034C2  3213               	rrcf	___lltoft@c+3,f,c
  5243  0034C4  3212               	rrcf	___lltoft@c+2,f,c
  5244  0034C6  3211               	rrcf	___lltoft@c+1,f,c
  5245  0034C8  3210               	rrcf	___lltoft@c,f,c
  5246  0034CA  2A18               	incf	___lltoft@exp,f,c
  5247  0034CC  D000               	goto	l3420
  5248  0034CE                     l3420:
  5249  0034CE  0E00               	movlw	0
  5250  0034D0  1410               	andwf	___lltoft@c,w,c
  5251  0034D2  6E14               	movwf	??___lltoft& (0+255),c
  5252  0034D4  0E00               	movlw	0
  5253  0034D6  1411               	andwf	___lltoft@c+1,w,c
  5254  0034D8  6E15               	movwf	(??___lltoft+1)& (0+255),c
  5255  0034DA  0E00               	movlw	0
  5256  0034DC  1412               	andwf	___lltoft@c+2,w,c
  5257  0034DE  6E16               	movwf	(??___lltoft+2)& (0+255),c
  5258  0034E0  0EFF               	movlw	255
  5259  0034E2  1413               	andwf	___lltoft@c+3,w,c
  5260  0034E4  6E17               	movwf	(??___lltoft+3)& (0+255),c
  5261  0034E6  5014               	movf	??___lltoft,w,c
  5262  0034E8  1015               	iorwf	??___lltoft+1,w,c
  5263  0034EA  1016               	iorwf	??___lltoft+2,w,c
  5264  0034EC  1017               	iorwf	??___lltoft+3,w,c
  5265  0034EE  A4D8               	btfss	status,2,c
  5266  0034F0  D7E7               	goto	l3418
  5267  0034F2  C010  F001         	movff	___lltoft@c,___ftpack@arg
  5268  0034F6  C011  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5269  0034FA  C012  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5270  0034FE  C018  F004         	movff	___lltoft@exp,___ftpack@exp
  5271  003502  0E00               	movlw	0
  5272  003504  6E05               	movwf	___ftpack@sign,c
  5273  003506  ECF5  F017         	call	___ftpack	;wreg free
  5274  00350A  C001  F010         	movff	?___ftpack,?___lltoft
  5275  00350E  C002  F011         	movff	?___ftpack+1,?___lltoft+1
  5276  003512  C003  F012         	movff	?___ftpack+2,?___lltoft+2
  5277  003516  D000               	goto	l986
  5278  003518                     l986:
  5279  003518  0012               	return		;funcret
  5280  00351A                     __end_of___lltoft:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodh	equ	0xFF4
  5287                           prodl	equ	0xFF3
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function ___llmod *****************
  5298 ;; Defined at:
  5299 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  dividend        4    0[COMRAM] unsigned long 
  5302 ;;  divisor         4    4[COMRAM] unsigned long 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  counter         1    8[COMRAM] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  4    0[COMRAM] unsigned long 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5314 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;Total ram usage:        9 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_sprintf
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text12
  5328  00344A                     __ptext12:
  5329                           	opt stack 0
  5330  00344A                     ___llmod:
  5331                           	opt stack 29
  5332                           
  5333                           ;incstack = 0
  5334  00344A  5005               	movf	___llmod@divisor,w,c
  5335  00344C  1006               	iorwf	___llmod@divisor+1,w,c
  5336  00344E  1007               	iorwf	___llmod@divisor+2,w,c
  5337  003450  1008               	iorwf	___llmod@divisor+3,w,c
  5338  003452  B4D8               	btfsc	status,2,c
  5339  003454  D029               	goto	l966
  5340  003456  0E01               	movlw	1
  5341  003458  6E09               	movwf	___llmod@counter,c
  5342  00345A  D007               	goto	l3406
  5343  00345C                     l3404:
  5344  00345C  90D8               	bcf	status,0,c
  5345  00345E  3605               	rlcf	___llmod@divisor,f,c
  5346  003460  3606               	rlcf	___llmod@divisor+1,f,c
  5347  003462  3607               	rlcf	___llmod@divisor+2,f,c
  5348  003464  3608               	rlcf	___llmod@divisor+3,f,c
  5349  003466  2A09               	incf	___llmod@counter,f,c
  5350  003468  D000               	goto	l3406
  5351  00346A                     l3406:
  5352  00346A  BE08               	btfsc	___llmod@divisor+3,7,c
  5353  00346C  D002               	goto	l3408
  5354  00346E  D7F6               	goto	l3404
  5355  003470  D000               	goto	l3408
  5356  003472                     l3408:
  5357  003472  5005               	movf	___llmod@divisor,w,c
  5358  003474  5C01               	subwf	___llmod@dividend,w,c
  5359  003476  5006               	movf	___llmod@divisor+1,w,c
  5360  003478  5802               	subwfb	___llmod@dividend+1,w,c
  5361  00347A  5007               	movf	___llmod@divisor+2,w,c
  5362  00347C  5803               	subwfb	___llmod@dividend+2,w,c
  5363  00347E  5008               	movf	___llmod@divisor+3,w,c
  5364  003480  5804               	subwfb	___llmod@dividend+3,w,c
  5365  003482  A0D8               	btfss	status,0,c
  5366  003484  D009               	goto	l3412
  5367  003486  5005               	movf	___llmod@divisor,w,c
  5368  003488  5E01               	subwf	___llmod@dividend,f,c
  5369  00348A  5006               	movf	___llmod@divisor+1,w,c
  5370  00348C  5A02               	subwfb	___llmod@dividend+1,f,c
  5371  00348E  5007               	movf	___llmod@divisor+2,w,c
  5372  003490  5A03               	subwfb	___llmod@dividend+2,f,c
  5373  003492  5008               	movf	___llmod@divisor+3,w,c
  5374  003494  5A04               	subwfb	___llmod@dividend+3,f,c
  5375  003496  D000               	goto	l3412
  5376  003498                     l3412:
  5377  003498  90D8               	bcf	status,0,c
  5378  00349A  3208               	rrcf	___llmod@divisor+3,f,c
  5379  00349C  3207               	rrcf	___llmod@divisor+2,f,c
  5380  00349E  3206               	rrcf	___llmod@divisor+1,f,c
  5381  0034A0  3205               	rrcf	___llmod@divisor,f,c
  5382  0034A2  2E09               	decfsz	___llmod@counter,f,c
  5383  0034A4  D7E6               	goto	l3408
  5384  0034A6  D000               	goto	l966
  5385  0034A8                     l966:
  5386  0034A8  C001  F001         	movff	___llmod@dividend,?___llmod
  5387  0034AC  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5388  0034B0  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5389  0034B4  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5390  0034B8  0012               	return		;funcret
  5391  0034BA                     __end_of___llmod:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           indf2	equ	0xFDF
  5402                           postinc2	equ	0xFDE
  5403                           postdec2	equ	0xFDD
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function ___lldiv *****************
  5409 ;; Defined at:
  5410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  dividend        4    0[COMRAM] unsigned long 
  5413 ;;  divisor         4    4[COMRAM] unsigned long 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  quotient        4    8[COMRAM] unsigned long 
  5416 ;;  counter         1   12[COMRAM] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  4    0[COMRAM] unsigned long 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5426 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;Total ram usage:       13 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_sprintf
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text13
  5440  00333C                     __ptext13:
  5441                           	opt stack 0
  5442  00333C                     ___lldiv:
  5443                           	opt stack 29
  5444                           
  5445                           ;incstack = 0
  5446  00333C  0E00               	movlw	0
  5447  00333E  6E09               	movwf	___lldiv@quotient,c
  5448  003340  0E00               	movlw	0
  5449  003342  6E0A               	movwf	___lldiv@quotient+1,c
  5450  003344  0E00               	movlw	0
  5451  003346  6E0B               	movwf	___lldiv@quotient+2,c
  5452  003348  0E00               	movlw	0
  5453  00334A  6E0C               	movwf	___lldiv@quotient+3,c
  5454  00334C  5005               	movf	___lldiv@divisor,w,c
  5455  00334E  1006               	iorwf	___lldiv@divisor+1,w,c
  5456  003350  1007               	iorwf	___lldiv@divisor+2,w,c
  5457  003352  1008               	iorwf	___lldiv@divisor+3,w,c
  5458  003354  B4D8               	btfsc	status,2,c
  5459  003356  D02F               	goto	l956
  5460  003358  0E01               	movlw	1
  5461  00335A  6E0D               	movwf	___lldiv@counter,c
  5462  00335C  D007               	goto	l3386
  5463  00335E                     l3384:
  5464  00335E  90D8               	bcf	status,0,c
  5465  003360  3605               	rlcf	___lldiv@divisor,f,c
  5466  003362  3606               	rlcf	___lldiv@divisor+1,f,c
  5467  003364  3607               	rlcf	___lldiv@divisor+2,f,c
  5468  003366  3608               	rlcf	___lldiv@divisor+3,f,c
  5469  003368  2A0D               	incf	___lldiv@counter,f,c
  5470  00336A  D000               	goto	l3386
  5471  00336C                     l3386:
  5472  00336C  BE08               	btfsc	___lldiv@divisor+3,7,c
  5473  00336E  D002               	goto	l3388
  5474  003370  D7F6               	goto	l3384
  5475  003372  D000               	goto	l3388
  5476  003374                     l3388:
  5477  003374  90D8               	bcf	status,0,c
  5478  003376  3609               	rlcf	___lldiv@quotient,f,c
  5479  003378  360A               	rlcf	___lldiv@quotient+1,f,c
  5480  00337A  360B               	rlcf	___lldiv@quotient+2,f,c
  5481  00337C  360C               	rlcf	___lldiv@quotient+3,f,c
  5482  00337E  5005               	movf	___lldiv@divisor,w,c
  5483  003380  5C01               	subwf	___lldiv@dividend,w,c
  5484  003382  5006               	movf	___lldiv@divisor+1,w,c
  5485  003384  5802               	subwfb	___lldiv@dividend+1,w,c
  5486  003386  5007               	movf	___lldiv@divisor+2,w,c
  5487  003388  5803               	subwfb	___lldiv@dividend+2,w,c
  5488  00338A  5008               	movf	___lldiv@divisor+3,w,c
  5489  00338C  5804               	subwfb	___lldiv@dividend+3,w,c
  5490  00338E  A0D8               	btfss	status,0,c
  5491  003390  D00A               	goto	l3396
  5492  003392  5005               	movf	___lldiv@divisor,w,c
  5493  003394  5E01               	subwf	___lldiv@dividend,f,c
  5494  003396  5006               	movf	___lldiv@divisor+1,w,c
  5495  003398  5A02               	subwfb	___lldiv@dividend+1,f,c
  5496  00339A  5007               	movf	___lldiv@divisor+2,w,c
  5497  00339C  5A03               	subwfb	___lldiv@dividend+2,f,c
  5498  00339E  5008               	movf	___lldiv@divisor+3,w,c
  5499  0033A0  5A04               	subwfb	___lldiv@dividend+3,f,c
  5500  0033A2  8009               	bsf	___lldiv@quotient,0,c
  5501  0033A4  D000               	goto	l3396
  5502  0033A6                     l3396:
  5503  0033A6  90D8               	bcf	status,0,c
  5504  0033A8  3208               	rrcf	___lldiv@divisor+3,f,c
  5505  0033AA  3207               	rrcf	___lldiv@divisor+2,f,c
  5506  0033AC  3206               	rrcf	___lldiv@divisor+1,f,c
  5507  0033AE  3205               	rrcf	___lldiv@divisor,f,c
  5508  0033B0  2E0D               	decfsz	___lldiv@counter,f,c
  5509  0033B2  D7E0               	goto	l3388
  5510  0033B4  D000               	goto	l956
  5511  0033B6                     l956:
  5512  0033B6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5513  0033BA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5514  0033BE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5515  0033C2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5516  0033C6  0012               	return		;funcret
  5517  0033C8                     __end_of___lldiv:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function ___fttol *****************
  5535 ;; Defined at:
  5536 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  f1              3    0[COMRAM] float 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  lval            4   10[COMRAM] unsigned long 
  5541 ;;  exp1            1   14[COMRAM] unsigned char 
  5542 ;;  sign1           1    9[COMRAM] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  4    0[COMRAM] long 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;Total ram usage:       15 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_sprintf
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text14
  5566  002E22                     __ptext14:
  5567                           	opt stack 0
  5568  002E22                     ___fttol:
  5569                           	opt stack 29
  5570                           
  5571                           ;incstack = 0
  5572  002E22  C003  F005         	movff	___fttol@f1+2,??___fttol
  5573  002E26  6A06               	clrf	(??___fttol+1)& (0+255),c
  5574  002E28  6A07               	clrf	(??___fttol+2)& (0+255),c
  5575  002E2A  3402               	rlcf	___fttol@f1+1,w,c
  5576  002E2C  3605               	rlcf	??___fttol& (0+255),f,c
  5577  002E2E  E301               	bnc	u3011
  5578  002E30  8006               	bsf	(??___fttol+1)& (0+255),0,c
  5579  002E32                     u3011:
  5580  002E32  5005               	movf	??___fttol,w,c
  5581  002E34  6E0F               	movwf	___fttol@exp1,c
  5582  002E36  500F               	movf	___fttol@exp1,w,c
  5583  002E38  A4D8               	btfss	status,2,c
  5584  002E3A  D002               	goto	l3308
  5585  002E3C  D039               	goto	l3332
  5586  002E3E  D063               	goto	l898
  5587  002E40                     l3308:
  5588  002E40  0E17               	movlw	23
  5589  002E42  6E05               	movwf	??___fttol& (0+255),c
  5590  002E44  C001  F006         	movff	___fttol@f1,??___fttol+1
  5591  002E48  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  5592  002E4C  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  5593  002E50  2805               	incf	??___fttol,w,c
  5594  002E52  6E09               	movwf	(??___fttol+4)& (0+255),c
  5595  002E54  D004               	goto	u3030
  5596  002E56                     u3035:
  5597  002E56  90D8               	bcf	status,0,c
  5598  002E58  3208               	rrcf	??___fttol+3,f,c
  5599  002E5A  3207               	rrcf	??___fttol+2,f,c
  5600  002E5C  3206               	rrcf	??___fttol+1,f,c
  5601  002E5E                     u3030:
  5602  002E5E  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  5603  002E60  D7FA               	goto	u3035
  5604  002E62  5006               	movf	??___fttol+1,w,c
  5605  002E64  6E0A               	movwf	___fttol@sign1,c
  5606  002E66  8E02               	bsf	___fttol@f1+1,7,c
  5607  002E68  0EFF               	movlw	255
  5608  002E6A  1601               	andwf	___fttol@f1,f,c
  5609  002E6C  0EFF               	movlw	255
  5610  002E6E  1602               	andwf	___fttol@f1+1,f,c
  5611  002E70  0E00               	movlw	0
  5612  002E72  1603               	andwf	___fttol@f1+2,f,c
  5613  002E74  5001               	movf	___fttol@f1,w,c
  5614  002E76  6E0B               	movwf	___fttol@lval,c
  5615  002E78  5002               	movf	___fttol@f1+1,w,c
  5616  002E7A  6E0C               	movwf	___fttol@lval+1,c
  5617  002E7C  5003               	movf	___fttol@f1+2,w,c
  5618  002E7E  6E0D               	movwf	___fttol@lval+2,c
  5619  002E80  6A0E               	clrf	___fttol@lval+3,c
  5620  002E82  0E8E               	movlw	142
  5621  002E84  5E0F               	subwf	___fttol@exp1,f,c
  5622  002E86  AE0F               	btfss	___fttol@exp1,7,c
  5623  002E88  D010               	goto	l3330
  5624  002E8A  500F               	movf	___fttol@exp1,w,c
  5625  002E8C  0A80               	xorlw	128
  5626  002E8E  0F8F               	addlw	143
  5627  002E90  B0D8               	btfsc	status,0,c
  5628  002E92  D003               	goto	l3326
  5629  002E94  D00D               	goto	l3332
  5630  002E96  D037               	goto	l898
  5631  002E98  D000               	goto	l3326
  5632  002E9A                     l3326:
  5633  002E9A  90D8               	bcf	status,0,c
  5634  002E9C  320E               	rrcf	___fttol@lval+3,f,c
  5635  002E9E  320D               	rrcf	___fttol@lval+2,f,c
  5636  002EA0  320C               	rrcf	___fttol@lval+1,f,c
  5637  002EA2  320B               	rrcf	___fttol@lval,f,c
  5638  002EA4  3E0F               	incfsz	___fttol@exp1,f,c
  5639  002EA6  D7F9               	goto	l3326
  5640  002EA8  D019               	goto	l3340
  5641  002EAA                     l3330:
  5642  002EAA  0E17               	movlw	23
  5643  002EAC  640F               	cpfsgt	___fttol@exp1,c
  5644  002EAE  D011               	goto	l3338
  5645  002EB0                     l3332:
  5646  002EB0  0E00               	movlw	0
  5647  002EB2  6E01               	movwf	?___fttol,c
  5648  002EB4  0E00               	movlw	0
  5649  002EB6  6E02               	movwf	?___fttol+1,c
  5650  002EB8  0E00               	movlw	0
  5651  002EBA  6E03               	movwf	?___fttol+2,c
  5652  002EBC  0E00               	movlw	0
  5653  002EBE  6E04               	movwf	?___fttol+3,c
  5654  002EC0  D022               	goto	l898
  5655  002EC2  D007               	goto	l3338
  5656  002EC4                     l3336:
  5657  002EC4  90D8               	bcf	status,0,c
  5658  002EC6  360B               	rlcf	___fttol@lval,f,c
  5659  002EC8  360C               	rlcf	___fttol@lval+1,f,c
  5660  002ECA  360D               	rlcf	___fttol@lval+2,f,c
  5661  002ECC  360E               	rlcf	___fttol@lval+3,f,c
  5662  002ECE  060F               	decf	___fttol@exp1,f,c
  5663  002ED0  D000               	goto	l3338
  5664  002ED2                     l3338:
  5665  002ED2  500F               	movf	___fttol@exp1,w,c
  5666  002ED4  B4D8               	btfsc	status,2,c
  5667  002ED6  D002               	goto	l3340
  5668  002ED8  D7F5               	goto	l3336
  5669  002EDA  D000               	goto	l3340
  5670  002EDC                     l3340:
  5671  002EDC  500A               	movf	___fttol@sign1,w,c
  5672  002EDE  B4D8               	btfsc	status,2,c
  5673  002EE0  D009               	goto	l3344
  5674  002EE2  1E0E               	comf	___fttol@lval+3,f,c
  5675  002EE4  1E0D               	comf	___fttol@lval+2,f,c
  5676  002EE6  1E0C               	comf	___fttol@lval+1,f,c
  5677  002EE8  6C0B               	negf	___fttol@lval,c
  5678  002EEA  0E00               	movlw	0
  5679  002EEC  220C               	addwfc	___fttol@lval+1,f,c
  5680  002EEE  220D               	addwfc	___fttol@lval+2,f,c
  5681  002EF0  220E               	addwfc	___fttol@lval+3,f,c
  5682  002EF2  D000               	goto	l3344
  5683  002EF4                     l3344:
  5684  002EF4  C00B  F001         	movff	___fttol@lval,?___fttol
  5685  002EF8  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  5686  002EFC  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  5687  002F00  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  5688  002F04  D000               	goto	l898
  5689  002F06                     l898:
  5690  002F06  0012               	return		;funcret
  5691  002F08                     __end_of___fttol:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function ___ftsub *****************
  5709 ;; Defined at:
  5710 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  f1              3   64[COMRAM] float 
  5713 ;;  f2              3   67[COMRAM] float 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  3   64[COMRAM] float 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        6 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    2
  5732 ;; This function calls:
  5733 ;;		___ftadd
  5734 ;; This function is called by:
  5735 ;;		_sprintf
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text15
  5740  0036BA                     __ptext15:
  5741                           	opt stack 0
  5742  0036BA                     ___ftsub:
  5743                           	opt stack 27
  5744                           
  5745                           ;incstack = 0
  5746  0036BA  5044               	movf	___ftsub@f2,w,c
  5747  0036BC  1045               	iorwf	___ftsub@f2+1,w,c
  5748  0036BE  1046               	iorwf	___ftsub@f2+2,w,c
  5749  0036C0  B4D8               	btfsc	status,2,c
  5750  0036C2  D007               	goto	l3276
  5751  0036C4  0E00               	movlw	0
  5752  0036C6  1A44               	xorwf	___ftsub@f2,f,c
  5753  0036C8  0E00               	movlw	0
  5754  0036CA  1A45               	xorwf	___ftsub@f2+1,f,c
  5755  0036CC  0E80               	movlw	128
  5756  0036CE  1A46               	xorwf	___ftsub@f2+2,f,c
  5757  0036D0  D000               	goto	l3276
  5758  0036D2                     l3276:
  5759  0036D2  C041  F035         	movff	___ftsub@f1,___ftadd@f1
  5760  0036D6  C042  F036         	movff	___ftsub@f1+1,___ftadd@f1+1
  5761  0036DA  C043  F037         	movff	___ftsub@f1+2,___ftadd@f1+2
  5762  0036DE  C044  F038         	movff	___ftsub@f2,___ftadd@f2
  5763  0036E2  C045  F039         	movff	___ftsub@f2+1,___ftadd@f2+1
  5764  0036E6  C046  F03A         	movff	___ftsub@f2+2,___ftadd@f2+2
  5765  0036EA  EC31  F014         	call	___ftadd	;wreg free
  5766  0036EE  C035  F041         	movff	?___ftadd,?___ftsub
  5767  0036F2  C036  F042         	movff	?___ftadd+1,?___ftsub+1
  5768  0036F6  C037  F043         	movff	?___ftadd+2,?___ftsub+2
  5769  0036FA  D000               	goto	l894
  5770  0036FC                     l894:
  5771  0036FC  0012               	return		;funcret
  5772  0036FE                     __end_of___ftsub:
  5773                           	opt stack 0
  5774                           tblptru	equ	0xFF8
  5775                           tblptrh	equ	0xFF7
  5776                           tblptrl	equ	0xFF6
  5777                           tablat	equ	0xFF5
  5778                           prodh	equ	0xFF4
  5779                           prodl	equ	0xFF3
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function ___ftadd *****************
  5790 ;; Defined at:
  5791 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  f1              3   52[COMRAM] float 
  5794 ;;  f2              3   55[COMRAM] float 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  exp1            1   63[COMRAM] unsigned char 
  5797 ;;  exp2            1   62[COMRAM] unsigned char 
  5798 ;;  sign            1   61[COMRAM] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  3   52[COMRAM] float 
  5801 ;; Registers used:
  5802 ;;		wreg, status,2, status,0, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5808 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;Total ram usage:       12 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    1
  5815 ;; This function calls:
  5816 ;;		___ftpack
  5817 ;; This function is called by:
  5818 ;;		_sprintf
  5819 ;;		___ftsub
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text16
  5824  002862                     __ptext16:
  5825                           	opt stack 0
  5826  002862                     ___ftadd:
  5827                           	opt stack 27
  5828                           
  5829                           ;incstack = 0
  5830  002862  C037  F03B         	movff	___ftadd@f1+2,??___ftadd
  5831  002866  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  5832  002868  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  5833  00286A  3436               	rlcf	___ftadd@f1+1,w,c
  5834  00286C  363B               	rlcf	??___ftadd& (0+255),f,c
  5835  00286E  E301               	bnc	u2131
  5836  002870  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  5837  002872                     u2131:
  5838  002872  503B               	movf	??___ftadd,w,c
  5839  002874  6E40               	movwf	___ftadd@exp1,c
  5840  002876  C03A  F03B         	movff	___ftadd@f2+2,??___ftadd
  5841  00287A  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  5842  00287C  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  5843  00287E  3439               	rlcf	___ftadd@f2+1,w,c
  5844  002880  363B               	rlcf	??___ftadd& (0+255),f,c
  5845  002882  E301               	bnc	u2141
  5846  002884  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  5847  002886                     u2141:
  5848  002886  503B               	movf	??___ftadd,w,c
  5849  002888  6E3F               	movwf	___ftadd@exp2,c
  5850  00288A  5040               	movf	___ftadd@exp1,w,c
  5851  00288C  B4D8               	btfsc	status,2,c
  5852  00288E  D00B               	goto	l813
  5853  002890  503F               	movf	___ftadd@exp2,w,c
  5854  002892  5C40               	subwf	___ftadd@exp1,w,c
  5855  002894  B0D8               	btfsc	status,0,c
  5856  002896  D00E               	goto	l2720
  5857  002898  5040               	movf	___ftadd@exp1,w,c
  5858  00289A  0800               	sublw	0
  5859  00289C  243F               	addwf	___ftadd@exp2,w,c
  5860  00289E  6E3B               	movwf	??___ftadd& (0+255),c
  5861  0028A0  0E18               	movlw	24
  5862  0028A2  643B               	cpfsgt	??___ftadd,c
  5863  0028A4  D007               	goto	l2720
  5864  0028A6                     l813:
  5865  0028A6  C038  F035         	movff	___ftadd@f2,?___ftadd
  5866  0028AA  C039  F036         	movff	___ftadd@f2+1,?___ftadd+1
  5867  0028AE  C03A  F037         	movff	___ftadd@f2+2,?___ftadd+2
  5868  0028B2  D0B8               	goto	l814
  5869  0028B4                     l2720:
  5870  0028B4  503F               	movf	___ftadd@exp2,w,c
  5871  0028B6  B4D8               	btfsc	status,2,c
  5872  0028B8  D00B               	goto	l817
  5873  0028BA  5040               	movf	___ftadd@exp1,w,c
  5874  0028BC  5C3F               	subwf	___ftadd@exp2,w,c
  5875  0028BE  B0D8               	btfsc	status,0,c
  5876  0028C0  D00E               	goto	l2726
  5877  0028C2  503F               	movf	___ftadd@exp2,w,c
  5878  0028C4  0800               	sublw	0
  5879  0028C6  2440               	addwf	___ftadd@exp1,w,c
  5880  0028C8  6E3B               	movwf	??___ftadd& (0+255),c
  5881  0028CA  0E18               	movlw	24
  5882  0028CC  643B               	cpfsgt	??___ftadd,c
  5883  0028CE  D007               	goto	l2726
  5884  0028D0                     l817:
  5885  0028D0  C035  F035         	movff	___ftadd@f1,?___ftadd
  5886  0028D4  C036  F036         	movff	___ftadd@f1+1,?___ftadd+1
  5887  0028D8  C037  F037         	movff	___ftadd@f1+2,?___ftadd+2
  5888  0028DC  D0A3               	goto	l814
  5889  0028DE                     l2726:
  5890  0028DE  0E06               	movlw	6
  5891  0028E0  6E3E               	movwf	___ftadd@sign,c
  5892  0028E2  AE37               	btfss	___ftadd@f1+2,7,c
  5893  0028E4  D002               	goto	l2732
  5894  0028E6  8E3E               	bsf	___ftadd@sign,7,c
  5895  0028E8  D000               	goto	l2732
  5896  0028EA                     l2732:
  5897  0028EA  BE3A               	btfsc	___ftadd@f2+2,7,c
  5898  0028EC  8C3E               	bsf	___ftadd@sign,6,c
  5899  0028EE  8E36               	bsf	___ftadd@f1+1,7,c
  5900  0028F0  0EFF               	movlw	255
  5901  0028F2  1635               	andwf	___ftadd@f1,f,c
  5902  0028F4  0EFF               	movlw	255
  5903  0028F6  1636               	andwf	___ftadd@f1+1,f,c
  5904  0028F8  0E00               	movlw	0
  5905  0028FA  1637               	andwf	___ftadd@f1+2,f,c
  5906  0028FC  8E39               	bsf	___ftadd@f2+1,7,c
  5907  0028FE  0EFF               	movlw	255
  5908  002900  1638               	andwf	___ftadd@f2,f,c
  5909  002902  0EFF               	movlw	255
  5910  002904  1639               	andwf	___ftadd@f2+1,f,c
  5911  002906  0E00               	movlw	0
  5912  002908  163A               	andwf	___ftadd@f2+2,f,c
  5913  00290A  503F               	movf	___ftadd@exp2,w,c
  5914  00290C  5C40               	subwf	___ftadd@exp1,w,c
  5915  00290E  B0D8               	btfsc	status,0,c
  5916  002910  D01E               	goto	l2752
  5917  002912                     l2742:
  5918  002912  90D8               	bcf	status,0,c
  5919  002914  3638               	rlcf	___ftadd@f2,f,c
  5920  002916  3639               	rlcf	___ftadd@f2+1,f,c
  5921  002918  363A               	rlcf	___ftadd@f2+2,f,c
  5922  00291A  063F               	decf	___ftadd@exp2,f,c
  5923  00291C  5040               	movf	___ftadd@exp1,w,c
  5924  00291E  183F               	xorwf	___ftadd@exp2,w,c
  5925  002920  B4D8               	btfsc	status,2,c
  5926  002922  D00F               	goto	l2750
  5927  002924  063E               	decf	___ftadd@sign,f,c
  5928  002926  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  5929  00292A  0E07               	movlw	7
  5930  00292C  163B               	andwf	??___ftadd,f,c
  5931  00292E  B4D8               	btfsc	status,2,c
  5932  002930  D008               	goto	l2750
  5933  002932  D7EF               	goto	l2742
  5934  002934  D006               	goto	l2750
  5935  002936                     l2748:
  5936  002936  90D8               	bcf	status,0,c
  5937  002938  3237               	rrcf	___ftadd@f1+2,f,c
  5938  00293A  3236               	rrcf	___ftadd@f1+1,f,c
  5939  00293C  3235               	rrcf	___ftadd@f1,f,c
  5940  00293E  2A40               	incf	___ftadd@exp1,f,c
  5941  002940  D000               	goto	l2750
  5942  002942                     l2750:
  5943  002942  503F               	movf	___ftadd@exp2,w,c
  5944  002944  1840               	xorwf	___ftadd@exp1,w,c
  5945  002946  B4D8               	btfsc	status,2,c
  5946  002948  D024               	goto	l828
  5947  00294A  D7F5               	goto	l2748
  5948  00294C  D022               	goto	l828
  5949  00294E                     l2752:
  5950  00294E  5040               	movf	___ftadd@exp1,w,c
  5951  002950  5C3F               	subwf	___ftadd@exp2,w,c
  5952  002952  B0D8               	btfsc	status,0,c
  5953  002954  D01E               	goto	l828
  5954  002956                     l2754:
  5955  002956  90D8               	bcf	status,0,c
  5956  002958  3635               	rlcf	___ftadd@f1,f,c
  5957  00295A  3636               	rlcf	___ftadd@f1+1,f,c
  5958  00295C  3637               	rlcf	___ftadd@f1+2,f,c
  5959  00295E  0640               	decf	___ftadd@exp1,f,c
  5960  002960  5040               	movf	___ftadd@exp1,w,c
  5961  002962  183F               	xorwf	___ftadd@exp2,w,c
  5962  002964  B4D8               	btfsc	status,2,c
  5963  002966  D00F               	goto	l2762
  5964  002968  063E               	decf	___ftadd@sign,f,c
  5965  00296A  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  5966  00296E  0E07               	movlw	7
  5967  002970  163B               	andwf	??___ftadd,f,c
  5968  002972  B4D8               	btfsc	status,2,c
  5969  002974  D008               	goto	l2762
  5970  002976  D7EF               	goto	l2754
  5971  002978  D006               	goto	l2762
  5972  00297A                     l2760:
  5973  00297A  90D8               	bcf	status,0,c
  5974  00297C  323A               	rrcf	___ftadd@f2+2,f,c
  5975  00297E  3239               	rrcf	___ftadd@f2+1,f,c
  5976  002980  3238               	rrcf	___ftadd@f2,f,c
  5977  002982  2A3F               	incf	___ftadd@exp2,f,c
  5978  002984  D000               	goto	l2762
  5979  002986                     l2762:
  5980  002986  503F               	movf	___ftadd@exp2,w,c
  5981  002988  1840               	xorwf	___ftadd@exp1,w,c
  5982  00298A  B4D8               	btfsc	status,2,c
  5983  00298C  D002               	goto	l828
  5984  00298E  D7F5               	goto	l2760
  5985  002990  D000               	goto	l828
  5986  002992                     l828:
  5987  002992  AE3E               	btfss	___ftadd@sign,7,c
  5988  002994  D00C               	goto	l837
  5989  002996  0EFF               	movlw	255
  5990  002998  1A35               	xorwf	___ftadd@f1,f,c
  5991  00299A  0EFF               	movlw	255
  5992  00299C  1A36               	xorwf	___ftadd@f1+1,f,c
  5993  00299E  0EFF               	movlw	255
  5994  0029A0  1A37               	xorwf	___ftadd@f1+2,f,c
  5995  0029A2  0E01               	movlw	1
  5996  0029A4  2635               	addwf	___ftadd@f1,f,c
  5997  0029A6  0E00               	movlw	0
  5998  0029A8  2236               	addwfc	___ftadd@f1+1,f,c
  5999  0029AA  0E00               	movlw	0
  6000  0029AC  2237               	addwfc	___ftadd@f1+2,f,c
  6001  0029AE                     l837:
  6002  0029AE  AC3E               	btfss	___ftadd@sign,6,c
  6003  0029B0  D00D               	goto	l2768
  6004  0029B2  0EFF               	movlw	255
  6005  0029B4  1A38               	xorwf	___ftadd@f2,f,c
  6006  0029B6  0EFF               	movlw	255
  6007  0029B8  1A39               	xorwf	___ftadd@f2+1,f,c
  6008  0029BA  0EFF               	movlw	255
  6009  0029BC  1A3A               	xorwf	___ftadd@f2+2,f,c
  6010  0029BE  0E01               	movlw	1
  6011  0029C0  2638               	addwf	___ftadd@f2,f,c
  6012  0029C2  0E00               	movlw	0
  6013  0029C4  2239               	addwfc	___ftadd@f2+1,f,c
  6014  0029C6  0E00               	movlw	0
  6015  0029C8  223A               	addwfc	___ftadd@f2+2,f,c
  6016  0029CA  D000               	goto	l2768
  6017  0029CC                     l2768:
  6018  0029CC  0E00               	movlw	0
  6019  0029CE  6E3E               	movwf	___ftadd@sign,c
  6020  0029D0  5035               	movf	___ftadd@f1,w,c
  6021  0029D2  2638               	addwf	___ftadd@f2,f,c
  6022  0029D4  5036               	movf	___ftadd@f1+1,w,c
  6023  0029D6  2239               	addwfc	___ftadd@f2+1,f,c
  6024  0029D8  5037               	movf	___ftadd@f1+2,w,c
  6025  0029DA  223A               	addwfc	___ftadd@f2+2,f,c
  6026  0029DC  AE3A               	btfss	___ftadd@f2+2,7,c
  6027  0029DE  D00F               	goto	l2778
  6028  0029E0  0EFF               	movlw	255
  6029  0029E2  1A38               	xorwf	___ftadd@f2,f,c
  6030  0029E4  0EFF               	movlw	255
  6031  0029E6  1A39               	xorwf	___ftadd@f2+1,f,c
  6032  0029E8  0EFF               	movlw	255
  6033  0029EA  1A3A               	xorwf	___ftadd@f2+2,f,c
  6034  0029EC  0E01               	movlw	1
  6035  0029EE  2638               	addwf	___ftadd@f2,f,c
  6036  0029F0  0E00               	movlw	0
  6037  0029F2  2239               	addwfc	___ftadd@f2+1,f,c
  6038  0029F4  0E00               	movlw	0
  6039  0029F6  223A               	addwfc	___ftadd@f2+2,f,c
  6040  0029F8  0E01               	movlw	1
  6041  0029FA  6E3E               	movwf	___ftadd@sign,c
  6042  0029FC  D000               	goto	l2778
  6043  0029FE                     l2778:
  6044  0029FE  C038  F001         	movff	___ftadd@f2,___ftpack@arg
  6045  002A02  C039  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6046  002A06  C03A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6047  002A0A  C040  F004         	movff	___ftadd@exp1,___ftpack@exp
  6048  002A0E  C03E  F005         	movff	___ftadd@sign,___ftpack@sign
  6049  002A12  ECF5  F017         	call	___ftpack	;wreg free
  6050  002A16  C001  F035         	movff	?___ftpack,?___ftadd
  6051  002A1A  C002  F036         	movff	?___ftpack+1,?___ftadd+1
  6052  002A1E  C003  F037         	movff	?___ftpack+2,?___ftadd+2
  6053  002A22  D000               	goto	l814
  6054  002A24                     l814:
  6055  002A24  0012               	return		;funcret
  6056  002A26                     __end_of___ftadd:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function ___ftneg *****************
  6074 ;; Defined at:
  6075 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  f1              3   24[COMRAM] float 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  3   24[COMRAM] float 
  6082 ;; Registers used:
  6083 ;;		wreg, status,2, status,0
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6089 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;Total ram usage:        3 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_sprintf
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	text17
  6103  0038A8                     __ptext17:
  6104                           	opt stack 0
  6105  0038A8                     ___ftneg:
  6106                           	opt stack 29
  6107                           
  6108                           ;incstack = 0
  6109  0038A8  5019               	movf	___ftneg@f1,w,c
  6110  0038AA  101A               	iorwf	___ftneg@f1+1,w,c
  6111  0038AC  101B               	iorwf	___ftneg@f1+2,w,c
  6112  0038AE  B4D8               	btfsc	status,2,c
  6113  0038B0  D006               	goto	l887
  6114  0038B2  0E00               	movlw	0
  6115  0038B4  1A19               	xorwf	___ftneg@f1,f,c
  6116  0038B6  0E00               	movlw	0
  6117  0038B8  1A1A               	xorwf	___ftneg@f1+1,f,c
  6118  0038BA  0E80               	movlw	128
  6119  0038BC  1A1B               	xorwf	___ftneg@f1+2,f,c
  6120  0038BE                     l887:
  6121  0038BE  C019  F019         	movff	___ftneg@f1,?___ftneg
  6122  0038C2  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  6123  0038C6  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  6124  0038CA  0012               	return		;funcret
  6125  0038CC                     __end_of___ftneg:
  6126                           	opt stack 0
  6127                           tblptru	equ	0xFF8
  6128                           tblptrh	equ	0xFF7
  6129                           tblptrl	equ	0xFF6
  6130                           tablat	equ	0xFF5
  6131                           prodh	equ	0xFF4
  6132                           prodl	equ	0xFF3
  6133                           postinc0	equ	0xFEE
  6134                           wreg	equ	0xFE8
  6135                           indf2	equ	0xFDF
  6136                           postinc2	equ	0xFDE
  6137                           postdec2	equ	0xFDD
  6138                           fsr2h	equ	0xFDA
  6139                           fsr2l	equ	0xFD9
  6140                           status	equ	0xFD8
  6141                           
  6142 ;; *************** function ___ftge *****************
  6143 ;; Defined at:
  6144 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  ff1             3   64[COMRAM] float 
  6147 ;;  ff2             3   67[COMRAM] float 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;		None               void
  6152 ;; Registers used:
  6153 ;;		wreg, status,2, status,0
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6159 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6161 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6162 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6163 ;;Total ram usage:        9 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; This function calls:
  6166 ;;		Nothing
  6167 ;; This function is called by:
  6168 ;;		_main
  6169 ;;		_sprintf
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text18
  6174  0032A6                     __ptext18:
  6175                           	opt stack 0
  6176  0032A6                     ___ftge:
  6177                           	opt stack 29
  6178                           
  6179                           ;incstack = 0
  6180  0032A6  AE43               	btfss	___ftge@ff1+2,7,c
  6181  0032A8  D017               	goto	l3284
  6182  0032AA  C041  F047         	movff	___ftge@ff1,??___ftge
  6183  0032AE  C042  F048         	movff	___ftge@ff1+1,??___ftge+1
  6184  0032B2  C043  F049         	movff	___ftge@ff1+2,??___ftge+2
  6185  0032B6  1E47               	comf	??___ftge,f,c
  6186  0032B8  1E48               	comf	??___ftge+1,f,c
  6187  0032BA  1E49               	comf	??___ftge+2,f,c
  6188  0032BC  2A47               	incf	??___ftge,f,c
  6189  0032BE  0E00               	movlw	0
  6190  0032C0  2248               	addwfc	??___ftge+1,f,c
  6191  0032C2  2249               	addwfc	??___ftge+2,f,c
  6192  0032C4  0E00               	movlw	0
  6193  0032C6  2447               	addwf	??___ftge,w,c
  6194  0032C8  6E41               	movwf	___ftge@ff1,c
  6195  0032CA  0E00               	movlw	0
  6196  0032CC  2048               	addwfc	??___ftge+1,w,c
  6197  0032CE  6E42               	movwf	___ftge@ff1+1,c
  6198  0032D0  0E80               	movlw	128
  6199  0032D2  2049               	addwfc	??___ftge+2,w,c
  6200  0032D4  6E43               	movwf	___ftge@ff1+2,c
  6201  0032D6  D000               	goto	l3284
  6202  0032D8                     l3284:
  6203  0032D8  AE46               	btfss	___ftge@ff2+2,7,c
  6204  0032DA  D017               	goto	l3288
  6205  0032DC  C044  F047         	movff	___ftge@ff2,??___ftge
  6206  0032E0  C045  F048         	movff	___ftge@ff2+1,??___ftge+1
  6207  0032E4  C046  F049         	movff	___ftge@ff2+2,??___ftge+2
  6208  0032E8  1E47               	comf	??___ftge,f,c
  6209  0032EA  1E48               	comf	??___ftge+1,f,c
  6210  0032EC  1E49               	comf	??___ftge+2,f,c
  6211  0032EE  2A47               	incf	??___ftge,f,c
  6212  0032F0  0E00               	movlw	0
  6213  0032F2  2248               	addwfc	??___ftge+1,f,c
  6214  0032F4  2249               	addwfc	??___ftge+2,f,c
  6215  0032F6  0E00               	movlw	0
  6216  0032F8  2447               	addwf	??___ftge,w,c
  6217  0032FA  6E44               	movwf	___ftge@ff2,c
  6218  0032FC  0E00               	movlw	0
  6219  0032FE  2048               	addwfc	??___ftge+1,w,c
  6220  003300  6E45               	movwf	___ftge@ff2+1,c
  6221  003302  0E80               	movlw	128
  6222  003304  2049               	addwfc	??___ftge+2,w,c
  6223  003306  6E46               	movwf	___ftge@ff2+2,c
  6224  003308  D000               	goto	l3288
  6225  00330A                     l3288:
  6226  00330A  0E00               	movlw	0
  6227  00330C  1A41               	xorwf	___ftge@ff1,f,c
  6228  00330E  0E00               	movlw	0
  6229  003310  1A42               	xorwf	___ftge@ff1+1,f,c
  6230  003312  0E80               	movlw	128
  6231  003314  1A43               	xorwf	___ftge@ff1+2,f,c
  6232  003316  0E00               	movlw	0
  6233  003318  1A44               	xorwf	___ftge@ff2,f,c
  6234  00331A  0E00               	movlw	0
  6235  00331C  1A45               	xorwf	___ftge@ff2+1,f,c
  6236  00331E  0E80               	movlw	128
  6237  003320  1A46               	xorwf	___ftge@ff2+2,f,c
  6238  003322  5044               	movf	___ftge@ff2,w,c
  6239  003324  5C41               	subwf	___ftge@ff1,w,c
  6240  003326  5045               	movf	___ftge@ff2+1,w,c
  6241  003328  5842               	subwfb	___ftge@ff1+1,w,c
  6242  00332A  5046               	movf	___ftge@ff2+2,w,c
  6243  00332C  5843               	subwfb	___ftge@ff1+2,w,c
  6244  00332E  B0D8               	btfsc	status,0,c
  6245  003330  D002               	goto	l3294
  6246  003332  90D8               	bcf	status,0,c
  6247  003334  D002               	goto	l871
  6248  003336                     l3294:
  6249  003336  80D8               	bsf	status,0,c
  6250  003338  D000               	goto	l871
  6251  00333A                     l871:
  6252  00333A  0012               	return		;funcret
  6253  00333C                     __end_of___ftge:
  6254                           	opt stack 0
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           postinc0	equ	0xFEE
  6262                           wreg	equ	0xFE8
  6263                           indf2	equ	0xFDF
  6264                           postinc2	equ	0xFDE
  6265                           postdec2	equ	0xFDD
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function ___ftdiv *****************
  6271 ;; Defined at:
  6272 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  f1              3   49[COMRAM] float 
  6275 ;;  f2              3   52[COMRAM] float 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  f3              3   59[COMRAM] float 
  6278 ;;  sign            1   63[COMRAM] unsigned char 
  6279 ;;  exp             1   62[COMRAM] unsigned char 
  6280 ;;  cntr            1   58[COMRAM] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  3   49[COMRAM] float 
  6283 ;; Registers used:
  6284 ;;		wreg, status,2, status,0, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6290 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;Total ram usage:       15 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    1
  6297 ;; This function calls:
  6298 ;;		___ftpack
  6299 ;; This function is called by:
  6300 ;;		_main
  6301 ;;		_sprintf
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           	psect	text19
  6306  002F08                     __ptext19:
  6307                           	opt stack 0
  6308  002F08                     ___ftdiv:
  6309                           	opt stack 28
  6310                           
  6311                           ;incstack = 0
  6312  002F08  C034  F038         	movff	___ftdiv@f1+2,??___ftdiv
  6313  002F0C  6A39               	clrf	(??___ftdiv+1)& (0+255),c
  6314  002F0E  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
  6315  002F10  3433               	rlcf	___ftdiv@f1+1,w,c
  6316  002F12  3638               	rlcf	??___ftdiv& (0+255),f,c
  6317  002F14  E301               	bnc	u2911
  6318  002F16  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
  6319  002F18                     u2911:
  6320  002F18  5038               	movf	??___ftdiv,w,c
  6321  002F1A  6E3F               	movwf	___ftdiv@exp,c
  6322  002F1C  503F               	movf	___ftdiv@exp,w,c
  6323  002F1E  A4D8               	btfss	status,2,c
  6324  002F20  D002               	goto	l3232
  6325  002F22  D00E               	goto	l3234
  6326  002F24  D061               	goto	l845
  6327  002F26                     l3232:
  6328  002F26  C037  F038         	movff	___ftdiv@f2+2,??___ftdiv
  6329  002F2A  6A39               	clrf	(??___ftdiv+1)& (0+255),c
  6330  002F2C  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
  6331  002F2E  3436               	rlcf	___ftdiv@f2+1,w,c
  6332  002F30  3638               	rlcf	??___ftdiv& (0+255),f,c
  6333  002F32  E301               	bnc	u2931
  6334  002F34  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
  6335  002F36                     u2931:
  6336  002F36  5038               	movf	??___ftdiv,w,c
  6337  002F38  6E40               	movwf	___ftdiv@sign,c
  6338  002F3A  5040               	movf	___ftdiv@sign,w,c
  6339  002F3C  A4D8               	btfss	status,2,c
  6340  002F3E  D007               	goto	l3238
  6341  002F40                     l3234:
  6342  002F40  0E00               	movlw	0
  6343  002F42  6E32               	movwf	?___ftdiv,c
  6344  002F44  0E00               	movlw	0
  6345  002F46  6E33               	movwf	?___ftdiv+1,c
  6346  002F48  0E00               	movlw	0
  6347  002F4A  6E34               	movwf	?___ftdiv+2,c
  6348  002F4C  D04D               	goto	l845
  6349  002F4E                     l3238:
  6350  002F4E  0E00               	movlw	0
  6351  002F50  6E3C               	movwf	___ftdiv@f3,c
  6352  002F52  0E00               	movlw	0
  6353  002F54  6E3D               	movwf	___ftdiv@f3+1,c
  6354  002F56  0E00               	movlw	0
  6355  002F58  6E3E               	movwf	___ftdiv@f3+2,c
  6356  002F5A  5040               	movf	___ftdiv@sign,w,c
  6357  002F5C  0F89               	addlw	137
  6358  002F5E  5E3F               	subwf	___ftdiv@exp,f,c
  6359  002F60  C034  F040         	movff	___ftdiv@f1+2,___ftdiv@sign
  6360  002F64  5037               	movf	___ftdiv@f2+2,w,c
  6361  002F66  1A40               	xorwf	___ftdiv@sign,f,c
  6362  002F68  0E80               	movlw	128
  6363  002F6A  1640               	andwf	___ftdiv@sign,f,c
  6364  002F6C  8E33               	bsf	___ftdiv@f1+1,7,c
  6365  002F6E  0EFF               	movlw	255
  6366  002F70  1632               	andwf	___ftdiv@f1,f,c
  6367  002F72  0EFF               	movlw	255
  6368  002F74  1633               	andwf	___ftdiv@f1+1,f,c
  6369  002F76  0E00               	movlw	0
  6370  002F78  1634               	andwf	___ftdiv@f1+2,f,c
  6371  002F7A  8E36               	bsf	___ftdiv@f2+1,7,c
  6372  002F7C  0EFF               	movlw	255
  6373  002F7E  1635               	andwf	___ftdiv@f2,f,c
  6374  002F80  0EFF               	movlw	255
  6375  002F82  1636               	andwf	___ftdiv@f2+1,f,c
  6376  002F84  0E00               	movlw	0
  6377  002F86  1637               	andwf	___ftdiv@f2+2,f,c
  6378  002F88  0E18               	movlw	24
  6379  002F8A  6E3B               	movwf	___ftdiv@cntr,c
  6380  002F8C  D000               	goto	l3258
  6381  002F8E                     l3258:
  6382  002F8E  90D8               	bcf	status,0,c
  6383  002F90  363C               	rlcf	___ftdiv@f3,f,c
  6384  002F92  363D               	rlcf	___ftdiv@f3+1,f,c
  6385  002F94  363E               	rlcf	___ftdiv@f3+2,f,c
  6386  002F96  5035               	movf	___ftdiv@f2,w,c
  6387  002F98  5C32               	subwf	___ftdiv@f1,w,c
  6388  002F9A  5036               	movf	___ftdiv@f2+1,w,c
  6389  002F9C  5833               	subwfb	___ftdiv@f1+1,w,c
  6390  002F9E  5037               	movf	___ftdiv@f2+2,w,c
  6391  002FA0  5834               	subwfb	___ftdiv@f1+2,w,c
  6392  002FA2  A0D8               	btfss	status,0,c
  6393  002FA4  D007               	goto	l848
  6394  002FA6  5035               	movf	___ftdiv@f2,w,c
  6395  002FA8  5E32               	subwf	___ftdiv@f1,f,c
  6396  002FAA  5036               	movf	___ftdiv@f2+1,w,c
  6397  002FAC  5A33               	subwfb	___ftdiv@f1+1,f,c
  6398  002FAE  5037               	movf	___ftdiv@f2+2,w,c
  6399  002FB0  5A34               	subwfb	___ftdiv@f1+2,f,c
  6400  002FB2  803C               	bsf	___ftdiv@f3,0,c
  6401  002FB4                     l848:
  6402  002FB4  90D8               	bcf	status,0,c
  6403  002FB6  3632               	rlcf	___ftdiv@f1,f,c
  6404  002FB8  3633               	rlcf	___ftdiv@f1+1,f,c
  6405  002FBA  3634               	rlcf	___ftdiv@f1+2,f,c
  6406  002FBC  2E3B               	decfsz	___ftdiv@cntr,f,c
  6407  002FBE  D7E7               	goto	l3258
  6408  002FC0  D000               	goto	l3268
  6409  002FC2                     l3268:
  6410  002FC2  C03C  F001         	movff	___ftdiv@f3,___ftpack@arg
  6411  002FC6  C03D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6412  002FCA  C03E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6413  002FCE  C03F  F004         	movff	___ftdiv@exp,___ftpack@exp
  6414  002FD2  C040  F005         	movff	___ftdiv@sign,___ftpack@sign
  6415  002FD6  ECF5  F017         	call	___ftpack	;wreg free
  6416  002FDA  C001  F032         	movff	?___ftpack,?___ftdiv
  6417  002FDE  C002  F033         	movff	?___ftpack+1,?___ftdiv+1
  6418  002FE2  C003  F034         	movff	?___ftpack+2,?___ftdiv+2
  6419  002FE6  D000               	goto	l845
  6420  002FE8                     l845:
  6421  002FE8  0012               	return		;funcret
  6422  002FEA                     __end_of___ftdiv:
  6423                           	opt stack 0
  6424                           tblptru	equ	0xFF8
  6425                           tblptrh	equ	0xFF7
  6426                           tblptrl	equ	0xFF6
  6427                           tablat	equ	0xFF5
  6428                           prodh	equ	0xFF4
  6429                           prodl	equ	0xFF3
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _putsXLCD *****************
  6440 ;; Defined at:
  6441 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\putsxlcd.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  buffer          2    2[COMRAM] PTR unsigned char 
  6444 ;;		 -> stringKeyActual(10), stringKey(10), 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;		None               void
  6449 ;; Registers used:
  6450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;Total ram usage:        2 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    3
  6463 ;; This function calls:
  6464 ;;		_BusyXLCD
  6465 ;;		_WriteDataXLCD
  6466 ;; This function is called by:
  6467 ;;		_main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text20
  6472  003828                     __ptext20:
  6473                           	opt stack 0
  6474  003828                     _putsXLCD:
  6475                           	opt stack 27
  6476                           
  6477                           ;incstack = 0
  6478  003828  D010               	goto	l3538
  6479  00382A  D000               	goto	l3532
  6480  00382C                     l3532:
  6481  00382C  ECBF  F01B         	call	_BusyXLCD	;wreg free
  6482  003830  0900               	iorlw	0
  6483  003832  A4D8               	btfss	status,2,c
  6484  003834  D7FB               	goto	l3532
  6485  003836  C003  FFD9         	movff	putsXLCD@buffer,fsr2l
  6486  00383A  C004  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6487  00383E  50DF               	movf	indf2,w,c
  6488  003840  EC7F  F01B         	call	_WriteDataXLCD
  6489  003844  4A03               	infsnz	putsXLCD@buffer,f,c
  6490  003846  2A04               	incf	putsXLCD@buffer+1,f,c
  6491  003848  D000               	goto	l3538
  6492  00384A                     l3538:
  6493  00384A  C003  FFD9         	movff	putsXLCD@buffer,fsr2l
  6494  00384E  C004  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6495  003852  50DF               	movf	indf2,w,c
  6496  003854  A4D8               	btfss	status,2,c
  6497  003856  D7EA               	goto	l3532
  6498  003858  0012               	return		;funcret
  6499  00385A                     __end_of_putsXLCD:
  6500                           	opt stack 0
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _putrsXLCD *****************
  6517 ;; Defined at:
  6518 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\putrxlcd.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  buffer          2    2[COMRAM] PTR const unsigned char 
  6521 ;;		 -> STR_10(3), STR_9(10), STR_7(11), STR_6(17), 
  6522 ;;		 -> STR_5(11), STR_4(11), STR_3(15), STR_2(16), 
  6523 ;;		 -> STR_1(10), 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    3
  6542 ;; This function calls:
  6543 ;;		_BusyXLCD
  6544 ;;		_WriteDataXLCD
  6545 ;; This function is called by:
  6546 ;;		_main
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text21
  6551  0037BA                     __ptext21:
  6552                           	opt stack 0
  6553  0037BA                     _putrsXLCD:
  6554                           	opt stack 27
  6555                           
  6556                           ;incstack = 0
  6557  0037BA  D011               	goto	l3470
  6558  0037BC  D000               	goto	l3464
  6559  0037BE                     l3464:
  6560  0037BE  ECBF  F01B         	call	_BusyXLCD	;wreg free
  6561  0037C2  0900               	iorlw	0
  6562  0037C4  A4D8               	btfss	status,2,c
  6563  0037C6  D7FB               	goto	l3464
  6564  0037C8  C003  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6565  0037CC  C004  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6566  0037D0                     	if	0	;tblptru may be non-zero
  6567  0037D0                     	endif
  6568  0037D0                     	if	0	;tblptru may be non-zero
  6569  0037D0                     	endif
  6570  0037D0  0008               	tblrd		*
  6571  0037D2  50F5               	movf	tablat,w,c
  6572  0037D4  EC7F  F01B         	call	_WriteDataXLCD
  6573  0037D8  4A03               	infsnz	putrsXLCD@buffer,f,c
  6574  0037DA  2A04               	incf	putrsXLCD@buffer+1,f,c
  6575  0037DC  D000               	goto	l3470
  6576  0037DE                     l3470:
  6577  0037DE  C003  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6578  0037E2  C004  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6579  0037E6                     	if	0	;tblptru may be non-zero
  6580  0037E6                     	endif
  6581  0037E6                     	if	0	;tblptru may be non-zero
  6582  0037E6                     	endif
  6583  0037E6  0008               	tblrd		*
  6584  0037E8  50F5               	movf	tablat,w,c
  6585  0037EA  0900               	iorlw	0
  6586  0037EC  A4D8               	btfss	status,2,c
  6587  0037EE  D7E7               	goto	l3464
  6588  0037F0  0012               	return		;funcret
  6589  0037F2                     __end_of_putrsXLCD:
  6590                           	opt stack 0
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           postinc0	equ	0xFEE
  6598                           wreg	equ	0xFE8
  6599                           indf2	equ	0xFDF
  6600                           postinc2	equ	0xFDE
  6601                           postdec2	equ	0xFDD
  6602                           fsr2h	equ	0xFDA
  6603                           fsr2l	equ	0xFD9
  6604                           status	equ	0xFD8
  6605                           
  6606 ;; *************** function _WriteDataXLCD *****************
  6607 ;; Defined at:
  6608 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\writdata.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  data            1    wreg     unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  data            1    1[COMRAM] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;		None               void
  6615 ;; Registers used:
  6616 ;;		wreg, status,2, status,0, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;Total ram usage:        1 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    2
  6629 ;; This function calls:
  6630 ;;		_DelayFor18TCY
  6631 ;; This function is called by:
  6632 ;;		_main
  6633 ;;		_putrsXLCD
  6634 ;;		_putsXLCD
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text22
  6639  0036FE                     __ptext22:
  6640                           	opt stack 0
  6641  0036FE                     _WriteDataXLCD:
  6642                           	opt stack 27
  6643                           
  6644                           ;incstack = 0
  6645                           ;WriteDataXLCD@data stored from wreg
  6646  0036FE  6E02               	movwf	WriteDataXLCD@data,c
  6647  003700  0EF0               	movlw	240
  6648  003702  1693               	andwf	3987,f,c	;volatile
  6649  003704  0EF0               	movlw	240
  6650  003706  1681               	andwf	3969,f,c	;volatile
  6651  003708  3802               	swapf	WriteDataXLCD@data,w,c
  6652  00370A  0B0F               	andlw	15
  6653  00370C  0B0F               	andlw	15
  6654  00370E  1281               	iorwf	3969,f,c	;volatile
  6655  003710  8A8A               	bsf	3978,5,c	;volatile
  6656  003712  9C8A               	bcf	3978,6,c	;volatile
  6657  003714  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  6658  003718  888A               	bsf	3978,4,c	;volatile
  6659  00371A  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  6660  00371E  988A               	bcf	3978,4,c	;volatile
  6661  003720  0EF0               	movlw	240
  6662  003722  1681               	andwf	3969,f,c	;volatile
  6663  003724  5002               	movf	WriteDataXLCD@data,w,c
  6664  003726  0B0F               	andlw	15
  6665  003728  1281               	iorwf	3969,f,c	;volatile
  6666  00372A  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  6667  00372E  888A               	bsf	3978,4,c	;volatile
  6668  003730  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  6669  003734  988A               	bcf	3978,4,c	;volatile
  6670  003736  0E0F               	movlw	15
  6671  003738  1293               	iorwf	3987,f,c	;volatile
  6672  00373A  D000               	goto	l424
  6673  00373C                     l424:
  6674  00373C  0012               	return		;funcret
  6675  00373E                     __end_of_WriteDataXLCD:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           postinc0	equ	0xFEE
  6684                           wreg	equ	0xFE8
  6685                           indf2	equ	0xFDF
  6686                           postinc2	equ	0xFDE
  6687                           postdec2	equ	0xFDD
  6688                           fsr2h	equ	0xFDA
  6689                           fsr2l	equ	0xFD9
  6690                           status	equ	0xFD8
  6691                           
  6692 ;; *************** function _kbd_getc *****************
  6693 ;; Defined at:
  6694 ;;		line 188 in file "main.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  row             1    4[COMRAM] unsigned char 
  6699 ;;  key             1    3[COMRAM] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  2    0[COMRAM] int 
  6702 ;; Registers used:
  6703 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;Total ram usage:        5 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; This function calls:
  6716 ;;		Nothing
  6717 ;; This function is called by:
  6718 ;;		_main
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           	psect	text23
  6723  002D38                     __ptext23:
  6724                           	opt stack 0
  6725  002D38                     _kbd_getc:
  6726                           	opt stack 30
  6727                           
  6728                           ;main.c: 190: char key = 0, row;
  6729                           
  6730                           ;incstack = 0
  6731  002D38  0E00               	movlw	0
  6732  002D3A  6E04               	movwf	kbd_getc@key,c
  6733                           
  6734                           ;main.c: 192: for( row = 0b00000001; row < 0b00010000; row <<= 1 )
  6735  002D3C  0E01               	movlw	1
  6736  002D3E  6E05               	movwf	kbd_getc@row,c
  6737  002D40  D04F               	goto	l3502
  6738  002D42  D051               	goto	l124
  6739  002D44                     l3478:
  6740                           
  6741                           ;main.c: 193: {
  6742                           ;main.c: 194: {
  6743                           ;main.c: 195: LATCbits.LATC0 = (row & 0x0001)>>0;
  6744  002D44  C005  F003         	movff	kbd_getc@row,??_kbd_getc
  6745  002D48  0E01               	movlw	1
  6746  002D4A  1603               	andwf	??_kbd_getc,f,c
  6747  002D4C  508B               	movf	3979,w,c	;volatile
  6748  002D4E  1803               	xorwf	??_kbd_getc,w,c
  6749  002D50  0BFE               	andlw	-2
  6750  002D52  1803               	xorwf	??_kbd_getc,w,c
  6751  002D54  6E8B               	movwf	3979,c	;volatile
  6752                           
  6753                           ;main.c: 196: LATCbits.LATC1 = (row & 0x0002)>>1;
  6754  002D56  C005  F003         	movff	kbd_getc@row,??_kbd_getc
  6755  002D5A  90D8               	bcf	status,0,c
  6756  002D5C  3203               	rrcf	??_kbd_getc,f,c
  6757  002D5E  0E01               	movlw	1
  6758  002D60  1603               	andwf	??_kbd_getc,f,c
  6759  002D62  4603               	rlncf	??_kbd_getc,f,c
  6760  002D64  508B               	movf	3979,w,c	;volatile
  6761  002D66  1803               	xorwf	??_kbd_getc,w,c
  6762  002D68  0BFD               	andlw	-3
  6763  002D6A  1803               	xorwf	??_kbd_getc,w,c
  6764  002D6C  6E8B               	movwf	3979,c	;volatile
  6765                           
  6766                           ;main.c: 197: LATCbits.LATC2 = (row & 0x0004)>>2;
  6767  002D6E  C005  F003         	movff	kbd_getc@row,??_kbd_getc
  6768  002D72  90D8               	bcf	status,0,c
  6769  002D74  3203               	rrcf	??_kbd_getc,f,c
  6770  002D76  90D8               	bcf	status,0,c
  6771  002D78  3203               	rrcf	??_kbd_getc,f,c
  6772  002D7A  0E01               	movlw	1
  6773  002D7C  1603               	andwf	??_kbd_getc,f,c
  6774  002D7E  4603               	rlncf	??_kbd_getc,f,c
  6775  002D80  4603               	rlncf	??_kbd_getc,f,c
  6776  002D82  508B               	movf	3979,w,c	;volatile
  6777  002D84  1803               	xorwf	??_kbd_getc,w,c
  6778  002D86  0BFB               	andlw	-5
  6779  002D88  1803               	xorwf	??_kbd_getc,w,c
  6780  002D8A  6E8B               	movwf	3979,c	;volatile
  6781                           
  6782                           ;main.c: 198: LATCbits.LATC3 = (row & 0x0008)>>3;
  6783  002D8C  C005  F003         	movff	kbd_getc@row,??_kbd_getc
  6784  002D90  90D8               	bcf	status,0,c
  6785  002D92  3203               	rrcf	??_kbd_getc,f,c
  6786  002D94  90D8               	bcf	status,0,c
  6787  002D96  3203               	rrcf	??_kbd_getc,f,c
  6788  002D98  90D8               	bcf	status,0,c
  6789  002D9A  3203               	rrcf	??_kbd_getc,f,c
  6790  002D9C  0E01               	movlw	1
  6791  002D9E  1603               	andwf	??_kbd_getc,f,c
  6792  002DA0  4603               	rlncf	??_kbd_getc,f,c
  6793  002DA2  4603               	rlncf	??_kbd_getc,f,c
  6794  002DA4  4603               	rlncf	??_kbd_getc,f,c
  6795  002DA6  508B               	movf	3979,w,c	;volatile
  6796  002DA8  1803               	xorwf	??_kbd_getc,w,c
  6797  002DAA  0BF7               	andlw	-9
  6798  002DAC  1803               	xorwf	??_kbd_getc,w,c
  6799  002DAE  6E8B               	movwf	3979,c	;volatile
  6800                           
  6801                           ;main.c: 199: _delay((unsigned long)((1)*(8000000/4000.0)));
  6802  002DB0  0E03               	movlw	3
  6803  002DB2  6E03               	movwf	??_kbd_getc& (0+255),c
  6804  002DB4  0E98               	movlw	152
  6805  002DB6                     u4057:
  6806  002DB6  2EE8               	decfsz	wreg,f,c
  6807  002DB8  D7FE               	goto	u4057
  6808  002DBA  2E03               	decfsz	??_kbd_getc& (0+255),f,c
  6809  002DBC  D7FC               	goto	u4057
  6810                           
  6811                           ;main.c: 200: }
  6812                           ;main.c: 202: if( PORTCbits.RC4 )break; key++;
  6813  002DBE  B882               	btfsc	3970,4,c	;volatile
  6814  002DC0  D012               	goto	l124
  6815  002DC2  D001               	goto	l3486
  6816  002DC4  D010               	goto	l124
  6817  002DC6                     l3486:
  6818  002DC6  2A04               	incf	kbd_getc@key,f,c
  6819                           
  6820                           ;main.c: 203: if( PORTCbits.RC5 )break; key++;
  6821  002DC8  BA82               	btfsc	3970,5,c	;volatile
  6822  002DCA  D00D               	goto	l124
  6823  002DCC  D001               	goto	l3492
  6824  002DCE  D00B               	goto	l124
  6825  002DD0                     l3492:
  6826  002DD0  2A04               	incf	kbd_getc@key,f,c
  6827                           
  6828                           ;main.c: 204: if( PORTCbits.RC6 )break; key++;
  6829  002DD2  BC82               	btfsc	3970,6,c	;volatile
  6830  002DD4  D008               	goto	l124
  6831  002DD6  D001               	goto	l3498
  6832  002DD8  D006               	goto	l124
  6833  002DDA                     l3498:
  6834  002DDA  2A04               	incf	kbd_getc@key,f,c
  6835  002DDC  90D8               	bcf	status,0,c
  6836  002DDE  3605               	rlcf	kbd_getc@row,f,c
  6837  002DE0                     l3502:
  6838  002DE0  0E0F               	movlw	15
  6839  002DE2  6405               	cpfsgt	kbd_getc@row,c
  6840  002DE4  D7AF               	goto	l3478
  6841  002DE6                     l124:
  6842                           
  6843                           ;main.c: 206: }
  6844                           ;main.c: 207: LATCbits.LATC0 = 0;
  6845  002DE6  908B               	bcf	3979,0,c	;volatile
  6846                           
  6847                           ;main.c: 208: LATCbits.LATC1 = 0;
  6848  002DE8  928B               	bcf	3979,1,c	;volatile
  6849                           
  6850                           ;main.c: 209: LATCbits.LATC2 = 0;
  6851  002DEA  948B               	bcf	3979,2,c	;volatile
  6852                           
  6853                           ;main.c: 210: LATCbits.LATC3 = 0;
  6854  002DEC  968B               	bcf	3979,3,c	;volatile
  6855                           
  6856                           ;main.c: 211: if (key!=old_key){
  6857  002DEE  507D               	movf	_old_key,w,c
  6858  002DF0  1804               	xorwf	kbd_getc@key,w,c
  6859  002DF2  B4D8               	btfsc	status,2,c
  6860  002DF4  D00C               	goto	l3514
  6861                           
  6862                           ;main.c: 212: old_key=key;
  6863  002DF6  C004  F07D         	movff	kbd_getc@key,_old_key
  6864                           
  6865                           ;main.c: 213: return keyPadMatrix[ key ];
  6866  002DFA  5004               	movf	kbd_getc@key,w,c
  6867  002DFC  0D01               	mullw	1
  6868  002DFE  0E77               	movlw	low _keyPadMatrix
  6869  002E00  24F3               	addwf	prodl,w,c
  6870  002E02  6EF6               	movwf	tblptrl,c
  6871  002E04  0E10               	movlw	high _keyPadMatrix
  6872  002E06  20F4               	addwfc	prodh,w,c
  6873  002E08  6EF7               	movwf	tblptrh,c
  6874  002E0A                     	if	0	;There are less than 3 active tblptr bytes
  6875  002E0A  D005               	goto	L11
  6876                           
  6877                           ;main.c: 214: }
  6878  002E0C  D009               	goto	l129
  6879  002E0E                     l3514:
  6880                           
  6881                           ;main.c: 215: else
  6882                           ;main.c: 216: return keyPadMatrix[ 0x0C ];
  6883  002E0E  0E83               	movlw	low (_keyPadMatrix+12)
  6884  002E10  6EF6               	movwf	tblptrl,c
  6885  002E12  0E10               	movlw	high (_keyPadMatrix+12)
  6886  002E14  6EF7               	movwf	tblptrh,c
  6887  002E16                     	if	0	;tblptru may be non-zero
  6888  002E16                     	endif
  6889  002E16                     	if	0	;tblptru may be non-zero
  6890  002E16                     L11:
  6891  002E16                     	endif
  6892  002E16  0008               	tblrd		*
  6893  002E18  50F5               	movf	tablat,w,c
  6894  002E1A  6E01               	movwf	?_kbd_getc,c
  6895  002E1C  6A02               	clrf	?_kbd_getc+1,c
  6896  002E1E  D000               	goto	l129
  6897  002E20                     l129:
  6898  002E20  0012               	return		;funcret
  6899  002E22                     __end_of_kbd_getc:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           postinc0	equ	0xFEE
  6908                           wreg	equ	0xFE8
  6909                           indf2	equ	0xFDF
  6910                           postinc2	equ	0xFDE
  6911                           postdec2	equ	0xFDD
  6912                           fsr2h	equ	0xFDA
  6913                           fsr2l	equ	0xFD9
  6914                           status	equ	0xFD8
  6915                           
  6916 ;; *************** function _itoa *****************
  6917 ;; Defined at:
  6918 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\itoa.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  buf             2   16[COMRAM] PTR unsigned char 
  6921 ;;		 -> stringKey(10), 
  6922 ;;  val             2   18[COMRAM] int 
  6923 ;;  base            2   20[COMRAM] int 
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  cp              2   22[COMRAM] PTR unsigned char 
  6926 ;;		 -> stringKey(10), 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  2   16[COMRAM] PTR unsigned char 
  6929 ;; Registers used:
  6930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6936 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;Total ram usage:        8 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    2
  6943 ;; This function calls:
  6944 ;;		_utoa
  6945 ;; This function is called by:
  6946 ;;		_main
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           	psect	text24
  6951  003674                     __ptext24:
  6952                           	opt stack 0
  6953  003674                     _itoa:
  6954                           	opt stack 28
  6955                           
  6956                           ;incstack = 0
  6957  003674  C011  F017         	movff	itoa@buf,itoa@cp
  6958  003678  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  6959  00367C  AE14               	btfss	itoa@val+1,7,c
  6960  00367E  D00D               	goto	l3526
  6961  003680  C011  FFD9         	movff	itoa@buf,fsr2l
  6962  003684  C012  FFDA         	movff	itoa@buf+1,fsr2h
  6963  003688  0E2D               	movlw	45
  6964  00368A  6EDF               	movwf	indf2,c
  6965  00368C  4A11               	infsnz	itoa@buf,f,c
  6966  00368E  2A12               	incf	itoa@buf+1,f,c
  6967  003690  6C13               	negf	itoa@val,c
  6968  003692  1E14               	comf	itoa@val+1,f,c
  6969  003694  B0D8               	btfsc	status,0,c
  6970  003696  2A14               	incf	itoa@val+1,f,c
  6971  003698  D000               	goto	l3526
  6972  00369A                     l3526:
  6973  00369A  C011  F008         	movff	itoa@buf,utoa@buf
  6974  00369E  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  6975  0036A2  C013  F00A         	movff	itoa@val,utoa@val
  6976  0036A6  C014  F00B         	movff	itoa@val+1,utoa@val+1
  6977  0036AA  C015  F00C         	movff	itoa@base,utoa@base
  6978  0036AE  C016  F00D         	movff	itoa@base+1,utoa@base+1
  6979  0036B2  ECB3  F018         	call	_utoa	;wreg free
  6980  0036B6  D000               	goto	l919
  6981  0036B8                     l919:
  6982  0036B8  0012               	return		;funcret
  6983  0036BA                     __end_of_itoa:
  6984                           	opt stack 0
  6985                           tblptru	equ	0xFF8
  6986                           tblptrh	equ	0xFF7
  6987                           tblptrl	equ	0xFF6
  6988                           tablat	equ	0xFF5
  6989                           prodh	equ	0xFF4
  6990                           prodl	equ	0xFF3
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           postdec2	equ	0xFDD
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000 ;; *************** function _utoa *****************
  7001 ;; Defined at:
  7002 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\itoa.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  buf             2    7[COMRAM] PTR unsigned char 
  7005 ;;		 -> stringKey(10), 
  7006 ;;  val             2    9[COMRAM] unsigned int 
  7007 ;;  base            2   11[COMRAM] int 
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  v               2   13[COMRAM] unsigned int 
  7010 ;;  c               1   15[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  2    7[COMRAM] PTR unsigned char 
  7013 ;; Registers used:
  7014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        9 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    1
  7027 ;; This function calls:
  7028 ;;		___lwdiv
  7029 ;;		___lwmod
  7030 ;; This function is called by:
  7031 ;;		_itoa
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text25
  7036  003166                     __ptext25:
  7037                           	opt stack 0
  7038  003166                     _utoa:
  7039                           	opt stack 28
  7040                           
  7041                           ;incstack = 0
  7042  003166  C00A  F00E         	movff	utoa@val,utoa@v
  7043  00316A  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  7044  00316E  D000               	goto	l3350
  7045  003170                     l3350:
  7046  003170  C00E  F001         	movff	utoa@v,___lwdiv@dividend
  7047  003174  C00F  F002         	movff	utoa@v+1,___lwdiv@dividend+1
  7048  003178  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  7049  00317C  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  7050  003180  ECBC  F01A         	call	___lwdiv	;wreg free
  7051  003184  C001  F00E         	movff	?___lwdiv,utoa@v
  7052  003188  C002  F00F         	movff	?___lwdiv+1,utoa@v+1
  7053  00318C  4A08               	infsnz	utoa@buf,f,c
  7054  00318E  2A09               	incf	utoa@buf+1,f,c
  7055  003190  500E               	movf	utoa@v,w,c
  7056  003192  100F               	iorwf	utoa@v+1,w,c
  7057  003194  A4D8               	btfss	status,2,c
  7058  003196  D7EC               	goto	l3350
  7059  003198  C008  FFD9         	movff	utoa@buf,fsr2l
  7060  00319C  C009  FFDA         	movff	utoa@buf+1,fsr2h
  7061  0031A0  0E00               	movlw	0
  7062  0031A2  6EDF               	movwf	indf2,c
  7063  0031A4  0608               	decf	utoa@buf,f,c
  7064  0031A6  A0D8               	btfss	status,0,c
  7065  0031A8  0609               	decf	utoa@buf+1,f,c
  7066  0031AA  D000               	goto	l3360
  7067  0031AC                     l3360:
  7068  0031AC  C00A  F001         	movff	utoa@val,___lwmod@dividend
  7069  0031B0  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  7070  0031B4  C00C  F003         	movff	utoa@base,___lwmod@divisor
  7071  0031B8  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  7072  0031BC  EC14  F01B         	call	___lwmod	;wreg free
  7073  0031C0  5001               	movf	?___lwmod,w,c
  7074  0031C2  6E10               	movwf	utoa@c,c
  7075  0031C4  C00A  F001         	movff	utoa@val,___lwdiv@dividend
  7076  0031C8  C00B  F002         	movff	utoa@val+1,___lwdiv@dividend+1
  7077  0031CC  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  7078  0031D0  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  7079  0031D4  ECBC  F01A         	call	___lwdiv	;wreg free
  7080  0031D8  C001  F00A         	movff	?___lwdiv,utoa@val
  7081  0031DC  C002  F00B         	movff	?___lwdiv+1,utoa@val+1
  7082  0031E0  0E09               	movlw	9
  7083  0031E2  6410               	cpfsgt	utoa@c,c
  7084  0031E4  D002               	goto	l925
  7085  0031E6  0E07               	movlw	7
  7086  0031E8  2610               	addwf	utoa@c,f,c
  7087  0031EA                     l925:
  7088  0031EA  0E30               	movlw	48
  7089  0031EC  2610               	addwf	utoa@c,f,c
  7090  0031EE  C008  FFD9         	movff	utoa@buf,fsr2l
  7091  0031F2  C009  FFDA         	movff	utoa@buf+1,fsr2h
  7092  0031F6  C010  FFDF         	movff	utoa@c,indf2
  7093  0031FA  0608               	decf	utoa@buf,f,c
  7094  0031FC  A0D8               	btfss	status,0,c
  7095  0031FE  0609               	decf	utoa@buf+1,f,c
  7096  003200  500A               	movf	utoa@val,w,c
  7097  003202  100B               	iorwf	utoa@val+1,w,c
  7098  003204  A4D8               	btfss	status,2,c
  7099  003206  D7D2               	goto	l3360
  7100                           
  7101                           ;	Return value of _utoa is never used
  7102  003208  4A08               	infsnz	utoa@buf,f,c
  7103  00320A  2A09               	incf	utoa@buf+1,f,c
  7104  00320C  D000               	goto	l927
  7105  00320E                     l927:
  7106  00320E  0012               	return		;funcret
  7107  003210                     __end_of_utoa:
  7108                           	opt stack 0
  7109                           tblptru	equ	0xFF8
  7110                           tblptrh	equ	0xFF7
  7111                           tblptrl	equ	0xFF6
  7112                           tablat	equ	0xFF5
  7113                           prodh	equ	0xFF4
  7114                           prodl	equ	0xFF3
  7115                           postinc0	equ	0xFEE
  7116                           wreg	equ	0xFE8
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function ___lwmod *****************
  7125 ;; Defined at:
  7126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  dividend        2    0[COMRAM] unsigned int 
  7129 ;;  divisor         2    2[COMRAM] unsigned int 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;  counter         1    4[COMRAM] unsigned char 
  7132 ;; Return value:  Size  Location     Type
  7133 ;;                  2    0[COMRAM] unsigned int 
  7134 ;; Registers used:
  7135 ;;		wreg, status,2, status,0
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;Total ram usage:        5 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_utoa
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text26
  7155  003628                     __ptext26:
  7156                           	opt stack 0
  7157  003628                     ___lwmod:
  7158                           	opt stack 28
  7159                           
  7160                           ;incstack = 0
  7161  003628  5003               	movf	___lwmod@divisor,w,c
  7162  00362A  1004               	iorwf	___lwmod@divisor+1,w,c
  7163  00362C  B4D8               	btfsc	status,2,c
  7164  00362E  D01D               	goto	l1029
  7165  003630  0E01               	movlw	1
  7166  003632  6E05               	movwf	___lwmod@counter,c
  7167  003634  D005               	goto	l2938
  7168  003636                     l2936:
  7169  003636  90D8               	bcf	status,0,c
  7170  003638  3603               	rlcf	___lwmod@divisor,f,c
  7171  00363A  3604               	rlcf	___lwmod@divisor+1,f,c
  7172  00363C  2A05               	incf	___lwmod@counter,f,c
  7173  00363E  D000               	goto	l2938
  7174  003640                     l2938:
  7175  003640  BE04               	btfsc	___lwmod@divisor+1,7,c
  7176  003642  D002               	goto	l2940
  7177  003644  D7F8               	goto	l2936
  7178  003646  D000               	goto	l2940
  7179  003648                     l2940:
  7180  003648  5003               	movf	___lwmod@divisor,w,c
  7181  00364A  5C01               	subwf	___lwmod@dividend,w,c
  7182  00364C  5004               	movf	___lwmod@divisor+1,w,c
  7183  00364E  5802               	subwfb	___lwmod@dividend+1,w,c
  7184  003650  A0D8               	btfss	status,0,c
  7185  003652  D005               	goto	l2944
  7186  003654  5003               	movf	___lwmod@divisor,w,c
  7187  003656  5E01               	subwf	___lwmod@dividend,f,c
  7188  003658  5004               	movf	___lwmod@divisor+1,w,c
  7189  00365A  5A02               	subwfb	___lwmod@dividend+1,f,c
  7190  00365C  D000               	goto	l2944
  7191  00365E                     l2944:
  7192  00365E  90D8               	bcf	status,0,c
  7193  003660  3204               	rrcf	___lwmod@divisor+1,f,c
  7194  003662  3203               	rrcf	___lwmod@divisor,f,c
  7195  003664  2E05               	decfsz	___lwmod@counter,f,c
  7196  003666  D7F0               	goto	l2940
  7197  003668  D000               	goto	l1029
  7198  00366A                     l1029:
  7199  00366A  C001  F001         	movff	___lwmod@dividend,?___lwmod
  7200  00366E  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  7201  003672  0012               	return		;funcret
  7202  003674                     __end_of___lwmod:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           postinc0	equ	0xFEE
  7211                           wreg	equ	0xFE8
  7212                           indf2	equ	0xFDF
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function ___lwdiv *****************
  7220 ;; Defined at:
  7221 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  dividend        2    0[COMRAM] unsigned int 
  7224 ;;  divisor         2    2[COMRAM] unsigned int 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;  quotient        2    4[COMRAM] unsigned int 
  7227 ;;  counter         1    6[COMRAM] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  2    0[COMRAM] unsigned int 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7237 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;Total ram usage:        7 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; This function calls:
  7244 ;;		Nothing
  7245 ;; This function is called by:
  7246 ;;		_utoa
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text27
  7251  003578                     __ptext27:
  7252                           	opt stack 0
  7253  003578                     ___lwdiv:
  7254                           	opt stack 28
  7255                           
  7256                           ;incstack = 0
  7257  003578  0E00               	movlw	0
  7258  00357A  6E06               	movwf	___lwdiv@quotient+1,c
  7259  00357C  0E00               	movlw	0
  7260  00357E  6E05               	movwf	___lwdiv@quotient,c
  7261  003580  5003               	movf	___lwdiv@divisor,w,c
  7262  003582  1004               	iorwf	___lwdiv@divisor+1,w,c
  7263  003584  B4D8               	btfsc	status,2,c
  7264  003586  D021               	goto	l1019
  7265  003588  0E01               	movlw	1
  7266  00358A  6E07               	movwf	___lwdiv@counter,c
  7267  00358C  D005               	goto	l2918
  7268  00358E                     l2916:
  7269  00358E  90D8               	bcf	status,0,c
  7270  003590  3603               	rlcf	___lwdiv@divisor,f,c
  7271  003592  3604               	rlcf	___lwdiv@divisor+1,f,c
  7272  003594  2A07               	incf	___lwdiv@counter,f,c
  7273  003596  D000               	goto	l2918
  7274  003598                     l2918:
  7275  003598  BE04               	btfsc	___lwdiv@divisor+1,7,c
  7276  00359A  D002               	goto	l2920
  7277  00359C  D7F8               	goto	l2916
  7278  00359E  D000               	goto	l2920
  7279  0035A0                     l2920:
  7280  0035A0  90D8               	bcf	status,0,c
  7281  0035A2  3605               	rlcf	___lwdiv@quotient,f,c
  7282  0035A4  3606               	rlcf	___lwdiv@quotient+1,f,c
  7283  0035A6  5003               	movf	___lwdiv@divisor,w,c
  7284  0035A8  5C01               	subwf	___lwdiv@dividend,w,c
  7285  0035AA  5004               	movf	___lwdiv@divisor+1,w,c
  7286  0035AC  5802               	subwfb	___lwdiv@dividend+1,w,c
  7287  0035AE  A0D8               	btfss	status,0,c
  7288  0035B0  D006               	goto	l2928
  7289  0035B2  5003               	movf	___lwdiv@divisor,w,c
  7290  0035B4  5E01               	subwf	___lwdiv@dividend,f,c
  7291  0035B6  5004               	movf	___lwdiv@divisor+1,w,c
  7292  0035B8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  7293  0035BA  8005               	bsf	___lwdiv@quotient,0,c
  7294  0035BC  D000               	goto	l2928
  7295  0035BE                     l2928:
  7296  0035BE  90D8               	bcf	status,0,c
  7297  0035C0  3204               	rrcf	___lwdiv@divisor+1,f,c
  7298  0035C2  3203               	rrcf	___lwdiv@divisor,f,c
  7299  0035C4  2E07               	decfsz	___lwdiv@counter,f,c
  7300  0035C6  D7EC               	goto	l2920
  7301  0035C8  D000               	goto	l1019
  7302  0035CA                     l1019:
  7303  0035CA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7304  0035CE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7305  0035D2  0012               	return		;funcret
  7306  0035D4                     __end_of___lwdiv:
  7307                           	opt stack 0
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           postinc0	equ	0xFEE
  7315                           wreg	equ	0xFE8
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           fsr2h	equ	0xFDA
  7320                           fsr2l	equ	0xFD9
  7321                           status	equ	0xFD8
  7322                           
  7323 ;; *************** function _init_XLCD *****************
  7324 ;; Defined at:
  7325 ;;		line 219 in file "main.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;		None
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;		None
  7330 ;; Return value:  Size  Location     Type
  7331 ;;		None               void
  7332 ;; Registers used:
  7333 ;;		wreg, status,2, status,0, cstack
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;Total ram usage:        0 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    4
  7346 ;; This function calls:
  7347 ;;		_BusyXLCD
  7348 ;;		_OpenXLCD
  7349 ;;		_WriteCmdXLCD
  7350 ;; This function is called by:
  7351 ;;		_main
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text28
  7356  003932                     __ptext28:
  7357                           	opt stack 0
  7358  003932                     _init_XLCD:
  7359                           	opt stack 26
  7360                           
  7361                           ;main.c: 221: OpenXLCD(0b00101100&0b00111000);
  7362                           
  7363                           ;incstack = 0
  7364  003932  0E28               	movlw	40
  7365  003934  EC58  F018         	call	_OpenXLCD
  7366                           
  7367                           ;main.c: 223: while(BusyXLCD());
  7368  003938  D000               	goto	l3456
  7369  00393A                     l3456:
  7370  00393A  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7371  00393E  0900               	iorlw	0
  7372  003940  A4D8               	btfss	status,2,c
  7373  003942  D7FB               	goto	l3456
  7374                           
  7375                           ;main.c: 225: WriteCmdXLCD(0x06);
  7376  003944  0E06               	movlw	6
  7377  003946  EC9F  F01B         	call	_WriteCmdXLCD
  7378                           
  7379                           ;main.c: 226: WriteCmdXLCD(0x0C);
  7380  00394A  0E0C               	movlw	12
  7381  00394C  EC9F  F01B         	call	_WriteCmdXLCD
  7382  003950  0012               	return		;funcret
  7383  003952                     __end_of_init_XLCD:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function _OpenXLCD *****************
  7401 ;; Defined at:
  7402 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\openxlcd.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  lcdtype         1    wreg     unsigned char 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  lcdtype         1    5[COMRAM] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;Total ram usage:        1 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    3
  7423 ;; This function calls:
  7424 ;;		_BusyXLCD
  7425 ;;		_Delay10KTCYx
  7426 ;;		_DelayPORXLCD
  7427 ;;		_SetDDRamAddr
  7428 ;;		_WriteCmdXLCD
  7429 ;; This function is called by:
  7430 ;;		_init_XLCD
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text29
  7435  0030B0                     __ptext29:
  7436                           	opt stack 0
  7437  0030B0                     _OpenXLCD:
  7438                           	opt stack 26
  7439                           
  7440                           ;incstack = 0
  7441                           ;OpenXLCD@lcdtype stored from wreg
  7442  0030B0  6E06               	movwf	OpenXLCD@lcdtype,c
  7443  0030B2  0EF0               	movlw	240
  7444  0030B4  1681               	andwf	3969,f,c	;volatile
  7445  0030B6  0EF0               	movlw	240
  7446  0030B8  1693               	andwf	3987,f,c	;volatile
  7447  0030BA  9C93               	bcf	3987,6,c	;volatile
  7448  0030BC  9A93               	bcf	3987,5,c	;volatile
  7449  0030BE  9893               	bcf	3987,4,c	;volatile
  7450  0030C0  9C8A               	bcf	3978,6,c	;volatile
  7451  0030C2  9A8A               	bcf	3978,5,c	;volatile
  7452  0030C4  988A               	bcf	3978,4,c	;volatile
  7453  0030C6  ECE8  F01C         	call	_DelayPORXLCD	;wreg free
  7454  0030CA  0E30               	movlw	48
  7455  0030CC  EC9F  F01B         	call	_WriteCmdXLCD
  7456  0030D0  0E05               	movlw	5
  7457  0030D2  ECA9  F01C         	call	_Delay10KTCYx
  7458  0030D6  0E30               	movlw	48
  7459  0030D8  EC9F  F01B         	call	_WriteCmdXLCD
  7460  0030DC  0E01               	movlw	1
  7461  0030DE  ECA9  F01C         	call	_Delay10KTCYx
  7462  0030E2  0E32               	movlw	50
  7463  0030E4  EC9F  F01B         	call	_WriteCmdXLCD
  7464  0030E8  D000               	goto	l2998
  7465  0030EA                     l2998:
  7466  0030EA  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7467  0030EE  0900               	iorlw	0
  7468  0030F0  B4D8               	btfsc	status,2,c
  7469  0030F2  D002               	goto	l3000
  7470  0030F4  D7FA               	goto	l2998
  7471  0030F6  D000               	goto	l3000
  7472  0030F8                     l3000:
  7473  0030F8  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7474  0030FC  0900               	iorlw	0
  7475  0030FE  A4D8               	btfss	status,2,c
  7476  003100  D7FB               	goto	l3000
  7477  003102  5006               	movf	OpenXLCD@lcdtype,w,c
  7478  003104  EC9F  F01B         	call	_WriteCmdXLCD
  7479  003108  D000               	goto	l3004
  7480  00310A                     l3004:
  7481  00310A  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7482  00310E  0900               	iorlw	0
  7483  003110  A4D8               	btfss	status,2,c
  7484  003112  D7FB               	goto	l3004
  7485  003114  0E08               	movlw	8
  7486  003116  EC9F  F01B         	call	_WriteCmdXLCD
  7487  00311A  D000               	goto	l3008
  7488  00311C                     l3008:
  7489  00311C  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7490  003120  0900               	iorlw	0
  7491  003122  A4D8               	btfss	status,2,c
  7492  003124  D7FB               	goto	l3008
  7493  003126  0E0F               	movlw	15
  7494  003128  EC9F  F01B         	call	_WriteCmdXLCD
  7495  00312C  D000               	goto	l3012
  7496  00312E                     l3012:
  7497  00312E  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7498  003132  0900               	iorlw	0
  7499  003134  A4D8               	btfss	status,2,c
  7500  003136  D7FB               	goto	l3012
  7501  003138  0E01               	movlw	1
  7502  00313A  EC9F  F01B         	call	_WriteCmdXLCD
  7503  00313E  D000               	goto	l3016
  7504  003140                     l3016:
  7505  003140  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7506  003144  0900               	iorlw	0
  7507  003146  A4D8               	btfss	status,2,c
  7508  003148  D7FB               	goto	l3016
  7509  00314A  0E04               	movlw	4
  7510  00314C  EC9F  F01B         	call	_WriteCmdXLCD
  7511  003150  D000               	goto	l3020
  7512  003152                     l3020:
  7513  003152  ECBF  F01B         	call	_BusyXLCD	;wreg free
  7514  003156  0900               	iorlw	0
  7515  003158  A4D8               	btfss	status,2,c
  7516  00315A  D7FB               	goto	l3020
  7517  00315C  0E80               	movlw	128
  7518  00315E  ECEA  F01A         	call	_SetDDRamAddr
  7519  003162  D000               	goto	l365
  7520  003164                     l365:
  7521  003164  0012               	return		;funcret
  7522  003166                     __end_of_OpenXLCD:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _DelayPORXLCD *****************
  7540 ;; Defined at:
  7541 ;;		line 238 in file "main.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;		None               void
  7548 ;; Registers used:
  7549 ;;		wreg, cstack
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;Total ram usage:        0 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    1
  7562 ;; This function calls:
  7563 ;;		_Delay1KTCYx
  7564 ;; This function is called by:
  7565 ;;		_OpenXLCD
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           	psect	text30
  7570  0039D0                     __ptext30:
  7571                           	opt stack 0
  7572  0039D0                     _DelayPORXLCD:
  7573                           	opt stack 27
  7574                           
  7575                           ;main.c: 240: Delay1KTCYx(30);
  7576                           
  7577                           ;incstack = 0
  7578  0039D0  0E1E               	movlw	30
  7579  0039D2  ECBF  F01C         	call	_Delay1KTCYx
  7580  0039D6  0012               	return		;funcret
  7581  0039D8                     __end_of_DelayPORXLCD:
  7582                           	opt stack 0
  7583                           tblptru	equ	0xFF8
  7584                           tblptrh	equ	0xFF7
  7585                           tblptrl	equ	0xFF6
  7586                           tablat	equ	0xFF5
  7587                           prodh	equ	0xFF4
  7588                           prodl	equ	0xFF3
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function _Delay1KTCYx *****************
  7599 ;; Defined at:
  7600 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;  unit            1    wreg     unsigned char 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  unit            1    0[COMRAM] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;		None               void
  7607 ;; Registers used:
  7608 ;;		wreg
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;Total ram usage:        1 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; This function calls:
  7621 ;;		Nothing
  7622 ;; This function is called by:
  7623 ;;		_DelayPORXLCD
  7624 ;;		_DelayXLCD
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text31
  7629  00397E                     __ptext31:
  7630                           	opt stack 0
  7631  00397E                     _Delay1KTCYx:
  7632                           	opt stack 27
  7633                           
  7634                           ;incstack = 0
  7635                           ;Delay1KTCYx@unit stored from wreg
  7636  00397E  6E01               	movwf	Delay1KTCYx@unit,c
  7637  003980  0EFA               	movlw	250
  7638  003982                     u4067:
  7639  003982  F000               	nop	
  7640  003984  2EE8               	decfsz	wreg,f,c
  7641  003986  D7FD               	goto	u4067
  7642  003988  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7643  00398A  D7FA               	goto	l2576
  7644  00398C  D000               	goto	l666
  7645  00398E                     l666:
  7646  00398E  0012               	return		;funcret
  7647  003990                     __end_of_Delay1KTCYx:
  7648                           	opt stack 0
  7649                           tblptru	equ	0xFF8
  7650                           tblptrh	equ	0xFF7
  7651                           tblptrl	equ	0xFF6
  7652                           tablat	equ	0xFF5
  7653                           prodh	equ	0xFF4
  7654                           prodl	equ	0xFF3
  7655                           postinc0	equ	0xFEE
  7656                           wreg	equ	0xFE8
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           fsr2h	equ	0xFDA
  7661                           fsr2l	equ	0xFD9
  7662                           status	equ	0xFD8
  7663                           
  7664 ;; *************** function _Delay10KTCYx *****************
  7665 ;; Defined at:
  7666 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;  unit            1    wreg     unsigned char 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  unit            1    1[COMRAM] unsigned char 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;		None               void
  7673 ;; Registers used:
  7674 ;;		wreg
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;Total ram usage:        2 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_OpenXLCD
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text32
  7694  003952                     __ptext32:
  7695                           	opt stack 0
  7696  003952                     _Delay10KTCYx:
  7697                           	opt stack 28
  7698                           
  7699                           ;incstack = 0
  7700                           ;Delay10KTCYx@unit stored from wreg
  7701  003952  6E02               	movwf	Delay10KTCYx@unit,c
  7702  003954  0E0D               	movlw	13
  7703  003956  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  7704  003958  0EFC               	movlw	252
  7705  00395A                     u4077:
  7706  00395A  2EE8               	decfsz	wreg,f,c
  7707  00395C  D7FE               	goto	u4077
  7708  00395E  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7709  003960  D7FC               	goto	u4077
  7710  003962  2E02               	decfsz	Delay10KTCYx@unit,f,c
  7711  003964  D7F7               	goto	l2702
  7712  003966  D000               	goto	l652
  7713  003968                     l652:
  7714  003968  0012               	return		;funcret
  7715  00396A                     __end_of_Delay10KTCYx:
  7716                           	opt stack 0
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           postinc0	equ	0xFEE
  7724                           wreg	equ	0xFE8
  7725                           indf2	equ	0xFDF
  7726                           postinc2	equ	0xFDE
  7727                           postdec2	equ	0xFDD
  7728                           fsr2h	equ	0xFDA
  7729                           fsr2l	equ	0xFD9
  7730                           status	equ	0xFD8
  7731                           
  7732 ;; *************** function _init_ADC *****************
  7733 ;; Defined at:
  7734 ;;		line 228 in file "main.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;		None
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;		None
  7739 ;; Return value:  Size  Location     Type
  7740 ;;		None               void
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;Total ram usage:        0 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    1
  7755 ;; This function calls:
  7756 ;;		_OpenADC
  7757 ;; This function is called by:
  7758 ;;		_main
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text33
  7763  0039A2                     __ptext33:
  7764                           	opt stack 0
  7765  0039A2                     _init_ADC:
  7766                           	opt stack 29
  7767                           
  7768                           ;main.c: 230: OpenADC(0b10001111 & 0b11111111 & 0b11110011,
  7769                           ;main.c: 231: 0b10000111 & 0b01111111 & 0b11111100,
  7770                           ;main.c: 232: 0b11111110);
  7771                           
  7772                           ;incstack = 0
  7773  0039A2  0E04               	movlw	4
  7774  0039A4  6E01               	movwf	OpenADC@config2,c
  7775  0039A6  0EFE               	movlw	254
  7776  0039A8  6E02               	movwf	OpenADC@portconfig,c
  7777  0039AA  0E83               	movlw	131
  7778  0039AC  EC8D  F01A         	call	_OpenADC
  7779  0039B0  0012               	return		;funcret
  7780  0039B2                     __end_of_init_ADC:
  7781                           	opt stack 0
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           postinc0	equ	0xFEE
  7789                           wreg	equ	0xFE8
  7790                           indf2	equ	0xFDF
  7791                           postinc2	equ	0xFDE
  7792                           postdec2	equ	0xFDD
  7793                           fsr2h	equ	0xFDA
  7794                           fsr2l	equ	0xFD9
  7795                           status	equ	0xFD8
  7796                           
  7797 ;; *************** function _OpenADC *****************
  7798 ;; Defined at:
  7799 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  config          1    wreg     unsigned char 
  7802 ;;  config2         1    0[COMRAM] unsigned char 
  7803 ;;  portconfig      1    1[COMRAM] unsigned char 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  config          1    4[COMRAM] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;		None               void
  7808 ;; Registers used:
  7809 ;;		wreg, status,2, status,0
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;Total ram usage:        5 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; This function calls:
  7822 ;;		Nothing
  7823 ;; This function is called by:
  7824 ;;		_init_ADC
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text34
  7829  00351A                     __ptext34:
  7830                           	opt stack 0
  7831  00351A                     _OpenADC:
  7832                           	opt stack 29
  7833                           
  7834                           ;incstack = 0
  7835                           ;OpenADC@config stored from wreg
  7836  00351A  6E05               	movwf	OpenADC@config,c
  7837  00351C  0E00               	movlw	0
  7838  00351E  6EC2               	movwf	4034,c	;volatile
  7839  003520  0E00               	movlw	0
  7840  003522  6EC0               	movwf	4032,c	;volatile
  7841  003524  90D8               	bcf	status,0,c
  7842  003526  3001               	rrcf	OpenADC@config2,w,c
  7843  003528  0B3C               	andlw	60
  7844  00352A  6EC2               	movwf	4034,c	;volatile
  7845  00352C  C001  F003         	movff	OpenADC@config2,??_OpenADC
  7846  003530  3A03               	swapf	??_OpenADC,f,c
  7847  003532  0EF0               	movlw	240
  7848  003534  1603               	andwf	??_OpenADC,f,c
  7849  003536  0E30               	movlw	48
  7850  003538  1603               	andwf	??_OpenADC,f,c
  7851  00353A  5002               	movf	OpenADC@portconfig,w,c
  7852  00353C  0B0F               	andlw	15
  7853  00353E  1003               	iorwf	??_OpenADC,w,c
  7854  003540  6EC1               	movwf	4033,c	;volatile
  7855  003542  C005  F003         	movff	OpenADC@config,??_OpenADC
  7856  003546  90D8               	bcf	status,0,c
  7857  003548  3603               	rlcf	??_OpenADC,f,c
  7858  00354A  90D8               	bcf	status,0,c
  7859  00354C  3603               	rlcf	??_OpenADC,f,c
  7860  00354E  0E38               	movlw	56
  7861  003550  1603               	andwf	??_OpenADC,f,c
  7862  003552  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  7863  003556  3A04               	swapf	??_OpenADC+1,f,c
  7864  003558  0E0F               	movlw	15
  7865  00355A  1604               	andwf	??_OpenADC+1,f,c
  7866  00355C  0E07               	movlw	7
  7867  00355E  1604               	andwf	??_OpenADC+1,f,c
  7868  003560  5005               	movf	OpenADC@config,w,c
  7869  003562  0B80               	andlw	128
  7870  003564  1004               	iorwf	??_OpenADC+1,w,c
  7871  003566  1003               	iorwf	??_OpenADC,w,c
  7872  003568  6EC0               	movwf	4032,c	;volatile
  7873  00356A  AE01               	btfss	OpenADC@config2,7,c
  7874  00356C  D003               	goto	l304
  7875  00356E  9C9E               	bcf	3998,6,c	;volatile
  7876  003570  8C9D               	bsf	3997,6,c	;volatile
  7877  003572  8CF2               	bsf	intcon,6,c	;volatile
  7878  003574                     l304:
  7879  003574  80C2               	bsf	4034,0,c	;volatile
  7880  003576  0012               	return		;funcret
  7881  003578                     __end_of_OpenADC:
  7882                           	opt stack 0
  7883                           tblptru	equ	0xFF8
  7884                           tblptrh	equ	0xFF7
  7885                           tblptrl	equ	0xFF6
  7886                           tablat	equ	0xFF5
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           intcon	equ	0xFF2
  7890                           postinc0	equ	0xFEE
  7891                           wreg	equ	0xFE8
  7892                           indf2	equ	0xFDF
  7893                           postinc2	equ	0xFDE
  7894                           postdec2	equ	0xFDD
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8
  7898                           
  7899 ;; *************** function ___lwtoft *****************
  7900 ;; Defined at:
  7901 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  c               2    8[COMRAM] unsigned int 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  3    8[COMRAM] float 
  7908 ;; Registers used:
  7909 ;;		wreg, status,2, status,0, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7915 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;Total ram usage:        3 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    1
  7922 ;; This function calls:
  7923 ;;		___ftpack
  7924 ;; This function is called by:
  7925 ;;		_main
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text35
  7930  003882                     __ptext35:
  7931                           	opt stack 0
  7932  003882                     ___lwtoft:
  7933                           	opt stack 29
  7934                           
  7935                           ;incstack = 0
  7936  003882  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7937  003886  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7938  00388A  6A03               	clrf	___ftpack@arg+2,c
  7939  00388C  0E8E               	movlw	142
  7940  00388E  6E04               	movwf	___ftpack@exp,c
  7941  003890  0E00               	movlw	0
  7942  003892  6E05               	movwf	___ftpack@sign,c
  7943  003894  ECF5  F017         	call	___ftpack	;wreg free
  7944  003898  C001  F009         	movff	?___ftpack,?___lwtoft
  7945  00389C  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7946  0038A0  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7947  0038A4  D000               	goto	l1046
  7948  0038A6                     l1046:
  7949  0038A6  0012               	return		;funcret
  7950  0038A8                     __end_of___lwtoft:
  7951                           	opt stack 0
  7952                           tblptru	equ	0xFF8
  7953                           tblptrh	equ	0xFF7
  7954                           tblptrl	equ	0xFF6
  7955                           tablat	equ	0xFF5
  7956                           prodh	equ	0xFF4
  7957                           prodl	equ	0xFF3
  7958                           intcon	equ	0xFF2
  7959                           postinc0	equ	0xFEE
  7960                           wreg	equ	0xFE8
  7961                           indf2	equ	0xFDF
  7962                           postinc2	equ	0xFDE
  7963                           postdec2	equ	0xFDD
  7964                           fsr2h	equ	0xFDA
  7965                           fsr2l	equ	0xFD9
  7966                           status	equ	0xFD8
  7967                           
  7968 ;; *************** function ___ftpack *****************
  7969 ;; Defined at:
  7970 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  7971 ;; Parameters:    Size  Location     Type
  7972 ;;  arg             3    0[COMRAM] unsigned um
  7973 ;;  exp             1    3[COMRAM] unsigned char 
  7974 ;;  sign            1    4[COMRAM] unsigned char 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;		None
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  3    0[COMRAM] float 
  7979 ;; Registers used:
  7980 ;;		wreg, status,2, status,0
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7986 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;Total ram usage:        8 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; This function calls:
  7993 ;;		Nothing
  7994 ;; This function is called by:
  7995 ;;		___ftadd
  7996 ;;		___ftdiv
  7997 ;;		___ftmul
  7998 ;;		___lltoft
  7999 ;;		___lwtoft
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           	psect	text36
  8004  002FEA                     __ptext36:
  8005                           	opt stack 0
  8006  002FEA                     ___ftpack:
  8007                           	opt stack 27
  8008                           
  8009                           ;incstack = 0
  8010  002FEA  5004               	movf	___ftpack@exp,w,c
  8011  002FEC  B4D8               	btfsc	status,2,c
  8012  002FEE  D005               	goto	l2584
  8013  002FF0  5001               	movf	___ftpack@arg,w,c
  8014  002FF2  1002               	iorwf	___ftpack@arg+1,w,c
  8015  002FF4  1003               	iorwf	___ftpack@arg+2,w,c
  8016  002FF6  A4D8               	btfss	status,2,c
  8017  002FF8  D00E               	goto	l2590
  8018  002FFA                     l2584:
  8019  002FFA  0E00               	movlw	0
  8020  002FFC  6E01               	movwf	?___ftpack,c
  8021  002FFE  0E00               	movlw	0
  8022  003000  6E02               	movwf	?___ftpack+1,c
  8023  003002  0E00               	movlw	0
  8024  003004  6E03               	movwf	?___ftpack+2,c
  8025  003006  D053               	goto	l773
  8026  003008  D006               	goto	l2590
  8027  00300A                     l2588:
  8028  00300A  2A04               	incf	___ftpack@exp,f,c
  8029  00300C  90D8               	bcf	status,0,c
  8030  00300E  3203               	rrcf	___ftpack@arg+2,f,c
  8031  003010  3202               	rrcf	___ftpack@arg+1,f,c
  8032  003012  3201               	rrcf	___ftpack@arg,f,c
  8033  003014  D000               	goto	l2590
  8034  003016                     l2590:
  8035  003016  0E00               	movlw	0
  8036  003018  1401               	andwf	___ftpack@arg,w,c
  8037  00301A  6E06               	movwf	??___ftpack& (0+255),c
  8038  00301C  0E00               	movlw	0
  8039  00301E  1402               	andwf	___ftpack@arg+1,w,c
  8040  003020  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8041  003022  0EFE               	movlw	254
  8042  003024  1403               	andwf	___ftpack@arg+2,w,c
  8043  003026  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8044  003028  5006               	movf	??___ftpack,w,c
  8045  00302A  1007               	iorwf	??___ftpack+1,w,c
  8046  00302C  1008               	iorwf	??___ftpack+2,w,c
  8047  00302E  B4D8               	btfsc	status,2,c
  8048  003030  D00E               	goto	l2596
  8049  003032  D7EB               	goto	l2588
  8050  003034  D00C               	goto	l2596
  8051  003036                     l2592:
  8052  003036  2A04               	incf	___ftpack@exp,f,c
  8053  003038  0E01               	movlw	1
  8054  00303A  2601               	addwf	___ftpack@arg,f,c
  8055  00303C  0E00               	movlw	0
  8056  00303E  2202               	addwfc	___ftpack@arg+1,f,c
  8057  003040  0E00               	movlw	0
  8058  003042  2203               	addwfc	___ftpack@arg+2,f,c
  8059  003044  90D8               	bcf	status,0,c
  8060  003046  3203               	rrcf	___ftpack@arg+2,f,c
  8061  003048  3202               	rrcf	___ftpack@arg+1,f,c
  8062  00304A  3201               	rrcf	___ftpack@arg,f,c
  8063  00304C  D000               	goto	l2596
  8064  00304E                     l2596:
  8065  00304E  0E00               	movlw	0
  8066  003050  1401               	andwf	___ftpack@arg,w,c
  8067  003052  6E06               	movwf	??___ftpack& (0+255),c
  8068  003054  0E00               	movlw	0
  8069  003056  1402               	andwf	___ftpack@arg+1,w,c
  8070  003058  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8071  00305A  0EFF               	movlw	255
  8072  00305C  1403               	andwf	___ftpack@arg+2,w,c
  8073  00305E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8074  003060  5006               	movf	??___ftpack,w,c
  8075  003062  1007               	iorwf	??___ftpack+1,w,c
  8076  003064  1008               	iorwf	??___ftpack+2,w,c
  8077  003066  B4D8               	btfsc	status,2,c
  8078  003068  D008               	goto	l2600
  8079  00306A  D7E5               	goto	l2592
  8080  00306C  D006               	goto	l2600
  8081  00306E                     l2598:
  8082  00306E  0604               	decf	___ftpack@exp,f,c
  8083  003070  90D8               	bcf	status,0,c
  8084  003072  3601               	rlcf	___ftpack@arg,f,c
  8085  003074  3602               	rlcf	___ftpack@arg+1,f,c
  8086  003076  3603               	rlcf	___ftpack@arg+2,f,c
  8087  003078  D000               	goto	l2600
  8088  00307A                     l2600:
  8089  00307A  BE02               	btfsc	___ftpack@arg+1,7,c
  8090  00307C  D004               	goto	l784
  8091  00307E  0E02               	movlw	2
  8092  003080  6004               	cpfslt	___ftpack@exp,c
  8093  003082  D7F5               	goto	l2598
  8094  003084  D000               	goto	l784
  8095  003086                     l784:
  8096  003086  B004               	btfsc	___ftpack@exp,0,c
  8097  003088  D002               	goto	l2606
  8098  00308A  9E02               	bcf	___ftpack@arg+1,7,c
  8099  00308C  D000               	goto	l2606
  8100  00308E                     l2606:
  8101  00308E  90D8               	bcf	status,0,c
  8102  003090  3204               	rrcf	___ftpack@exp,f,c
  8103  003092  5004               	movf	___ftpack@exp,w,c
  8104  003094  1203               	iorwf	___ftpack@arg+2,f,c
  8105  003096  5005               	movf	___ftpack@sign,w,c
  8106  003098  B4D8               	btfsc	status,2,c
  8107  00309A  D002               	goto	l2612
  8108  00309C  8E03               	bsf	___ftpack@arg+2,7,c
  8109  00309E  D000               	goto	l2612
  8110  0030A0                     l2612:
  8111  0030A0  C001  F001         	movff	___ftpack@arg,?___ftpack
  8112  0030A4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8113  0030A8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8114  0030AC  D000               	goto	l773
  8115  0030AE                     l773:
  8116  0030AE  0012               	return		;funcret
  8117  0030B0                     __end_of___ftpack:
  8118                           	opt stack 0
  8119                           tblptru	equ	0xFF8
  8120                           tblptrh	equ	0xFF7
  8121                           tblptrl	equ	0xFF6
  8122                           tablat	equ	0xFF5
  8123                           prodh	equ	0xFF4
  8124                           prodl	equ	0xFF3
  8125                           intcon	equ	0xFF2
  8126                           postinc0	equ	0xFEE
  8127                           wreg	equ	0xFE8
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function _ReadADC *****************
  8136 ;; Defined at:
  8137 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;		None
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  2    0[COMRAM] int 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;Total ram usage:        4 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_main
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text37
  8165  0039B2                     __ptext37:
  8166                           	opt stack 0
  8167  0039B2                     _ReadADC:
  8168                           	opt stack 30
  8169                           
  8170                           ;incstack = 0
  8171  0039B2  50C4               	movf	4036,w,c	;volatile
  8172  0039B4  6E03               	movwf	??_ReadADC& (0+255),c
  8173  0039B6  50C3               	movf	4035,w,c	;volatile
  8174  0039B8  6E01               	movwf	?_ReadADC,c
  8175  0039BA  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  8176  0039BE  D000               	goto	l312
  8177  0039C0                     l312:
  8178  0039C0  0012               	return		;funcret
  8179  0039C2                     __end_of_ReadADC:
  8180                           	opt stack 0
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           intcon	equ	0xFF2
  8188                           postinc0	equ	0xFEE
  8189                           wreg	equ	0xFE8
  8190                           indf2	equ	0xFDF
  8191                           postinc2	equ	0xFDE
  8192                           postdec2	equ	0xFDD
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _LCD_Move *****************
  8198 ;; Defined at:
  8199 ;;		line 71 in file "main.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  row             1    wreg     unsigned char 
  8202 ;;  column          1    5[COMRAM] unsigned char 
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  row             1    6[COMRAM] unsigned char 
  8205 ;;  ddaddr          1    7[COMRAM] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;		None               void
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8215 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;Total ram usage:        3 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    3
  8222 ;; This function calls:
  8223 ;;		_BusyXLCD
  8224 ;;		_SetDDRamAddr
  8225 ;; This function is called by:
  8226 ;;		_main
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text38
  8231  003910                     __ptext38:
  8232                           	opt stack 0
  8233  003910                     _LCD_Move:
  8234                           	opt stack 27
  8235                           
  8236                           ;incstack = 0
  8237                           ;LCD_Move@row stored from wreg
  8238  003910  6E07               	movwf	LCD_Move@row,c
  8239                           
  8240                           ;main.c: 73: char ddaddr = 0x40*(row-1) + column;
  8241  003912  4007               	rrncf	LCD_Move@row,w,c
  8242  003914  42E8               	rrncf	wreg,f,c
  8243  003916  0BC0               	andlw	192
  8244  003918  2406               	addwf	LCD_Move@column,w,c
  8245  00391A  0FC0               	addlw	192
  8246  00391C  6E08               	movwf	LCD_Move@ddaddr,c
  8247                           
  8248                           ;main.c: 74: while( BusyXLCD() );
  8249  00391E  D000               	goto	l3450
  8250  003920                     l3450:
  8251  003920  ECBF  F01B         	call	_BusyXLCD	;wreg free
  8252  003924  0900               	iorlw	0
  8253  003926  A4D8               	btfss	status,2,c
  8254  003928  D7FB               	goto	l3450
  8255                           
  8256                           ;main.c: 75: SetDDRamAddr( ddaddr );
  8257  00392A  5008               	movf	LCD_Move@ddaddr,w,c
  8258  00392C  ECEA  F01A         	call	_SetDDRamAddr
  8259  003930  0012               	return		;funcret
  8260  003932                     __end_of_LCD_Move:
  8261                           	opt stack 0
  8262                           tblptru	equ	0xFF8
  8263                           tblptrh	equ	0xFF7
  8264                           tblptrl	equ	0xFF6
  8265                           tablat	equ	0xFF5
  8266                           prodh	equ	0xFF4
  8267                           prodl	equ	0xFF3
  8268                           intcon	equ	0xFF2
  8269                           postinc0	equ	0xFEE
  8270                           wreg	equ	0xFE8
  8271                           indf2	equ	0xFDF
  8272                           postinc2	equ	0xFDE
  8273                           postdec2	equ	0xFDD
  8274                           fsr2h	equ	0xFDA
  8275                           fsr2l	equ	0xFD9
  8276                           status	equ	0xFD8
  8277                           
  8278 ;; *************** function _SetDDRamAddr *****************
  8279 ;; Defined at:
  8280 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\setddram.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;  DDaddr          1    wreg     unsigned char 
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;  DDaddr          1    4[COMRAM] unsigned char 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;		None               void
  8287 ;; Registers used:
  8288 ;;		wreg, status,2, status,0, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;Total ram usage:        4 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    2
  8301 ;; This function calls:
  8302 ;;		_DelayFor18TCY
  8303 ;; This function is called by:
  8304 ;;		_LCD_Move
  8305 ;;		_OpenXLCD
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           	psect	text39
  8310  0035D4                     __ptext39:
  8311                           	opt stack 0
  8312  0035D4                     _SetDDRamAddr:
  8313                           	opt stack 26
  8314                           
  8315                           ;incstack = 0
  8316                           ;SetDDRamAddr@DDaddr stored from wreg
  8317  0035D4  6E05               	movwf	SetDDRamAddr@DDaddr,c
  8318  0035D6  0EF0               	movlw	240
  8319  0035D8  1693               	andwf	3987,f,c	;volatile
  8320  0035DA  0EF0               	movlw	240
  8321  0035DC  1681               	andwf	3969,f,c	;volatile
  8322  0035DE  5005               	movf	SetDDRamAddr@DDaddr,w,c
  8323  0035E0  6E02               	movwf	??_SetDDRamAddr& (0+255),c
  8324  0035E2  6A03               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  8325  0035E4  8E02               	bsf	??_SetDDRamAddr,7,c
  8326  0035E6  0E04               	movlw	4
  8327  0035E8  6E04               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  8328  0035EA                     u2125:
  8329  0035EA  3403               	rlcf	??_SetDDRamAddr+1,w,c
  8330  0035EC  3203               	rrcf	??_SetDDRamAddr+1,f,c
  8331  0035EE  3202               	rrcf	??_SetDDRamAddr,f,c
  8332  0035F0  2E04               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  8333  0035F2  D7FB               	goto	u2125
  8334  0035F4  5002               	movf	??_SetDDRamAddr,w,c
  8335  0035F6  0B0F               	andlw	15
  8336  0035F8  1281               	iorwf	3969,f,c	;volatile
  8337  0035FA  9C8A               	bcf	3978,6,c	;volatile
  8338  0035FC  9A8A               	bcf	3978,5,c	;volatile
  8339  0035FE  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8340  003602  888A               	bsf	3978,4,c	;volatile
  8341  003604  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8342  003608  988A               	bcf	3978,4,c	;volatile
  8343  00360A  0EF0               	movlw	240
  8344  00360C  1681               	andwf	3969,f,c	;volatile
  8345  00360E  5005               	movf	SetDDRamAddr@DDaddr,w,c
  8346  003610  0B0F               	andlw	15
  8347  003612  1281               	iorwf	3969,f,c	;volatile
  8348  003614  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8349  003618  888A               	bsf	3978,4,c	;volatile
  8350  00361A  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8351  00361E  988A               	bcf	3978,4,c	;volatile
  8352  003620  0E0F               	movlw	15
  8353  003622  1293               	iorwf	3987,f,c	;volatile
  8354  003624  D000               	goto	l402
  8355  003626                     l402:
  8356  003626  0012               	return		;funcret
  8357  003628                     __end_of_SetDDRamAddr:
  8358                           	opt stack 0
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           postinc0	equ	0xFEE
  8367                           wreg	equ	0xFE8
  8368                           indf2	equ	0xFDF
  8369                           postinc2	equ	0xFDE
  8370                           postdec2	equ	0xFDD
  8371                           fsr2h	equ	0xFDA
  8372                           fsr2l	equ	0xFD9
  8373                           status	equ	0xFD8
  8374                           
  8375 ;; *************** function _LCD_Clear *****************
  8376 ;; Defined at:
  8377 ;;		line 62 in file "main.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;		None
  8382 ;; Return value:  Size  Location     Type
  8383 ;;		None               void
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;Total ram usage:        0 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    3
  8398 ;; This function calls:
  8399 ;;		_BusyXLCD
  8400 ;;		_WriteCmdXLCD
  8401 ;; This function is called by:
  8402 ;;		_main
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           	psect	text40
  8407  00396A                     __ptext40:
  8408                           	opt stack 0
  8409  00396A                     _LCD_Clear:
  8410                           	opt stack 27
  8411                           
  8412                           ;main.c: 64: while(BusyXLCD());
  8413                           
  8414                           ;incstack = 0
  8415  00396A  D000               	goto	l3444
  8416  00396C                     l3444:
  8417  00396C  ECBF  F01B         	call	_BusyXLCD	;wreg free
  8418  003970  0900               	iorlw	0
  8419  003972  A4D8               	btfss	status,2,c
  8420  003974  D7FB               	goto	l3444
  8421                           
  8422                           ;main.c: 65: WriteCmdXLCD(0x01);
  8423  003976  0E01               	movlw	1
  8424  003978  EC9F  F01B         	call	_WriteCmdXLCD
  8425  00397C  0012               	return		;funcret
  8426  00397E                     __end_of_LCD_Clear:
  8427                           	opt stack 0
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           prodh	equ	0xFF4
  8433                           prodl	equ	0xFF3
  8434                           intcon	equ	0xFF2
  8435                           postinc0	equ	0xFEE
  8436                           wreg	equ	0xFE8
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           postdec2	equ	0xFDD
  8440                           fsr2h	equ	0xFDA
  8441                           fsr2l	equ	0xFD9
  8442                           status	equ	0xFD8
  8443                           
  8444 ;; *************** function _WriteCmdXLCD *****************
  8445 ;; Defined at:
  8446 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\wcmdxlcd.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;  cmd             1    wreg     unsigned char 
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  cmd             1    1[COMRAM] unsigned char 
  8451 ;; Return value:  Size  Location     Type
  8452 ;;		None               void
  8453 ;; Registers used:
  8454 ;;		wreg, status,2, status,0, cstack
  8455 ;; Tracked objects:
  8456 ;;		On entry : 0/0
  8457 ;;		On exit  : 0/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;Total ram usage:        1 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; Hardware stack levels required when called:    2
  8467 ;; This function calls:
  8468 ;;		_DelayFor18TCY
  8469 ;; This function is called by:
  8470 ;;		_LCD_Clear
  8471 ;;		_init_XLCD
  8472 ;;		_OpenXLCD
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text41
  8477  00373E                     __ptext41:
  8478                           	opt stack 0
  8479  00373E                     _WriteCmdXLCD:
  8480                           	opt stack 27
  8481                           
  8482                           ;incstack = 0
  8483                           ;WriteCmdXLCD@cmd stored from wreg
  8484  00373E  6E02               	movwf	WriteCmdXLCD@cmd,c
  8485  003740  0EF0               	movlw	240
  8486  003742  1693               	andwf	3987,f,c	;volatile
  8487  003744  0EF0               	movlw	240
  8488  003746  1681               	andwf	3969,f,c	;volatile
  8489  003748  3802               	swapf	WriteCmdXLCD@cmd,w,c
  8490  00374A  0B0F               	andlw	15
  8491  00374C  0B0F               	andlw	15
  8492  00374E  1281               	iorwf	3969,f,c	;volatile
  8493  003750  9C8A               	bcf	3978,6,c	;volatile
  8494  003752  9A8A               	bcf	3978,5,c	;volatile
  8495  003754  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8496  003758  888A               	bsf	3978,4,c	;volatile
  8497  00375A  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8498  00375E  988A               	bcf	3978,4,c	;volatile
  8499  003760  0EF0               	movlw	240
  8500  003762  1681               	andwf	3969,f,c	;volatile
  8501  003764  5002               	movf	WriteCmdXLCD@cmd,w,c
  8502  003766  0B0F               	andlw	15
  8503  003768  1281               	iorwf	3969,f,c	;volatile
  8504  00376A  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8505  00376E  888A               	bsf	3978,4,c	;volatile
  8506  003770  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8507  003774  988A               	bcf	3978,4,c	;volatile
  8508  003776  0E0F               	movlw	15
  8509  003778  1293               	iorwf	3987,f,c	;volatile
  8510  00377A  D000               	goto	l413
  8511  00377C                     l413:
  8512  00377C  0012               	return		;funcret
  8513  00377E                     __end_of_WriteCmdXLCD:
  8514                           	opt stack 0
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           intcon	equ	0xFF2
  8522                           postinc0	equ	0xFEE
  8523                           wreg	equ	0xFE8
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           postdec2	equ	0xFDD
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _BusyXLCD *****************
  8532 ;; Defined at:
  8533 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\busyxlcd.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      unsigned char 
  8540 ;; Registers used:
  8541 ;;		wreg, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;Total ram usage:        0 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    2
  8554 ;; This function calls:
  8555 ;;		_DelayFor18TCY
  8556 ;; This function is called by:
  8557 ;;		_LCD_Clear
  8558 ;;		_LCD_Move
  8559 ;;		_init_XLCD
  8560 ;;		_OpenXLCD
  8561 ;;		_putrsXLCD
  8562 ;;		_putsXLCD
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text42
  8567  00377E                     __ptext42:
  8568                           	opt stack 0
  8569  00377E                     _BusyXLCD:
  8570                           	opt stack 27
  8571                           
  8572                           ;incstack = 0
  8573  00377E  8C8A               	bsf	3978,6,c	;volatile
  8574  003780  9A8A               	bcf	3978,5,c	;volatile
  8575  003782  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8576  003786  888A               	bsf	3978,4,c	;volatile
  8577  003788  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8578  00378C  A681               	btfss	3969,3,c	;volatile
  8579  00378E  D00A               	goto	l321
  8580  003790  988A               	bcf	3978,4,c	;volatile
  8581  003792  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8582  003796  888A               	bsf	3978,4,c	;volatile
  8583  003798  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8584  00379C  988A               	bcf	3978,4,c	;volatile
  8585  00379E  9C8A               	bcf	3978,6,c	;volatile
  8586  0037A0  0E01               	movlw	1
  8587  0037A2  D00A               	goto	l322
  8588  0037A4                     l321:
  8589  0037A4  988A               	bcf	3978,4,c	;volatile
  8590  0037A6  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8591  0037AA  888A               	bsf	3978,4,c	;volatile
  8592  0037AC  ECEC  F01C         	call	_DelayFor18TCY	;wreg free
  8593  0037B0  988A               	bcf	3978,4,c	;volatile
  8594  0037B2  9C8A               	bcf	3978,6,c	;volatile
  8595  0037B4  0E00               	movlw	0
  8596  0037B6  D000               	goto	l322
  8597  0037B8                     l322:
  8598  0037B8  0012               	return		;funcret
  8599  0037BA                     __end_of_BusyXLCD:
  8600                           	opt stack 0
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           postinc0	equ	0xFEE
  8609                           wreg	equ	0xFE8
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function _DelayFor18TCY *****************
  8618 ;; Defined at:
  8619 ;;		line 234 in file "main.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;		None
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;		None
  8624 ;; Return value:  Size  Location     Type
  8625 ;;		None               void
  8626 ;; Registers used:
  8627 ;;		wreg, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;Total ram usage:        0 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    1
  8640 ;; This function calls:
  8641 ;;		_Delay10TCYx
  8642 ;; This function is called by:
  8643 ;;		_BusyXLCD
  8644 ;;		_SetDDRamAddr
  8645 ;;		_WriteCmdXLCD
  8646 ;;		_WriteDataXLCD
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           	psect	text43
  8651  0039D8                     __ptext43:
  8652                           	opt stack 0
  8653  0039D8                     _DelayFor18TCY:
  8654                           	opt stack 27
  8655                           
  8656                           ;main.c: 236: Delay10TCYx(20);
  8657                           
  8658                           ;incstack = 0
  8659  0039D8  0E14               	movlw	20
  8660  0039DA  ECC8  F01C         	call	_Delay10TCYx
  8661  0039DE  0012               	return		;funcret
  8662  0039E0                     __end_of_DelayFor18TCY:
  8663                           	opt stack 0
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           postinc0	equ	0xFEE
  8672                           wreg	equ	0xFE8
  8673                           indf2	equ	0xFDF
  8674                           postinc2	equ	0xFDE
  8675                           postdec2	equ	0xFDD
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function _Delay10TCYx *****************
  8681 ;; Defined at:
  8682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10tcyx.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  unit            1    wreg     unsigned char 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  unit            1    0[COMRAM] unsigned char 
  8687 ;; Return value:  Size  Location     Type
  8688 ;;		None               void
  8689 ;; Registers used:
  8690 ;;		wreg
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;Total ram usage:        1 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; This function calls:
  8703 ;;		Nothing
  8704 ;; This function is called by:
  8705 ;;		_DelayFor18TCY
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           	psect	text44
  8710  003990                     __ptext44:
  8711                           	opt stack 0
  8712  003990                     _Delay10TCYx:
  8713                           	opt stack 27
  8714                           
  8715                           ;incstack = 0
  8716                           ;Delay10TCYx@unit stored from wreg
  8717  003990  6E01               	movwf	Delay10TCYx@unit,c
  8718  003992  0E03               	movlw	3
  8719  003994                     u4087:
  8720  003994  2EE8               	decfsz	wreg,f,c
  8721  003996  D7FE               	goto	u4087
  8722  003998  F000               	nop	
  8723  00399A  2E01               	decfsz	Delay10TCYx@unit,f,c
  8724  00399C  D7FA               	goto	l2570
  8725  00399E  D000               	goto	l659
  8726  0039A0                     l659:
  8727  0039A0  0012               	return		;funcret
  8728  0039A2                     __end_of_Delay10TCYx:
  8729                           	opt stack 0
  8730                           tblptru	equ	0xFF8
  8731                           tblptrh	equ	0xFF7
  8732                           tblptrl	equ	0xFF6
  8733                           tablat	equ	0xFF5
  8734                           prodh	equ	0xFF4
  8735                           prodl	equ	0xFF3
  8736                           intcon	equ	0xFF2
  8737                           postinc0	equ	0xFEE
  8738                           wreg	equ	0xFE8
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           fsr2h	equ	0xFDA
  8743                           fsr2l	equ	0xFD9
  8744                           status	equ	0xFD8
  8745                           
  8746 ;; *************** function _Delay_Seconds *****************
  8747 ;; Defined at:
  8748 ;;		line 52 in file "main.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;  z               1    wreg     unsigned char 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;  z               1    1[COMRAM] unsigned char 
  8753 ;;  x               1    3[COMRAM] unsigned char 
  8754 ;;  y               1    2[COMRAM] unsigned char 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;		None               void
  8757 ;; Registers used:
  8758 ;;		wreg, status,2, status,0
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;Total ram usage:        4 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; This function calls:
  8771 ;;		Nothing
  8772 ;; This function is called by:
  8773 ;;		_main
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           	psect	text45
  8778  0037F2                     __ptext45:
  8779                           	opt stack 0
  8780  0037F2                     _Delay_Seconds:
  8781                           	opt stack 30
  8782                           
  8783                           ;incstack = 0
  8784                           ;Delay_Seconds@z stored from wreg
  8785  0037F2  6E02               	movwf	Delay_Seconds@z,c
  8786                           
  8787                           ;main.c: 54: unsigned char x,y;
  8788                           ;main.c: 55: for(y = 0; y < z; y++)
  8789  0037F4  0E00               	movlw	0
  8790  0037F6  6E03               	movwf	Delay_Seconds@y,c
  8791  0037F8  D012               	goto	l3440
  8792  0037FA                     l3428:
  8793                           
  8794                           ;main.c: 56: {
  8795                           ;main.c: 57: for(x = 0; x < 100; x++)_delay((unsigned long)((10)*(8000000/4000.0)));
  8796  0037FA  0E00               	movlw	0
  8797  0037FC  6E04               	movwf	Delay_Seconds@x,c
  8798  0037FE                     l3430:
  8799  0037FE  0E63               	movlw	99
  8800  003800  6404               	cpfsgt	Delay_Seconds@x,c
  8801  003802  D001               	goto	l3434
  8802  003804  D00A               	goto	l3438
  8803  003806                     l3434:
  8804  003806  0E1A               	movlw	26
  8805  003808  6E01               	movwf	??_Delay_Seconds& (0+255),c
  8806  00380A  0EF8               	movlw	248
  8807  00380C                     u4097:
  8808  00380C  2EE8               	decfsz	wreg,f,c
  8809  00380E  D7FE               	goto	u4097
  8810  003810  2E01               	decfsz	??_Delay_Seconds& (0+255),f,c
  8811  003812  D7FC               	goto	u4097
  8812  003814  D000               	nop2	
  8813  003816  2A04               	incf	Delay_Seconds@x,f,c
  8814  003818  D7F2               	goto	l3430
  8815  00381A                     l3438:
  8816  00381A  2A03               	incf	Delay_Seconds@y,f,c
  8817  00381C  D000               	goto	l3440
  8818  00381E                     l3440:
  8819  00381E  5002               	movf	Delay_Seconds@z,w,c
  8820  003820  5C03               	subwf	Delay_Seconds@y,w,c
  8821  003822  A0D8               	btfss	status,0,c
  8822  003824  D7EA               	goto	l3428
  8823  003826  0012               	return		;funcret
  8824  003828                     __end_of_Delay_Seconds:
  8825                           	opt stack 0
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           postinc0	equ	0xFEE
  8834                           wreg	equ	0xFE8
  8835                           indf2	equ	0xFDF
  8836                           postinc2	equ	0xFDE
  8837                           postdec2	equ	0xFDD
  8838                           fsr2h	equ	0xFDA
  8839                           fsr2l	equ	0xFD9
  8840                           status	equ	0xFD8
  8841                           
  8842 ;; *************** function _ConvertADC *****************
  8843 ;; Defined at:
  8844 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;		None
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;		None               void
  8851 ;; Registers used:
  8852 ;;		None
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;Total ram usage:        0 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; This function calls:
  8865 ;;		Nothing
  8866 ;; This function is called by:
  8867 ;;		_main
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text46
  8872  0039E0                     __ptext46:
  8873                           	opt stack 0
  8874  0039E0                     _ConvertADC:
  8875                           	opt stack 30
  8876                           
  8877                           ;incstack = 0
  8878  0039E0  82C2               	bsf	4034,1,c	;volatile
  8879  0039E2  0012               	return		;funcret
  8880  0039E4                     __end_of_ConvertADC:
  8881                           	opt stack 0
  8882                           tblptru	equ	0xFF8
  8883                           tblptrh	equ	0xFF7
  8884                           tblptrl	equ	0xFF6
  8885                           tablat	equ	0xFF5
  8886                           prodh	equ	0xFF4
  8887                           prodl	equ	0xFF3
  8888                           intcon	equ	0xFF2
  8889                           postinc0	equ	0xFEE
  8890                           wreg	equ	0xFE8
  8891                           indf2	equ	0xFDF
  8892                           postinc2	equ	0xFDE
  8893                           postdec2	equ	0xFDD
  8894                           fsr2h	equ	0xFDA
  8895                           fsr2l	equ	0xFD9
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function _BusyADC *****************
  8899 ;; Defined at:
  8900 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      unsigned char 
  8907 ;; Registers used:
  8908 ;;		wreg
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;Total ram usage:        0 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_main
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text47
  8928  0039C2                     __ptext47:
  8929                           	opt stack 0
  8930  0039C2                     _BusyADC:
  8931                           	opt stack 30
  8932                           
  8933                           ;incstack = 0
  8934  0039C2  A2C2               	btfss	4034,1,c	;volatile
  8935  0039C4  D002               	goto	u3360
  8936  0039C6  0E01               	movlw	1
  8937  0039C8  D002               	goto	l282
  8938  0039CA                     u3360:
  8939  0039CA  0E00               	movlw	0
  8940  0039CC  D000               	goto	l282
  8941  0039CE                     l282:
  8942  0039CE  0012               	return		;funcret
  8943  0039D0                     __end_of_BusyADC:
  8944                           	opt stack 0
  8945                           tblptru	equ	0xFF8
  8946                           tblptrh	equ	0xFF7
  8947                           tblptrl	equ	0xFF6
  8948                           tablat	equ	0xFF5
  8949                           prodh	equ	0xFF4
  8950                           prodl	equ	0xFF3
  8951                           intcon	equ	0xFF2
  8952                           postinc0	equ	0xFEE
  8953                           wreg	equ	0xFE8
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           tblptru	equ	0xFF8
  8961                           tblptrh	equ	0xFF7
  8962                           tblptrl	equ	0xFF6
  8963                           tablat	equ	0xFF5
  8964                           prodh	equ	0xFF4
  8965                           prodl	equ	0xFF3
  8966                           intcon	equ	0xFF2
  8967                           postinc0	equ	0xFEE
  8968                           wreg	equ	0xFE8
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976                           	psect	rparam
  8977  0000                     tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           postinc0	equ	0xFEE
  8985                           wreg	equ	0xFE8
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           postdec2	equ	0xFDD
  8989                           fsr2h	equ	0xFDA
  8990                           fsr2l	equ	0xFD9
  8991                           status	equ	0xFD8


Data Sizes:
    Strings     87
    Constant    141
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    117     127
    BANK0           128      0      23
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> stringKey(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> stringKey(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> stringKey(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> stringKey(BANK0[10]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 10
		 -> stringKeyActual(BANK0[10]), stringKey(BANK0[10]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[3]), STR_9(CODE[10]), STR_7(CODE[11]), STR_6(CODE[17]), 
		 -> STR_5(CODE[11]), STR_4(CODE[11]), STR_3(CODE[15]), STR_2(CODE[16]), 
		 -> STR_1(CODE[10]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> stringKeyActual(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> stringKey(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    _putsXLCD->_WriteDataXLCD
    _putrsXLCD->_WriteDataXLCD
    _itoa->_utoa
    _utoa->___lwdiv
    _init_XLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _DelayPORXLCD->_Delay1KTCYx
    _init_ADC->_OpenADC
    ___lwtoft->___ftpack
    _LCD_Move->_SetDDRamAddr
    _LCD_Clear->_WriteCmdXLCD
    _DelayFor18TCY->_Delay10TCYx

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   71667
                                            112 COMRAM     5     5      0
                            _BusyADC
                         _ConvertADC
                      _Delay_Seconds
                          _LCD_Clear
                           _LCD_Move
                            _ReadADC
                      _WriteDataXLCD
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
                             ___wmul
                           _init_ADC
                          _init_XLCD
                               _itoa
                           _kbd_getc
                          _putrsXLCD
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    40      7   54030
                                             73 COMRAM    39    32      7
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11077
                                             42 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10879
                                             42 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4841
                                             27 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1708
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2370
                                             15 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     927
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     802
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     828
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4116
                                             64 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3819
                                             52 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             24 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     904
                                             64 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2747
                                             49 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     325
                                              2 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2     709
                                              2 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      66
                                              1 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _kbd_getc                                             5     3      2     204
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _itoa                                                 8     2      6    1554
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 9     3      6    1199
                                              7 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _init_XLCD                                            0     0      0     308
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     220
                                              5 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0      22
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0     282
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     282
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2387
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Move                                             3     2      1     667
                                              5 COMRAM     3     2      1
                           _BusyXLCD
                       _SetDDRamAddr
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      66
                                              1 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      88
                           _BusyXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      66
                                              1 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0      22
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Delay_Seconds                                        4     4      0      92
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   _Delay_Seconds
   _LCD_Clear
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _LCD_Move
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _SetDDRamAddr
       _DelayFor18TCY
         _Delay10TCYx
   _ReadADC
   _WriteDataXLCD
     _DelayFor18TCY
       _Delay10TCYx
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftge
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___fttol (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _init_ADC
     _OpenADC
   _init_XLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _Delay10KTCYx
       _DelayPORXLCD
         _Delay1KTCYx
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _itoa
     _utoa
       ___lwdiv
       ___lwmod
   _kbd_getc
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteDataXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteDataXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___fttol
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      17       5       18.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     75      7F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      34        0.0%
DATA                 0      0      96       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Jun 13 15:02:25 2015

             ___awdiv@sign 000C        ___wmul@multiplicand 0011                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 0040               ___ftadd@exp2 003F  
              __CFG_LVP$ON 000000               ___ftadd@sign 003E                        l211 139C  
                      l124 2DE6                        l221 166E                        l205 134C  
                      l206 1350                        l207 17E4                        l312 39C0  
                      l304 3574                        l321 37A4                        l129 2E20  
                      l322 37B8                        l402 3626                        l234 18B0  
                      l413 377C                        l262 1CA0                        l175 22B2  
                      l424 373C                        l168 2860                        l282 39CE  
                      l427 3880                        l620 32A4                        l365 3164  
                      l277 1ED2                        l633 3448                        l652 3968  
                      l732 2C3E                        l813 28A6                        l741 2C2E  
                      l814 2A24                        l817 28D0                        l913 390E  
                      l666 398E                        l659 39A0                        l828 2992  
                      l773 30AE                        l925 31EA                        l845 2FE8  
                      l837 29AE                        l853 2B34                        l862 2B24  
                      l927 320E                        l919 36B8                        l871 333A  
                      l855 2A9C                        l784 3086                        l848 2FB4  
                      l856 2AC4                        l956 33B6                        l877 2D36  
                      l894 36FC                        l966 34A8                        l887 38BE  
                      l898 2F06                        l986 3518               __CFG_CPB$OFF 000000  
             __CFG_CPD$OFF 000000                        _key 0082      __size_of_WriteCmdXLCD 0040  
             ___awmod@sign 0006                        wreg 000FE8               ___ftdiv@cntr 003B  
             ___ftdiv@sign 0040               __CFG_WDT$OFF 000000                       l1019 35CA  
                     l1029 366A                       l1046 38A6                       l3000 30F8  
                     l3020 3152                       l3012 312E                       l3004 310A  
                     l3016 3140                       l3008 311C                       l3200 2BCC  
                     l3122 2A62                       l3106 3906                       l3212 2BF0  
                     l3204 2BDC                       l3116 2A44                       l4020 2612  
                     l4012 25BA                       l3222 2C1A                       l3070 2000  
                     l2600 307A                       l3232 2F26                       l3224 2C28  
                     l3216 2C00                       l3152 2AE6                       l3144 2AD2  
                     l3056 2820                       l3048 275C                       l3080 20B8  
                     l4016 25EC                       l3234 2F40                       l3330 2EAA  
                     l3218 2C06                       l3162 2B10                       l2612 30A0  
                     l3332 2EB0                       l3340 2EDC                       l3308 2E40  
                     l3412 3498                       l3404 345C                       l3420 34CE  
                     l3172 2B46                       l3164 2B1E                       l3156 2AF6  
                     l3076 20A8                       l3430 37FE                       l2606 308E  
                     l2702 3954                       l3350 3170                       l3502 2DE0  
                     l3238 2F4E                       l3326 2E9A                       l3406 346A  
                     l3158 2AFC                       l3094 228E                       l3440 381E  
                     l3360 31AC                       l2720 28B4                       l3344 2EF4  
                     l3336 2EC4                       l3408 3472                       l3192 2B9A  
                     l3088 21DC                       l3434 3806                       l2570 3992  
                     l3450 3920                       l3514 2E0E                       l3258 2F8E  
                     l3338 2ED2                       l3418 34C0                       l3178 2B56  
                     l3428 37FA                       l3444 396C                       l3532 382C  
                     l3268 2FC2                       l3284 32D8                       l2732 28EA  
                     l3276 36D2                       l2812 2CCC                       l3438 381A  
                     l2590 3016                       l3526 369A                       l3470 37DE  
                     l3294 3336                       l2750 2942                       l2742 2912  
                     l2726 28DE                       l2902 342E                       l2822 2CFA  
                     l3622 1312                       l3614 12AE                       l2592 3036  
                     l2584 2FFA                       l2576 3980                       l3456 393A  
                     l2920 35A0                       l3464 37BE                       l3288 330A  
                     l2760 297A                       l2752 294E                       l3384 335E  
                     l2816 2CE2                       l2808 2CBA                       l3704 174E  
                     l3640 138A                       l3632 1364                       l3552 10F2  
                     l3538 384A                       l2762 2986                       l2754 2956  
                     l3386 336C                       l2850 324E                       l2906 343E  
                     l2826 2D10                       l2818 2CE8                       l3810 1BA2  
                     l3802 1B6E                       l3722 1796                       l3706 175A  
                     l3634 1378                       l3626 1338                       l3570 116A  
                     l2596 304E                       l2588 300A                       l2916 358E  
                     l2940 3648                       l3492 2DD0                       l2748 2936  
                     l3396 33A6                       l3388 3374                       l2852 3258  
                     l2844 3238                       l3716 1782                       l3652 1478  
                     l3644 13A2                       l3628 1346                       l3580 119C  
                     l3572 1182                       l2598 306E                       l2918 3598  
                     l3486 2DC6                       l3478 2D44                       l2870 329A  
                     l2862 327E                       l2854 3260                       l2838 3226  
                     l2790 2C78                       l3814 1BC2                       l3806 1B9E  
                     l3750 1866                       l3742 1832                       l3734 1802  
                     l3718 1788                       l3670 158E                       l3582 11C2  
                     l3566 1132                       l3558 1108                       l2928 35BE  
                     l2944 365E                       l2936 3636                       l2768 29CC  
                     l3832 1C7C                       l3816 1BC8                       l3824 1C58  
                     l3752 1882                       l3728 17DE                       l3664 1568  
                     l3576 1192                       l2938 3640                       l3498 2DDA  
                     l2778 29FE                       l2866 328A                       l2890 33FA  
                     l2882 33DE                       l2794 2C86                       l3850 1D1A  
                     l3834 1C8A                       l3826 1C64                       l3770 1A04  
                     l3762 1988                       l3746 1862                       l3738 1826  
                     l3690 168E                       l3658 14FC                       l2892 3404  
                     l2788 2C5E                       l3860 1DFA                       l3772 1A14  
                     l3588 11DA                       l3940 234C                       l2894 340C  
                     l2886 33EC                       l3862 1E06                       l3846 1CCA  
                     l3838 1CA6                       l3790 1AEA                       l3782 1A70  
                     l3758 194C                       l3766 19C4                       l3598 121C  
                     l3870 1E2A                       l3950 2386                       l3880 1E60  
                     l3784 1A7A                       l3792 1AF8                       l3768 19D4  
                     l3696 172A                       l3928 2312                       l2898 3422  
                     l3778 1A4C                       l3698 1736                       l3890 1EA6  
                     l3946 2374                       l3884 1E82                       l3876 1E44  
                     l3868 1E1E                       l3796 1B5E                       l3788 1ABC  
                     l3892 1EC4                       l3972 2476                       l3956 23E4  
                     l2998 30EA                       l3798 1B62                       l3984 24B8  
                     l3968 2450                       l3988 24C8                       STR_1 10D3  
                     STR_2 109F                       STR_3 10AF                       STR_4 10BE  
                     STR_5 10BE                       STR_6 108E                       STR_7 10BE  
                     STR_8 10DD                       STR_9 10C9                       u2131 2872  
                     u3011 2E32                       u2125 35EA                       u2141 2886  
                     u3030 2E5E                       _LATB 000F8A                       u3035 2E56  
                     u2341 2C50                       u2361 2C6E                       u3360 39CA  
                     u3440 1254                       u4057 2DB6                       u4067 3982  
                     u3540 1396                       u4077 395A                       u3445 124A  
                     u4087 3994                       u2911 2F18                       u2751 2A36  
                     u4097 380C                       u2931 2F36                       u2771 2A54  
                     u3860 1C9A                 _ActualTemp 007A                       _main 22B4  
             ___ftpack@arg 0001                       _itoa 3674         __size_of_LCD_Clear 0014  
             ___ftpack@exp 0004                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                       _utoa 3166     __size_of_WriteDataXLCD 0040  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000               _sprintf$1770 0057              __CFG_MCLRE$ON 000000  
             ___ftmul@cntr 0029               ___param_bank 000010               ___ftmul@sign 002A  
          __end_of_BusyADC 39D0            __end_of_ReadADC 39C2            _stringKeyActual 008D  
              _Delay10TCYx 3990            __end_of_OpenADC 3578               ___fttol@exp1 000F  
             ___fttol@lval 000B                LCD_Move@row 0007               _WriteCmdXLCD 373E  
         __end_of_LCD_Move 3932                _Delay1KTCYx 397E              ?_SetDDRamAddr 0001  
                    ?_main 0001                      ?_itoa 0011            __end_of___awdiv 32A6  
          __end_of___ftadd 2A26                      STR_10 10E2            __end_of___awmod 344A  
          __end_of___ftdiv 2FEA            __end_of___ftneg 38CC            __end_of___lldiv 33C8  
                    ?_utoa 0008            __end_of___ftmul 2D38            ___awdiv@divisor 0009  
          __end_of___llmod 34BA            __end_of___ftsub 36FE            __end_of___fttol 2F08  
          __end_of___lwdiv 35D4            __end_of___lwmod 3674            ___awdiv@counter 000B  
                    _PORTB 000F81                      _TRISB 000F93                      _TRISC 000F94  
    __size_of_Delay10KTCYx 0018              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0018             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers 1029                      _scale 1ED4  
          __end_of_isdigit 3910              ___ftpack@sign 0005                 _ConvertADC 39E0  
           __CFG_BOREN$OFF 000000                      tablat 000FF5                      utoa@c 0010  
                    utoa@v 000E                      status 000FD8            __end_of_sprintf 1ED4  
          __initialization 38CC               __end_of_main 261E               __end_of_itoa 36BA  
             __end_of_utoa 3210           __end_of_BusyXLCD 37BA               _Delay10KTCYx 3952  
    __size_of_DelayPORXLCD 0008             ??_SetDDRamAddr 0002           __end_of_OpenXLCD 3166  
                   ??_main 0071              ___fttol@sign1 000A                     ??_itoa 0017  
                   ??_utoa 000E          __end_of_LCD_Clear 397E              __activetblptr 000002  
            _WriteDataXLCD 36FE       __size_of__tdiv_to_l_ 0110                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _ADCON2 000FC0           ___llmod@dividend 0001  
                   ?_scale 002B                     _ADRESH 000FC4                     _ADRESL 000FC3  
         ___awdiv@dividend 0007           __end_of___ftpack 30B0           __end_of___lltoft 351A  
         __end_of___lwtoft 38A8                     _OSCCON 000FD3                  ??_BusyADC 0001  
                ??_ReadADC 0003                  ??_OpenADC 0003               _DelayPORXLCD 39D0  
         __end_of_kbd_getc 2E22             __CFG_XINST$OFF 000000           __end_of__powers_ 1077  
                   ___ftge 32A6                     ___wmul 385A                  ??___awdiv 000B  
                ??___ftadd 003B             __CFG_STVREN$ON 000000                  ??___awmod 0005  
                ??___ftdiv 0038                  ??___ftneg 001C                  ??___lldiv 0009  
                ??___ftmul 0022                  ??___llmod 0009                  ??___ftsub 0047  
                ??___fttol 0005           __end_of_init_ADC 39B2                  ??___lwdiv 0005  
                ??___lwmod 0005                     _fround 261E                     clear_0 38D2  
                   clear_1 38DE           ___awdiv@quotient 000D            ___awmod@divisor 0003  
          ___awmod@counter 0005             ?_WriteDataXLCD 0001      ___ftmul@f3_as_product 0026  
                   itoa@cp 0017                  ??_isdigit 0001               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         __end_of_putsXLCD 385A                  ??_sprintf 0051                ?_ConvertADC 0001  
               __accesstop 0080    __end_of__initialization 38E4            __CFG_PBADEN$OFF 000000  
                ?_LCD_Move 0006                 ___ftadd@f1 0035                 ___ftadd@f2 0038  
               ___ftge@ff1 0041                 ___ftge@ff2 0044              ___rparam_used 000001  
               ___ftdiv@f1 0032                 ___ftdiv@f2 0035                 ___ftdiv@f3 003C  
               ___ftneg@f1 0019                 ___ftmul@f1 001C                 ___ftmul@f2 001F  
               ___ftsub@f1 0041                 ___ftsub@f2 0044                 ___fttol@f1 0001  
           __pcstackCOMRAM 0001                 ___lltoft@c 0010              __end_of_scale 22B4  
               ___lwtoft@c 0009                 __div_to_l_ 2B36       __end_of_keyPadMatrix 1084  
          __div_to_l_@exp1 000C            __div_to_l_@cntr 000B                    ??_scale 002E  
   __size_of_DelayFor18TCY 0008            __div_to_l_@quot 0007                 __pbssBANK0 0080  
                ?_BusyXLCD 0001            WriteCmdXLCD@cmd 0002       __end_of_SetDDRamAddr 3628  
       __size_of_init_XLCD 0020                 ??_LCD_Move 0007                  ?_OpenXLCD 0001  
            __div_to_l_@f1 0001              __div_to_l_@f2 0004             Delay_Seconds@x 0004  
           Delay_Seconds@y 0003             Delay_Seconds@z 0002                    ?___ftge 0041  
        WriteDataXLCD@data 0002               ?_Delay10TCYx 0001                    ?___wmul 000F  
          ??_WriteDataXLCD 0002               ?_Delay1KTCYx 0001                    ?_fround 002B  
      __size_of_ConvertADC 0004     __size_of_Delay_Seconds 0036                  ?___ftpack 0001  
                ?___lltoft 0010                  ?___lwtoft 0009                  ?_kbd_getc 0001  
       __size_of_putrsXLCD 0038                 ??_BusyXLCD 0002                  ?_init_ADC 0001  
                  _BusyADC 39C2                    _ReadADC 39B2                 ??_OpenXLCD 0006  
                _ADCResult 0080                    _OpenADC 351A          __end_of__npowers_ 1050  
                  __Hparam 0000                 _scale$1769 002E                    __Lparam 0000  
          __size_of___ftge 0096                    ___awdiv 3210              _DelayFor18TCY 39D8  
                  ___ftadd 2862                    ___awmod 33C8                    ___ftdiv 2F08  
                  ___ftneg 38A8                    ___lldiv 333C            __size_of___wmul 0028  
                  ___ftmul 2C40                    ___llmod 344A                    ___ftsub 36BA  
                  ___fttol 2E22                  ?_putsXLCD 0003                    ___lwdiv 3578  
                  ___lwmod 3628               __psmallconst 1000                    __pcinit 38CC  
               ??___ftpack 0006            putrsXLCD@buffer 0003            __size_of_fround 0244  
          Delay10TCYx@unit 0001                    __ramtop 1000                 ??___lltoft 0014  
                  __ptext0 22B4                    __ptext1 10E6                    __ptext2 1ED4  
                  __ptext3 38EE                    __ptext4 261E                    __ptext5 385A  
                  __ptext6 2C40                    __ptext7 33C8                    __ptext8 3210  
                  __ptext9 2A26          __end_of_init_XLCD 3952                 ??___lwtoft 000C  
              ?__div_to_l_ 0001                    _dpowers 1001                    _isdigit 38EE  
                  _old_key 007D           ___awmod@dividend 0001                  _LCD_Clear 396A  
               ??_kbd_getc 0003             OpenADC@config2 0001                    _sprintf 10E6  
     end_of_initialization 38E4              _Delay_Seconds 37F2                 ??_init_ADC 0006  
                  itoa@buf 0011                    itoa@val 0013              __Lmediumconst 0000  
          ___lldiv@divisor 0005            ___lldiv@counter 000D             ?_DelayFor18TCY 0001  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
               ??_putsXLCD 0005                    utoa@buf 0008             __tdiv_to_l_@f1 0001  
           __tdiv_to_l_@f2 0004                    utoa@val 000A          __end_of_putrsXLCD 37F2  
            ??__tdiv_to_l_ 0007                  _PORTAbits 000F80                  _PORTCbits 000F82  
                _TRISAbits 000F92                  _TRISBbits 000F93                 ?_LCD_Clear 0001  
    __size_of_SetDDRamAddr 0054               ??_ConvertADC 0001             ?_Delay_Seconds 0001  
              ___ftdiv@exp 003F        __size_of__div_to_l_ 010A          __size_of_LCD_Move 0022  
              ___ftmul@exp 0025               _keyPadMatrix 1077             __end_of___ftge 333C  
           __end_of___wmul 3882       __size_of_Delay10TCYx 0012         __end_of_ConvertADC 39E4  
           __end_of_fround 2862               _SetDDRamAddr 35D4       __size_of_Delay1KTCYx 0012  
       SetDDRamAddr@DDaddr 0005        start_initialization 38CC        __end_of__tdiv_to_l_ 2B36  
          ___llmod@divisor 0005           __CFG_OSC$INTIO67 000000          __size_of_BusyXLCD 003C  
          ___llmod@counter 0009            ??_DelayFor18TCY 0002          __size_of_OpenXLCD 00B6  
                 ??___ftge 0047                   ??___wmul 0013             LCD_Move@ddaddr 0008  
            ?_WriteCmdXLCD 0001           __CFG_LPT1OSC$OFF 000000             LCD_Move@column 0006  
                 ??_fround 002E              sprintf@tmpval 0061                 fround@prec 0034  
        __size_of___ftpack 00C6          __size_of___lltoft 0060                __pbssCOMRAM 0076  
        __size_of___lwtoft 0026                ??_LCD_Clear 0003            ??_Delay_Seconds 0001  
             _isdigit$1512 0002            Delay1KTCYx@unit 0001          __size_of_kbd_getc 00EA  
              sprintf@flag 005F                sprintf@fval 006D                sprintf@prec 006B  
              sprintf@temp 005C                   ?_BusyADC 0001                   ?_ReadADC 0001  
        __size_of_init_ADC 0010          OpenADC@portconfig 0002                   ?_OpenADC 0001  
           putsXLCD@buffer 0003           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
           ??_WriteCmdXLCD 0002                   ?___awdiv 0007                   ?___ftadd 0035  
                 ?___awmod 0001                   ?___ftdiv 0032                   ?___ftneg 0019  
                 ?___lldiv 0001                   ?___ftmul 001C                   ?___llmod 0001  
                 ?___ftsub 0041                  __npowers_ 1029                   ?___fttol 0001  
            ?_Delay10KTCYx 0001                   ?___lwdiv 0001                   ?___lwmod 0001  
              __tdiv_to_l_ 2A26          __size_of_putsXLCD 0032      __end_of_WriteDataXLCD 373E  
             ??__div_to_l_ 0007                __smallconst 1000                   ?_isdigit 0001  
                _init_XLCD 3932           ___lwdiv@quotient 0005                   ?_sprintf 004A  
           __size_of_scale 03E0                   _LCD_Move 3910             ___wmul@product 0013  
            OpenADC@config 0005                   _LATBbits 000F8A                   _LATCbits 000F8B  
                 _PIE1bits 000F9D              ?_DelayPORXLCD 0001                   _PIR1bits 000F9E  
          OpenXLCD@lcdtype 0006         __end_of__div_to_l_ 2C40           __CFG_WDTPS$32768 000000  
           ??_Delay10KTCYx 0001                 _ADCON0bits 000FC2          ___wmul@multiplier 000F  
                _putrsXLCD 37BA           Delay10KTCYx@unit 0002                 ?_init_XLCD 0001  
                _stringKey 0083                   _BusyXLCD 377E             ??_DelayPORXLCD 0002  
                 _OpenXLCD 30B0           __size_of_BusyADC 000E           __size_of_ReadADC 0010  
                 __Hrparam 0000                   _Temp_Ref 007E           __size_of_OpenADC 005E  
                 __Lrparam 0000           __size_of___awdiv 0096           __size_of___ftadd 01C4  
         __size_of___awmod 0082           __size_of___ftdiv 00E2           __size_of___ftneg 0024  
         __size_of___lldiv 008C           __size_of___ftmul 00F8           __size_of___llmod 0070  
         __size_of___ftsub 0044           __size_of___fttol 00E6           __size_of___lwdiv 005C  
         __size_of___lwmod 004C                   ___ftpack 2FEA                _fround$1767 0031  
              _fround$1768 002E                   ___lltoft 34BA                   ___lwtoft 3882  
               sprintf@exp 0069                 sprintf@val 0065                 ?_putrsXLCD 0003  
         __size_of_isdigit 0022            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 2B36                   __ptext11 34BA                   __ptext20 3828  
                 __ptext12 344A                   __ptext21 37BA                   __ptext13 333C  
                 __ptext30 39D0                   __ptext22 36FE                   __ptext14 2E22  
                 __ptext31 397E                   __ptext23 2D38                   __ptext15 36BA  
                 __ptext40 396A                   __ptext32 3952                   __ptext24 3674  
                 __ptext16 2862                   __ptext41 373E                   __ptext33 39A2  
                 __ptext25 3166                   __ptext17 38A8                   __ptext42 377E  
                 __ptext34 351A                   __ptext26 3628                   __ptext18 32A6  
                 __ptext43 39D8                   __ptext35 3882                   __ptext27 3578  
                 __ptext19 2F08                   __ptext44 3990                   __ptext36 2FEA  
                 __ptext28 3932                   __ptext45 37F2                   __ptext37 39B2  
                 __ptext29 30B0                   __ptext46 39E0                   __ptext38 3910  
                 __ptext47 39C2                   __ptext39 35D4                   _kbd_getc 2D38  
                 __powers_ 1050       __end_of_WriteCmdXLCD 377E           __size_of_sprintf 0DEE  
                 _init_ADC 39A2              __size_of_main 036A              __size_of_itoa 0046  
            __size_of_utoa 00AA                   _keypress 0076              ??_Delay10TCYx 0001  
                 _putsXLCD 3828              ??_Delay1KTCYx 0001                 _INTCONbits 000FF2  
              ??_init_XLCD 0007                   itoa@base 0015                   isdigit@c 0003  
                 scale@scl 0031       __end_of_Delay10KTCYx 396A                  sprintf@ap 005A  
         __tdiv_to_l_@exp1 000F                  sprintf@sp 004A           __tdiv_to_l_@cntr 000E  
        _Seven_Segment_MAP 1084           __tdiv_to_l_@quot 000A           ___lwmod@dividend 0001  
         ___lldiv@dividend 0001      __end_of_DelayFor18TCY 39E0               ?__tdiv_to_l_ 0001  
                 utoa@base 000C        __end_of_Delay10TCYx 39A2                   sprintf@c 0070  
                 sprintf@f 004C       __end_of_DelayPORXLCD 39D8                ??_putrsXLCD 0005  
         ___lldiv@quotient 0009            ___lwmod@divisor 0003        __end_of_Delay1KTCYx 3990  
          ___lwmod@counter 0005                kbd_getc@key 0004                kbd_getc@row 0005  
__end_of_Seven_Segment_MAP 108E      __end_of_Delay_Seconds 3828  
